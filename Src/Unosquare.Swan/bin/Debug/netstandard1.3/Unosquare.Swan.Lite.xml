<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unosquare.Swan.Lite</name>
    </assembly>
    <members>
        <member name="T:Unosquare.Swan.Abstractions.IWorker">
            <summary>
            A simple interface for application workers
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.IWorker.Start">
            <summary>
            Should start the task immediately and asynchronously
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.IWorker.Stop">
            <summary>
            Should stop the task immediately and synchronously
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.SettingsProvider`1">
            <summary>
            Represents a provider to save and load settings using a plain JSON file
            </summary>
            <typeparam name="T">The type of settings model</typeparam>
        </member>
        <member name="F:Unosquare.Swan.Abstractions.SettingsProvider`1._syncRoot">
            <summary>
            A synchronization root that is commonly used for cross-thread operations.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SettingsProvider`1.ConfigurationFilePath">
            <summary>
            Gets or sets the configuration file path. By default the entry assembly directory is used
            and the filename is appsettings.json.
            </summary>
            <value>
            The configuration file path.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SettingsProvider`1.Global">
            <summary>
            Gets the global settings object
            </summary>
            <value>
            The global settings object.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.ReloadGlobalSettings">
            <summary>
            Reloads the global settings.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.PersistGlobalSettings">
            <summary>
            Persists the global settings.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.RefreshFromList(System.Collections.Generic.List{Unosquare.Swan.Reflection.ExtendedPropertyInfo{`0}})">
            <summary>
            Updates settings from list.
            </summary>
            <param name="propertyList">The list.</param>
            <returns>
            A list of settings of type ref="ExtendedPropertyInfo"
            </returns>
            <exception cref="T:System.ArgumentNullException">propertyList</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns>A List of ExtendedPropertyInfo of the type T</returns>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SettingsProvider`1.ResetGlobalSettings">
            <summary>
            Resets the global settings.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.SingletonBase`1">
            <summary>
            Represents a singleton pattern abstract class
            </summary>
            <typeparam name="T">The type of class</typeparam>
        </member>
        <member name="F:Unosquare.Swan.Abstractions.SingletonBase`1.LazyInstance">
            <summary>
            The static, singleton instance reference.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.SingletonBase`1.Instance">
            <summary>
            Gets the instance that this singleton represents.
            If the instance is null, it is constructed and assigned when this member is accessed.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SingletonBase`1.Dispose">
            <summary>
            Disposes the internal singleton instance.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.SingletonBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            Call the GC.SuppressFinalize if you override this method and use
            a non-default class finalizer (destructor)
            </summary>
            <param name="disposeManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.Swan.Attributes.ArgumentOptionAttribute">
            <summary>
            Models an option specification.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Attributes.ArgumentOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.ArgumentOptionAttribute"/> class.
            The default long name will be inferred from target property.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Attributes.ArgumentOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="longName">The long name of the option.</param>
        </member>
        <member name="M:Unosquare.Swan.Attributes.ArgumentOptionAttribute.#ctor(System.Char,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:Unosquare.Swan.Attributes.ArgumentOptionAttribute.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.ArgumentOptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option..</param>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.LongName">
            <summary>
            Gets long name of this command line option. This name is usually a single English word.
            </summary>
            <value>
            The long name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.ShortName">
            <summary>
            Gets a short name of this command line option, made of one character.
            </summary>
            <value>
            The short name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.SetName">
            <summary>
            Gets or sets the option's mutually exclusive set name.
            </summary>
            <value>
            The name of the set.
            </value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.Separator">
            <summary>
            When applying attribute to <see cref="T:System.Collections.Generic.IEnumerable`1"/> target properties,
            it allows you to split an argument and consume its content as a sequence.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a command line option is required.
            </summary>
            <value>
              <c>true</c> if required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.ArgumentOptionAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line option. Usually a sentence summary.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Attributes.CopyableAttribute">
            <summary>
            Represents an attribute to select which properties are copyable between objects
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="T:Unosquare.Swan.Attributes.JsonPropertyAttribute">
            <summary>
            An attribute used to help setup a property behavior when serialize/deserialize JSON.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Unosquare.Swan.Attributes.JsonPropertyAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.JsonPropertyAttribute" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="ignored">if set to <c>true</c> [ignored].</param>
        </member>
        <member name="P:Unosquare.Swan.Attributes.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>
            The name of the property.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.JsonPropertyAttribute.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Unosquare.Swan.Attributes.JsonPropertyAttribute" /> is ignored.
            </summary>
            <value>
              <c>true</c> if ignored; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Attributes.PropertyDisplayAttribute">
            <summary>
            An attribute used to include additional information to a Property for serialization.
            Previously we used DisplayAttribute from DataAnnotation
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Unosquare.Swan.Attributes.PropertyDisplayAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.PropertyDisplayAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.PropertyDisplayAttribute.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.PropertyDisplayAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Attributes.StructEndiannessAttribute">
            <summary>
            An attribute used to help conversion structs back and forth into arrays of bytes via
            extension methods included in this library ToStruct and ToBytes.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Unosquare.Swan.Attributes.StructEndiannessAttribute.#ctor(Unosquare.Swan.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.StructEndiannessAttribute"/> class.
            </summary>
            <param name="endianness">The endianness.</param>
        </member>
        <member name="P:Unosquare.Swan.Attributes.StructEndiannessAttribute.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Attributes.VerbOptionAttribute">
            <summary>
            Models a verb option
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Attributes.VerbOptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Attributes.VerbOptionAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Unosquare.Swan.Attributes.VerbOptionAttribute.Name">
            <summary>
            Gets the name of the verb option.
            </summary>
            <value>
            Name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Attributes.VerbOptionAttribute.HelpText">
            <summary>
            Gets or sets a short description of this command line verb. Usually a sentence summary.
            </summary>
            <value>
            The help text.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Components.ArgumentParser">
            <summary>
            Provides methods to parse command line arguments.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ArgumentParser"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.#ctor(Unosquare.Swan.Components.ArgumentParserSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ArgumentParser" /> class,
            configurable with <see cref="T:Unosquare.Swan.Components.ArgumentParserSettings" /> using a delegate.
            </summary>
            <param name="parseSettings">The parse settings.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParser.Settings">
            <summary>
            Gets the instance that implements <see cref="T:Unosquare.Swan.Components.ArgumentParserSettings" /> in use.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.ArgumentParser.ParseArguments``1(System.Collections.Generic.IEnumerable{System.String},``0)">
            <summary>
            Parses a string array of command line arguments constructing values in an instance of type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of the options</typeparam>
            <param name="args">The arguments.</param>
            <param name="instance">The instance.</param>
            <returns>
            <c>true</c> if was converted successfully; otherwise,  <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The exception that is thrown when a null reference (Nothing in Visual Basic) 
            is passed to a method that does not accept it as a valid argument
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The exception that is thrown when a method call is invalid for the object's current state
            </exception>
        </member>
        <member name="T:Unosquare.Swan.Components.ArgumentParserSettings">
            <summary>
            Provides settings for <see cref="T:Unosquare.Swan.Components.ArgumentParser"/>.
            Based on CommandLine (Copyright 2005-2015 Giacomo Stelluti Scala and Contributors.)
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.WriteBanner">
            <summary>
            Gets or sets a value indicating whether [write banner].
            </summary>
            <value>
              <c>true</c> if [write banner]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons.
            Note that case insensitivity only applies to <i>parameters</i>, not the values
            assigned to them (for example, enum parsing).
            </summary>
            <value>
              <c>true</c> if [case sensitive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.CaseInsensitiveEnumValues">
            <summary>
            Gets or sets a value indicating whether perform case sensitive comparisons of <i>values</i>.
            Note that case insensitivity only applies to <i>values</i>, not the parameters.
            </summary>
            <value>
              <c>true</c> if [case insensitive enum values]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ArgumentParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating whether the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
              <c>true</c> to allow parsing the arguments with different class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with add-on where add-ons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="T:Unosquare.Swan.Components.EnumHelper">
            <summary>
            Provide Enumerations helpers with internal cache
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.EnumHelper.GetItemsWithValue``1(System.Boolean)">
            <summary>
            Gets the items with the enum item value.
            </summary>
            <typeparam name="T">The type of enumeration</typeparam>
            <param name="humanize">if set to <c>true</c> [humanize].</param>
            <returns>
            A collection of Type/Tuple pairs 
            that represents items with the enum item value
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.EnumHelper.GetItemsWithIndex``1(System.Boolean)">
            <summary>
            Gets the items with the enum item index.
            </summary>
            <typeparam name="T">The type of enumeration</typeparam>
            <param name="humanize">if set to <c>true</c> [humanize].</param>
            <returns>
            A collection of Type/Tuple pairs that represents items with the enum item value
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Components.IObjectMap">
            <summary>
            Interface object map
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.Map">
            <summary>
            Gets or sets the map.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.SourceType">
            <summary>
            Gets or sets the type of the source.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IObjectMap.DestinationType">
            <summary>
            Gets or sets the type of the destination.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ObjectComparer">
            <summary>
            Represents a quick object comparer using the public properties of an object
            or the public members in a structure
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreEqual``1(``0,``0)">
            <summary>
            Compare if two variables of the same type are equal.
            </summary>
            <typeparam name="T">The type of objects to compare</typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if the variables are equal; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreEqual(System.Object,System.Object,System.Type)">
            <summary>
            Compare if two variables of the same type are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
              <c>true</c> if the variables are equal; otherwise, <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException">targetType</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreObjectsEqual``1(``0,``0)">
            <summary>
            Compare if two objects of the same type are equal.
            </summary>
            <typeparam name="T">The type of objects to compare</typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if the objects are equal; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreObjectsEqual(System.Object,System.Object,System.Type)">
            <summary>
            Compare if two objects of the same type are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if the objects are equal; otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">targetType</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreStructsEqual``1(``0,``0)">
            <summary>
            Compare if two structures of the same type are equal.
            </summary>
            <typeparam name="T">The type of structs to compare</typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns><c>true</c> if the structs are equal; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreStructsEqual(System.Object,System.Object,System.Type)">
            <summary>
            Compare if two structures of the same type are equal.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <param name="targetType">Type of the target.</param>
            <returns>
              <c>true</c> if the structs are equal; otherwise, <c>false</c>
            </returns>
            <exception cref="T:System.ArgumentNullException">targetType</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.AreEnumerationsEquals``1(``0,``0)">
            <summary>
            Compare if two enumerables are equal.
            </summary>
            <typeparam name="T">The type of enums to compare</typeparam>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            True if two specified types are equal; otherwise, false
            </returns>
            <exception cref="T:System.ArgumentNullException">
            left
            or
            right
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.RetrieveProperties(System.Type)">
            <summary>
            Retrieves PropertyInfo[] (both public and non-public) for the given type
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Properties for the given type</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectComparer.RetrieveFields(System.Type)">
            <summary>
            Retrieves FieldInfo[] (public) for the given type
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns>Value of a field supported by a given object</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.ObjectMap`2">
            <summary>
            Represents an object map
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <seealso cref="T:Unosquare.Swan.Components.IObjectMap" />
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.Map">
            <inheritdoc/>
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.SourceType">
            <inheritdoc/>
        </member>
        <member name="P:Unosquare.Swan.Components.ObjectMap`2.DestinationType">
            <inheritdoc/>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMap`2.MapProperty``2(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Maps the property.
            </summary>
            <typeparam name="TDestinationProperty">The type of the destination property.</typeparam>
            <typeparam name="TSourceProperty">The type of the source property.</typeparam>
            <param name="destinationProperty">The destination property.</param>
            <param name="sourceProperty">The source property.</param>
            <returns>
            An object map representation of type of the destination property 
            and type of the source property
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMap`2.RemoveMapProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Removes the map property.
            </summary>
            <typeparam name="TDestinationProperty">The type of the destination property.</typeparam>
            <param name="destinationProperty">The destination property.</param>
            <returns>
            An object map representation of type of the destination property 
            and type of the source property 
            </returns>
            <exception cref="T:System.Exception">Invalid destination expression</exception>
        </member>
        <member name="T:Unosquare.Swan.Components.ObjectMapper">
            <summary>
            Represents an AutoMapper-like object to map from one object type
            to another using defined properties map or using the default behaviour
            to copy same named properties from one object to another.
            
            The extension methods like CopyPropertiesTo use the default behaviour.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.Copy(System.Object,System.Object,System.String[],System.String[])">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="propertiesToCopy">The properties to copy.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>
            Copied properties count
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            target
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.Copy(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String[],System.String[])">
            <summary>
            Copies the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="propertiesToCopy">The properties to copy.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>
            Copied properties count
            </returns>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            target
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.CreateMap``2">
            <summary>
            Creates the map.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <returns>
            An object map representation of type of the destination property 
            and type of the source property
            </returns>
            <exception cref="T:System.InvalidOperationException">
            You can't create an existing map
            or
            Types doesn't match
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ObjectMapper.Map``1(System.Object,System.Boolean)">
            <summary>
            Maps the specified source.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="autoResolve">if set to <c>true</c> [automatic resolve].</param>
            <returns>
            A new instance of the map
            </returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.InvalidOperationException">You can't map from type {source.GetType().Name} to {typeof(TDestination).Name}</exception>
        </member>
        <member name="T:Unosquare.Swan.DateTimeSpan">
            <summary>
            Represents a struct of DateTimeSpan to compare dates and get in 
            separate fields the amount of time between those dates.
            
            Base on https://stackoverflow.com/a/9216404/1096693
            </summary>
        </member>
        <member name="M:Unosquare.Swan.DateTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.DateTimeSpan"/> struct.
            </summary>
            <param name="years">The years.</param>
            <param name="months">The months.</param>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Years">
            <summary>
            Gets the years.
            </summary>
            <value>
            The years.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Months">
            <summary>
            Gets the months.
            </summary>
            <value>
            The months.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Days">
            <summary>
            Gets the days.
            </summary>
            <value>
            The days.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Hours">
            <summary>
            Gets the hours.
            </summary>
            <value>
            The hours.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>
            The minutes.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Seconds">
            <summary>
            Gets the seconds.
            </summary>
            <value>
            The seconds.
            </value>
        </member>
        <member name="P:Unosquare.Swan.DateTimeSpan.Milliseconds">
            <summary>
            Gets the milliseconds.
            </summary>
            <value>
            The milliseconds.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Definitions">
            <summary>
            Contains useful constants and definitions
            </summary>
            <summary>
            Contains useful constants and definitions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.Windows1252Encoding">
            <summary>
            The MS Windows codepage 1252 encoding used in some legacy scenarios
            such as default CSV text encoding from Excel
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.CurrentAnsiEncoding">
            <summary>
            The encoding associated with the default ANSI code page in the operating 
            system's regional and language settings
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Definitions.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.Swan.Definitions"/> class.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Definitions.BasicTypesInfo">
            <summary>
            The basic types information
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicTypes">
            <summary>
            Contains all basic types, including string, date time, and all of their nullable counterparts
            </summary>
            <value>
            All basic types.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllNumericTypes">
            <summary>
            Gets all numeric types including their nullable counterparts.
            Note that Booleans and Guids are not considered numeric types
            </summary>
            <value>
            All numeric types.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllNumericValueTypes">
            <summary>
            Gets all numeric types without their nullable counterparts.
            Note that Booleans and Guids are not considered numeric types
            </summary>
            <value>
            All numeric value types.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicValueTypes">
            <summary>
            Contains all basic value types. i.e. excludes string and nullables
            </summary>
            <value>
            All basic value types.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicValueAndStringTypes">
            <summary>
            Contains all basic value types including the string type. i.e. excludes nullables
            </summary>
            <value>
            All basic value and string types.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Definitions.AllBasicNullableValueTypes">
            <summary>
            Gets all nullable value types. i.e. excludes string and all basic value types
            </summary>
            <value>
            All basic nullable value types.
            </value>
        </member>
        <member name="T:Unosquare.Swan.OperatingSystem">
            <summary>
            Enumeration of Operating Systems
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Unknown">
            <summary>
            Unknown OS
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Unix">
            <summary>
            UNIX/Linux
            </summary>
        </member>
        <member name="F:Unosquare.Swan.OperatingSystem.Osx">
            <summary>
            macOS (OSX)
            </summary>
        </member>
        <member name="T:Unosquare.Swan.AppWorkerState">
            <summary>
            Enumerates the different Application Worker States
            </summary>
        </member>
        <member name="F:Unosquare.Swan.AppWorkerState.Stopped">
            <summary>
            The stopped
            </summary>
        </member>
        <member name="F:Unosquare.Swan.AppWorkerState.Running">
            <summary>
            The running
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Endianness">
            <summary>
            Defines Endianness, big or little
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Endianness.Big">
            <summary>
            In big endian, you store the most significant byte in the smallest address. 
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Endianness.Little">
            <summary>
            In little endian, you store the least significant byte in the smallest address.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.LogMessageReceivedEventArgs">
            <summary>
            Event arguments representing the message that is logged
            on to the terminal. Use the properties to forward the data to
            your logger of choice.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.LogMessageReceivedEventArgs.#ctor(System.UInt64,Unosquare.Swan.LogMessageType,System.DateTime,System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.LogMessageReceivedEventArgs" /> class.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="messageType">Type of the message.</param>
            <param name="utcDate">The UTC date.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Sequence">
            <summary>
            Gets logging message sequence.
            </summary>
            <value>
            The sequence.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.MessageType">
            <summary>
            Gets the type of the message.
            It can be a combination as the enumeration is a set of bitwise flags
            </summary>
            <value>
            The type of the message.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.UtcDate">
            <summary>
            Gets the UTC date at which the event at which the message was logged.
            </summary>
            <value>
            The UTC date.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Source">
            <summary>
            Gets the name of the source where the logging message
            came from. This can come empty if the logger did not set it.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Message">
            <summary>
            Gets the body of the message.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerMemberName">
            <summary>
            Gets the name of the caller member.
            </summary>
            <value>
            The name of the caller member.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerFilePath">
            <summary>
            Gets the caller file path.
            </summary>
            <value>
            The caller file path.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.CallerLineNumber">
            <summary>
            Gets the caller line number.
            </summary>
            <value>
            The caller line number.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.ExtendedData">
            <summary>
            Gets an object representing extended data.
            It could be an exception or anything else
            </summary>
            <value>
            The extended data.
            </value>
        </member>
        <member name="P:Unosquare.Swan.LogMessageReceivedEventArgs.Exception">
            <summary>
            Gets the Extended Data properties cast as an Exception (if possible)
            Otherwise, it return null
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="T:Unosquare.Swan.LogMessageDisplayingEventArgs">
            <summary>
            Event arguments representing a message logged and about to be
            displayed on the terminal (console). Set the CancelOutput property in the
            event handler to prevent the terminal from displaying the message.
            </summary>
            <seealso cref="T:Unosquare.Swan.LogMessageReceivedEventArgs" />
        </member>
        <member name="M:Unosquare.Swan.LogMessageDisplayingEventArgs.#ctor(Unosquare.Swan.LogMessageReceivedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.LogMessageDisplayingEventArgs"/> class.
            </summary>
            <param name="data">The <see cref="T:Unosquare.Swan.LogMessageReceivedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.Swan.LogMessageDisplayingEventArgs.CancelOutput">
            <summary>
            Gets or sets a value indicating whether the displaying of the
            logging message should be canceled.
            </summary>
            <value>
              <c>true</c> if [cancel output]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ByteArrayExtensions">
            <summary>
            Provides various extension methods for byte arrays and streams
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToLowerHex(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes to its lower-case, hexadecimal representation
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="addPrefix">if set to <c>true</c> add the 0x prefix tot he output.</param>
            <returns>
            The specified string instance; no actual conversion is performed
            </returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToUpperHex(System.Byte[],System.Boolean)">
            <summary>
            Converts an array of bytes to its upper-case, hexadecimal representation
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="addPrefix">if set to <c>true</c> [add prefix].</param>
            <returns>
            The specified string instance; no actual conversion is performed
            </returns>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToDashedHex(System.Byte[])">
            <summary>
            Converts an array of bytes to a sequence of dash-separated, hexadecimal,
            uppercase characters
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>
            A string of hexadecimal pairs separated by hyphens, where each pair represents
            the corresponding element in value; for example, "7F-2C-4A-00"
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToBase64(System.Byte[])">
            <summary>
            Converts an array of bytes to a base-64 encoded string
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>A <see cref="T:System.String" /> converted from an array of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ConvertHexadecimalToBytes(System.String)">
            <summary>
            Converts a set of hexadecimal characters (uppercase or lowercase)
            to a byte array. String length must be a multiple of 2 and
            any prefix (such as 0x) has to be avoided for this to work properly
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns>
            A byte array containing the results of encoding the specified set of characters
            </returns>
            <exception cref="T:System.ArgumentNullException">hex</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.GetBitValueAt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Gets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            Bit value at the given offset
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.SetBitValueAt(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
            <returns>Bit value at the given offset</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.SetBitValueAt(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the bit value at the given offset.
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
            <returns>Bit value at the given offset</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Split(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Splits a byte array delimited by the specified sequence of bytes.
            Each individual element in the result will contain the split sequence terminator if it is found to be delimited by it.
            For example if you split [1,2,3,4] by a sequence of [2,3] this method will return a list with 2 byte arrays, one containing [1,2,3] and the
            second one containing 4. Use the Trim extension methods to remove terminator sequences.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset at which to start splitting bytes. Any bytes befor this will be discarded.</param>
            <param name="sequence">The sequence.</param>
            <returns>
            A byte array containing the results the specified sequence of bytes
            </returns>
            <exception cref="T:System.ArgumentNullException">
            buffer
            or
            sequence
            </exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.DeepClone(System.Byte[])">
            <summary>
            Clones the specified buffer, byte by byte
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.TrimStart(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the start of the buffer if the buffer begins with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>
            A new trimmed byte array
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.TrimEnd(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the end of the buffer if the buffer ends with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>
            A byte array containing the results of encoding the specified set of characters
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Trim(System.Byte[],System.Byte[])">
            <summary>
            Removes the specified sequence from the end and the start of the buffer 
            if the buffer ends and/or starts with such sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.EndsWith(System.Byte[],System.Byte[])">
            <summary>
            Determines if the specified buffer ends with the given sequence of bytes
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>
            True if the specified buffer is ends; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.StartsWith(System.Byte[],System.Byte[])">
            <summary>
            Determines if the specified buffer starts with the given sequence of bytes
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c> if the specified buffer starts; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Contains(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the buffer contains the specified sequence
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>
              <c>true</c> if [contains] [the specified sequence]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.IsEqualTo(System.Byte[],System.Byte[])">
            <summary>
            Determines whether the buffer exactly matches, byte by byte the specified sequence.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <returns>
              <c>true</c> if [is equal to] [the specified sequence]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.GetIndexOf(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Returns the first instance of the matched sequence based on the given offset.
            If nomatches are found then this method returns -1
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="sequence">The sequence.</param>
            <param name="offset">The offset.</param>
            <returns>The index of the sequence</returns>
            <exception cref="T:System.ArgumentNullException">
            buffer
            or
            sequence
            </exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Append(System.IO.MemoryStream,System.Byte[])">
            <summary>
            Appends the Memory Stream with the specified buffer.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <returns>
            The same MemoryStream instance
            </returns>
            <exception cref="T:System.ArgumentNullException">
            stream
            or
            buffer
            </exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Append(System.IO.MemoryStream,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Appends the Memory Stream with the specified buffer.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <returns>
            Block of bytes to the current stream using data read from a buffer
            </returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.Append(System.IO.MemoryStream,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Appends the Memory Stream with the specified set of buffers.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffers">The buffers.</param>
            <returns>
            Block of bytes to the current stream using data read from a buffer
            </returns>
            <exception cref="T:System.ArgumentNullException">buffers</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToText(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts an array of bytes into text with the specified encoding
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="encoding">The encoding.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToText(System.Byte[])">
            <summary>
            Converts an array of bytes into text with UTF8 encoding
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="array"/>. A sub-array starts at
            the specified element position in <paramref name="array"/>.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T if any problems with
            the parameters.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that represents the zero-based starting position of
            a sub-array in <paramref name="array"/>.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that represents the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified <paramref name="array"/>. A sub-array starts at
            the specified element position in <paramref name="array"/>.
            </summary>
            <returns>
            An array of T that receives a sub-array, or an empty array of T if any problems with
            the parameters.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that represents the zero-based starting position of
            a sub-array in <paramref name="array"/>.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that represents the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ReadBytesAsync(System.IO.Stream,System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the bytes asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The length.</param>
            <param name="bufferLength">Length of the buffer.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A byte array containing the results of encoding the specified set of characters
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ReadBytesAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the bytes asynchronous.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The length.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A byte array containing the results of encoding the specified set of characters
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The sbyte array.</param>
            <returns>
            The byte array from conversion
            </returns>
            <exception cref="T:System.ArgumentNullException">sbyteArray</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">The byte array.</param>
            <returns>
            The sbyte array from conversion
            </returns>
            <exception cref="T:System.ArgumentNullException">byteArray</exception>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.GetSBytes(System.Text.Encoding,System.String)">
            <summary>
            Gets the sbytes from a string.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="s">The s.</param>
            <returns>The sbyte array from string</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.GetString(System.Text.Encoding,System.SByte[])">
            <summary>
            Gets the string from a sbyte array.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="data">The data.</param>
            <returns>The string</returns>
        </member>
        <member name="M:Unosquare.Swan.ByteArrayExtensions.ReadInput(System.IO.Stream,System.SByte[]@,System.Int32,System.Int32)">
            <summary>
            Reads a number of characters from the current source Stream and writes the data to the target array at the
            specified index.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="target">The target.</param>
            <param name="start">The start.</param>
            <param name="count">The count.</param>
            <returns>
            The number of bytes read
            </returns>
            <exception cref="T:System.ArgumentNullException">
            sourceStream
            or
            target
            </exception>
        </member>
        <member name="T:Unosquare.Swan.Extensions">
            <summary>
            Extension methods
            </summary>
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesTo``1(``0,System.Object)">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Number of properties that was copied successful</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesTo(System.Object,System.Object,System.String[])">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            </summary>
            <param name="source">The source.</param>
            <param name="target">The destination.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>
            Number of properties that were successfully copied
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyOnlyPropertiesTo``1(``0,System.Object)">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <returns>Number of properties that was copied successful</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyOnlyPropertiesTo(System.Object,System.Object,System.String[])">
            <summary>
            Iterates over the public, instance, readable properties of the source and
            tries to write a compatible value to a public, instance, writable property in the destination
            </summary>
            <param name="source">The source.</param>
            <param name="target">The destination.</param>
            <param name="propertiesToCopy">Properties to copy.</param>
            <returns>
            Number of properties that were successfully copied
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.DeepClone``1(``0,System.String[])">
            <summary>
            Copies the properties to new instance of T.
            </summary>
            <typeparam name="T">The new object type</typeparam>
            <param name="source">The source.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>
            The specified type with properties copied
            </returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyPropertiesToNew``1(System.Object,System.String[])">
            <summary>
            Copies the properties to new instance of T.
            </summary>
            <typeparam name="T">The new object type</typeparam>
            <param name="source">The source.</param>
            <param name="ignoreProperties">The ignore properties.</param>
            <returns>
            The specified type with properties copied
            </returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyOnlyPropertiesToNew``1(System.Object,System.String[])">
            <summary>
            Copies the only properties to new instance of T.
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="source">The source.</param>
            <param name="propertiesToCopy">The properties to copy.</param>
            <returns>
            The specified type with properties copied
            </returns>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.CopyKeyValuePairTo(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object,System.String[])">
            <summary>
            Iterates over the keys of the source and tries to write a compatible value to a public, 
            instance, writable property in the destination.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="ignoreKeys">The ignore keys.</param>
            <returns>Number of properties that was copied successful</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Benchmark(System.Action)">
            <summary>
            Measures the elapsed time of the given action as a TimeSpan
            This method uses a high precision Stopwatch.
            </summary>
            <param name="target">The target.</param>
            <returns>
            A  time interval that represents a specified time, where the specification is in units of ticks
            </returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Retry(System.Action,System.TimeSpan,System.Int32)">
            <summary>
            Does the specified action.
            </summary>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
        </member>
        <member name="M:Unosquare.Swan.Extensions.Retry``1(System.Func{``0},System.TimeSpan,System.Int32)">
            <summary>
            Does the specified action.
            </summary>
            <typeparam name="T">The type of the source.</typeparam>
            <param name="action">The action.</param>
            <param name="retryInterval">The retry interval.</param>
            <param name="retryCount">The retry count.</param>
            <returns>
            The return value of the method that this delegate encapsulates
            </returns>
            <exception cref="T:System.ArgumentNullException">action</exception>
            <exception cref="T:System.AggregateException">Represents one or many errors that occur during application execution</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ExceptionMessage(System.Exception,System.String)">
            <summary>
            Retrieves the exception message, plus all the inner exception messages separated by new lines
            </summary>
            <param name="ex">The ex.</param>
            <param name="priorMessage">The prior message.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetCopyableProperties(System.Object)">
            <summary>
            Gets the copyable properties.
            </summary>
            <param name="model">The model.</param>
            <returns>
            Array of properties
            </returns>
            <exception cref="T:System.ArgumentNullException">model</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value or default.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            A dictionary of generic types
            </returns>
            <exception cref="T:System.ArgumentNullException">dict</exception>
        </member>
        <member name="M:Unosquare.Swan.Extensions.ForEach``2(System.Collections.Generic.Dictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Executes the item action for each element in the Dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="itemAction">The item action.</param>
            <exception cref="T:System.ArgumentNullException">dict</exception>
        </member>
        <member name="T:Unosquare.Swan.DateExtensions">
            <summary>
            Provides various extension methods for dates
            </summary>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.ToSortableDate(System.DateTime)">
            <summary>
            Converts the date to a YYYY-MM-DD string
            </summary>
            <param name="date">The date.</param>
            <returns>The concatenation of date.Year, date.Month and date.Day</returns>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.ToSortableDateTime(System.DateTime)">
            <summary>
            Converts the date to a YYYY-MM-DD HH:II:SS string
            </summary>
            <param name="date">The date.</param>
            <returns>The concatenation of date.Year, date.Month, date.Day, date.Hour, date.Minute and date.Second</returns>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.ToDateTime(System.String)">
            <summary>
            Parses a YYYY-MM-DD and optionally it time part, HH:II:SS into a DateTime
            </summary>
            <param name="sortableDate">The sortable date.</param>
            <returns>
            A new instance of the DateTime structure to 
            the specified year, month, day, hour, minute and second
            </returns>
            <exception cref="T:System.ArgumentNullException">sortableDate</exception>
            <exception cref="T:System.Exception">
            Represents errors that occur during application execution
            </exception>
            <exception cref="T:System.ArgumentException">
            Unable to parse sortable date and time. - sortableDate
            </exception>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.DateRange(System.DateTime,System.DateTime)">
            <summary>
            Creates a date's range.
            </summary>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>
            A sequence of integral numbers within a specified date's range
            </returns>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds up a date to match a timespan.
            </summary>
            <param name="dt">The datetime.</param>
            <param name="d">The timespan to match.</param>
            <returns>
            A new instance of the DateTime structure to the specified datetime and timespan ticks
            </returns>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.ToUnixEpochDate(System.DateTime)">
            <summary>
            Get this datetime as a Unix epoch timestamp (seconds since Jan 1, 1970, midnight UTC).
            </summary>
            <param name="date">The date to convert.</param>
            <returns>Seconds since Unix epoch.</returns>
        </member>
        <member name="M:Unosquare.Swan.DateExtensions.GetDateTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            Compares a Date to another and returns a <c>DateTimeSpan</c>.
            </summary>
            <param name="dateStart">The date start.</param>
            <param name="dateEnd">The date end.</param>
            <returns>A DateTimeSpan with the Years, Months, Days, Hours, Minutes, Seconds and Milliseconds between the dates</returns>
        </member>
        <member name="T:Unosquare.Swan.FunctionalExtensions">
            <summary>
            Functional programming extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.FunctionalExtensions.When``1(System.Linq.IQueryable{``0},System.Func{System.Boolean},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Whens the specified condition.
            </summary>
            <typeparam name="T">The type of IQueryable</typeparam>
            <param name="this">The this.</param>
            <param name="condition">The condition.</param>
            <param name="fn">The function.</param>
            <returns>
            The IQueryable
            </returns>
            <exception cref="T:System.ArgumentNullException">
            this
            or
            condition
            or
            fn
            </exception>
        </member>
        <member name="M:Unosquare.Swan.FunctionalExtensions.When``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Whens the specified condition.
            </summary>
            <typeparam name="T">The type of IEnumerable</typeparam>
            <param name="this">The this.</param>
            <param name="condition">The condition.</param>
            <param name="fn">The function.</param>
            <returns>
            The IEnumerable
            </returns>
            <exception cref="T:System.ArgumentNullException">
            this
            or
            condition
            or
            fn
            </exception>
        </member>
        <member name="M:Unosquare.Swan.FunctionalExtensions.AddWhen``1(System.Collections.Generic.IList{``0},System.Func{System.Boolean},System.Func{``0})">
            <summary>
            Adds the value when the condition is true.
            </summary>
            <typeparam name="T">The type of IList element</typeparam>
            <param name="this">The this.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value.</param>
            <returns>
            The IList
            </returns>
            <exception cref="T:System.ArgumentNullException">
            this
            or
            condition
            or
            value
            </exception>
        </member>
        <member name="M:Unosquare.Swan.FunctionalExtensions.AddWhen``1(System.Collections.Generic.IList{``0},System.Boolean,``0)">
            <summary>
            Adds the value when the condition is true.
            </summary>
            <typeparam name="T">The type of IList element</typeparam>
            <param name="this">The this.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="value">The value.</param>
            <returns>
            The IList
            </returns>
            <exception cref="T:System.ArgumentNullException">this</exception>
        </member>
        <member name="M:Unosquare.Swan.FunctionalExtensions.AddRangeWhen``1(System.Collections.Generic.List{``0},System.Func{System.Boolean},System.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Adds the range when the condition is true.
            </summary>
            <typeparam name="T">The type of List element</typeparam>
            <param name="this">The this.</param>
            <param name="condition">The condition.</param>
            <param name="value">The value.</param>
            <returns>
            The List
            </returns>
            <exception cref="T:System.ArgumentNullException">
            this
            or
            condition
            or
            value
            </exception>
        </member>
        <member name="T:Unosquare.Swan.ReflectionExtensions">
            <summary>
            Provides various extension methods for Reflection and Types
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.GetAllTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types within an assembly in a safe manner.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>
            Array of Type objects representing the types specified by an assembly
            </returns>
            <exception cref="T:System.ArgumentNullException">assembly</exception>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.GetDefault(System.Type)">
            <summary>
            The closest programmatic equivalent of default(T)
            </summary>
            <param name="type">The type.</param>
            <returns>
            Default value of this type
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsCollection(System.Type)">
            <summary>
            Determines whether this type is compatible with ICollection.
            </summary>
            <param name="sourceType">The type.</param>
            <returns>
              <c>true</c> if the specified source type is collection; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">sourceType</exception>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.GetMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Type of the source.</param>
            <param name="bindingFlags">The binding flags.</param>
            <param name="methodName">Name of the method.</param>
            <param name="genericTypes">The generic types.</param>
            <param name="parameterTypes">The parameter types.</param>
            <returns>
            An object that represents the method with the specified name
            </returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            The exception that is thrown when binding to a member results in more than one member matching the 
            binding criteria. This class cannot be inherited
            </exception>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsClass(System.Type)">
            <summary>
            Determines whether this instance is class.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsAbstract(System.Type)">
            <summary>
            Determines whether this instance is abstract.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is abstract; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsInterface(System.Type)">
            <summary>
            Determines whether this instance is interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsPrimitive(System.Type)">
            <summary>
            Determines whether this instance is primitive.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the specified type is primitive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsValueType(System.Type)">
            <summary>
            Determines whether [is value type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is value type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsGenericType(System.Type)">
            <summary>
            Determines whether [is generic type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsGenericParameter(System.Type)">
            <summary>
            Determines whether [is generic parameter].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic parameter] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsDefined(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines whether the specified attribute type is defined.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
              <c>true</c> if the specified attribute type is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.GetCustomAttributes(System.Type,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes.
            </summary>
            <param name="type">The type.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>
            Attributes associated with the property represented by this PropertyInfo object
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsGenericTypeDefinition(System.Type)">
            <summary>
            Determines whether [is generic type definition].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is generic type definition] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.BaseType(System.Type)">
            <summary>
            Bases the type.
            </summary>
            <param name="type">The type.</param>
            <returns>returns a type of data</returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.Assembly(System.Type)">
            <summary>
            Assemblies the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>returns an Assembly object</returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.IsIEnumerable(System.Type)">
            <summary>
            Determines whether [is i enumerable request].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is i enumerable request] [the specified type]; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.TryParseBasicType(System.Type,System.String,System.Object@)">
            <summary>
            Tries to parse using the basic types.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>
             <c>true</c> if parsing was successful; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ReflectionExtensions.GetValueOrNull(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets property value or null.
            </summary>
            <param name="propertyInfo">The property information.</param>
            <param name="obj">The object.</param>
            <returns>The property value or null</returns>
        </member>
        <member name="T:Unosquare.Swan.StringExtensions">
            <summary>
            String related extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeMD5(System.IO.Stream,System.Boolean)">
            <summary>
            Computes the MD5 hash of the given stream.
            Do not use for large streams as this reads ALL bytes at once
            </summary>
            <param name="stream">The stream.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>
            The computed hash code
            </returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeMD5(System.String,System.Boolean)">
            <summary>
            Computes the MD5 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeMD5(System.Byte[],System.Boolean)">
            <summary>
            Computes the MD5 hash of the given byte array.
            </summary>
            <param name="data">The data.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>The computed hash code</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeSha1(System.String,System.Boolean)">
            <summary>
            Computes the SHA-1 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>
            The computes a Hash-based Message Authentication Code (HMAC) 
            using the SHA1 hash function
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeSha256(System.String,System.Boolean)">
            <summary>
            Computes the SHA-256 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>
            The computes a Hash-based Message Authentication Code (HMAC) 
            by using the SHA256 hash function
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ComputeSha512(System.String,System.Boolean)">
            <summary>
            Computes the SHA-512 hash of the given string using UTF8 byte encoding.
            </summary>
            <param name="inputString">The input string.</param>
            <param name="createHasher">if set to <c>true</c> [create hasher].</param>
            <returns>
            The computes a Hash-based Message Authentication Code (HMAC) 
            using the SHA512 hash function
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ToStringInvariant(System.Object)">
            <summary>
            Returns a string that represents the given item
            It tries to use InvariantCulture if the ToString(IFormatProvider)
            overload exists.
            </summary>
            <param name="item">The item.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ToStringInvariant``1(``0)">
            <summary>
            Returns a string that represents the given item
            It tries to use InvariantCulture if the ToString(IFormatProvider)
            overload exists.
            </summary>
            <typeparam name="T">The type to get the string</typeparam>
            <param name="item">The item.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.RemoveControlCharsExcept(System.String,System.Char[])">
            <summary>
            Removes the control characters from a string except for those specified.
            </summary>
            <param name="input">The input.</param>
            <param name="excludeChars">When specified, these characters will not be removed.</param>
            <returns>
            A string that represents the current object
            </returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.RemoveControlChars(System.String)">
            <summary>
            Removes all control characters from a string, including new line sequences.
            </summary>
            <param name="input">The input.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
            <exception cref="T:System.ArgumentNullException">input</exception>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ToJson(System.Object,System.Boolean)">
            <summary>
            Outputs JSON string representing this object
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> format the output.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Stringify(System.Object)">
            <summary>
            Returns text representing the properties of the specified object in a human-readable format.
            While this method is fairly expensive computationally speaking, it provides an easy way to
            examine objects.
            </summary>
            <param name="obj">The object.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a section of the string, inclusive of both, the start and end indexes.
            This behavior is unlike JavaScript's Slice behavior where the end index is non-inclusive
            If the string is null it returns an empty string
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="endIndex">The end index.</param>
            <returns>Retrieves a substring from this instance</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.SliceLength(System.String,System.Int32,System.Int32)">
            <summary>
            Gets a part of the string clamping the length and startIndex parameters to safe values.
            If the string is null it returns an empty string. This is basically just a safe version
            of string.Substring
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>Retrieves a substring from this instance</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ToLines(System.String)">
            <summary>
            Splits the specified text into r, n or rn separated lines
            </summary>
            <param name="text">The text.</param>
            <returns>
            An array whose elements contain the substrings from this instance 
            that are delimited by one or more characters in separator
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Humanize(System.String)">
            <summary>
            Humanizes (make more human-readable) an identifier-style string 
            in either camel case or snake case. For example, CamelCase will be converted to 
            Camel Case and Snake_Case will be converted to Snake Case.
            </summary>
            <param name="identifierString">The identifier-style string.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Indent(System.String,System.Int32)">
            <summary>
            Indents the specified multi-line text with the given amount of leading spaces
            per line.
            </summary>
            <param name="text">The text.</param>
            <param name="spaces">The spaces.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.TextPositionAt(System.String,System.Int32)">
            <summary>
            Gets the line and column number (i.e. not index) of the
            specified character index. Useful to locate text in a multi-line
            string the same way a text editor does.
            Please not that the tuple contains first the line number and then the
            column number
            </summary>
            <param name="str">The string.</param>
            <param name="charIndex">Index of the character.</param>
            <returns>A 2-tuple whose value is (item1, item2)</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.ToSafeFilename(System.String)">
            <summary>
            Makes the file name system safe.
            </summary>
            <param name="s">The s.</param>
            <returns>
            A string with a safe file name
            </returns>
            <exception cref="T:System.ArgumentNullException">s</exception>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.FormatBytes(System.Int64)">
            <summary>
            Formats a long into the closest bytes string.
            </summary>
            <param name="bytes">The bytes length</param>
            <returns>
            The string representation of the current Byte object, formatted as specified by the format parameter
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.FormatBytes(System.UInt64)">
            <summary>
            Formats a long into the closest bytes string.
            </summary>
            <param name="bytes">The bytes length</param>
            <returns>
            A copy of format in which the format items have been replaced by the string 
            representations of the corresponding arguments
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="maximumLength">The maximum length.</param>
            <returns>
            Retrieves a substring from this instance.
            The substring starts at a specified character position and has a specified length
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified value and append the ommision last.
            </summary>
            <param name="value">The value.</param>
            <param name="maximumLength">The maximum length.</param>
            <param name="omission">The omission.</param>
            <returns>
            Retrieves a substring from this instance.
            The substring starts at a specified character position and has a specified length
            </returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Contains(System.String,System.Char[])">
            <summary>
            Determines whether the specified <see cref="T:System.String"/> contains any of characters in
            the specified array of <see cref="T:System.Char"/>.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> contains any of <paramref name="chars"/>;
            otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="chars">
            An array of <see cref="T:System.Char"/> that contains characters to find.
            </param>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.Hex2Int(System.Char)">
            <summary>
            Convert hex character to an integer. Return -1 if char is something
            other than a hex char.
            </summary>
            <param name="c">The c.</param>
            <returns>Converted integer</returns>
        </member>
        <member name="M:Unosquare.Swan.StringExtensions.HumanizeJson(System.Object,System.Int32)">
            <summary>
            Humanizes a JSON serialization result.
            jsonResult has to be a Dictionary[string,object] or List[object]
            </summary>
            <param name="jsonResult">The json result.</param>
            <param name="indent">The indent.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="T:Unosquare.Swan.ValueTypeExtensions">
            <summary>
            Provides various extension methods for value types and structs
            </summary>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the specified value between the minimum and the maximum
            </summary>
            <typeparam name="T">The type of value to clamp</typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>A value that indicates the relative order of the objects being compared</returns>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.IsBetween``1(``0,``0,``0)">
            <summary>
            Determines whether the specified value is between a minimum and a maximum value.
            </summary>
            <typeparam name="T">The type of value to check</typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>
              <c>true</c> if the specified minimum is between; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.ToStruct``1(System.Byte[])">
            <summary>
            Converts an array of bytes into the given struct type
            </summary>
            <typeparam name="T">The type of structure to convert</typeparam>
            <param name="data">The data.</param>
            <returns>a struct type derived from convert an array of bytes ref=ToStruct"</returns>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.ToStruct``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes into the given struct type
            </summary>
            <typeparam name="T">The type of structure to convert</typeparam>
            <param name="data">The data.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <returns>
            A managed object containing the data pointed to by the ptr parameter
            </returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.ToBytes``1(``0)">
            <summary>
            Converts a struct to an array of bytes
            </summary>
            <typeparam name="T">The type of structure to convert</typeparam>
            <param name="obj">The object.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
        </member>
        <member name="M:Unosquare.Swan.ValueTypeExtensions.SwapEndianness(System.UInt64)">
            <summary>
            Swaps the endianness of an unsigned long to an unsigned integer.
            </summary>
            <param name="longBytes">The bytes contained in a long.</param>
            <returns>
            A 32-bit unsigned integer equivalent to the ulong 
            contained in longBytes
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvReader">
            <summary>
            Represents a reader designed for CSV text.
            It is capable of deserializing objects from individual lines of CSV text,
            transforming CSV lines of text into objects,
            or simply reading the lines of CSV as an array of strings
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader" /> class.
            </summary>
            <param name="inputStream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> leaves the input stream open</param>
            <param name="textEncoding">The text encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It will automatically close the stream upon disposing
            </summary>
            <param name="stream">The stream.</param>
            <param name="textEncoding">The text encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It automatically closes the stream when disposing this reader
            and uses the Windows 1253 encoding
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It uses the Windows 1252 Encoding by default and it automatically closes the file
            when this reader is disposed of.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvReader"/> class.
            It automatically closes the file when disposing this reader
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.Count">
            <summary>
            Gets number of lines that have been read, including the headings
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.EscapeCharacter">
            <summary>
            Gets or sets the escape character.
            By default it is the double quote '"'
            </summary>
            <value>
            The escape character.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.SeparatorCharacter">
            <summary>
            Gets or sets the separator character.
            By default it is the comma character ','
            </summary>
            <value>
            The separator character.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvReader.EndOfStream">
            <summary>
            Gets a value indicating whether the stream reader is at the end of the stream
            In other words, if no more data can be read, this will be set to true.
            </summary>
            <value>
              <c>true</c> if [end of stream]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadLine">
            <summary>
            Reads a line of CSV text into an array of strings
            </summary>
            <returns>An array of the specified element type containing copies of the elements of the ArrayList</returns>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.SkipRecord">
            <summary>
            Skips a line of CSV text.
            This operation does not increment the Count property and it is useful when you need to read the headings
            skipping over a few lines as Reading headings is only supported as the first read operation (i.e. while count is still 0)
            </summary>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadHeadings">
            <summary>
            Reads a line of CSV text and stores the values read as a representation of the column names
            to be used for parsing objects. You have to call this method before calling ReadObject methods.
            </summary>
            <returns>An array of the specified element type containing copies of the elements of the ArrayList</returns>
            <exception cref="T:System.InvalidOperationException">
            Reading headings is only supported as the first read operation.
            or
            ReadHeadings
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads a line of CSV text, converting it into a dynamic object in which properties correspond to the names of the headings
            </summary>
            <param name="map">The mappings between CSV headings (keys) and object properties (values)</param>
            <returns>Object of the type of the elements in the collection of key/value pairs</returns>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
            <exception cref="T:System.ArgumentNullException">map</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject">
            <summary>
            Reads a line of CSV text, converting it into a dynamic object
            The property names correspond to the names of the CSV headings
            </summary>
            <returns>Object of the type of the elements in the collection of key/value pairs</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1(System.Collections.Generic.IDictionary{System.String,System.String},``0@)">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary)
            where the keys are the names of the headings and the values are the names of the instance properties
            in the given Type. The result object must be already instantiated.
            </summary>
            <typeparam name="T">The type of object to map</typeparam>
            <param name="map">The map.</param>
            <param name="result">The result.</param>
            <exception cref="T:System.ArgumentNullException">map
            or
            result</exception>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, using a map (or Dictionary)
            where the keys are the names of the headings and the values are the names of the instance properties
            in the given Type.
            </summary>
            <typeparam name="T">The type of object to map</typeparam>
            <param name="map">The map of CSV headings (keys) and Type property names (values).</param>
            <returns>The conversion of specific type of object</returns>
            <exception cref="T:System.ArgumentNullException">map</exception>
            <exception cref="T:System.InvalidOperationException">ReadHeadings</exception>
            <exception cref="T:System.IO.EndOfStreamException">Cannot read past the end of the stream</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ReadObject``1">
            <summary>
            Reads a line of CSV text converting it into an object of the given type, and assuming
            the property names of the target type match the heading names of the file.
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <returns>The conversion of specific type of object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.ParseRecord(System.IO.StreamReader,System.Char,System.Char)">
            <summary>
            Parses a line of standard CSV text into an array of strings.
            Note that quoted values might have new line sequences in them. Field values will contain such sequences
            </summary>
            <param name="reader">The reader.</param>
            <param name="escapeCharacter">The escape character.</param>
            <param name="separatorCharacter">The separator character.</param>
            <returns>An array of the specified element type containing copies of the elements of the ArrayList</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.LoadRecords``1(System.IO.Stream)">
            <summary>
            Loads the records from the stream
            This method uses Windows 1252 encoding
            </summary>
            <typeparam name="T">The type of IList items to load</typeparam>
            <param name="stream">The stream.</param>
            <returns>A generic collection of objects that can be individually accessed by index</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.LoadRecords``1(System.String)">
            <summary>
            Loads the records from the give file path.
            This method uses Windows 1252 encoding
            </summary>
            <typeparam name="T">The type of IList items to load</typeparam>
            <param name="filePath">The file path.</param>
            <returns>A generic collection of objects that can be individually accessed by index</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvReader.ReadState">
            <summary>
            Defines the 3 different read states
            for the parsing state machine
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.CsvWriter">
            <summary>
            A CSV writer useful for exporting a set of objects
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter" /> class.
            </summary>
            <param name="outputStream">The output stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It automatically closes the stream when disposing this writer
            </summary>
            <param name="outputStream">The output stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It uses the Windows 1252 encoding and automatically closes
            the stream upon disposing this writer
            </summary>
            <param name="outputStream">The output stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It opens the file given file, automatically closes the stream upon 
            disposing of this writer, and uses the Windows 1252 encoding
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.CsvWriter"/> class.
            It opens the file given file, automatically closes the stream upon 
            disposing of this writer, and uses the given text encoding for output
            </summary>
            <param name="filename">The filename.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.SeparatorCharacter">
            <summary>
            Gets or sets the field separator character.
            </summary>
            <value>
            The separator character.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.EscapeCharacter">
            <summary>
            Gets or sets the escape character to use to escape field values
            </summary>
            <value>
            The escape character.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.NewLineSequence">
            <summary>
            Gets or sets the new line character sequence to use when writing a line.
            </summary>
            <value>
            The new line sequence.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.IgnorePropertyNames">
            <summary>
            Defines a list of properties to ignore when outputting CSV lines
            </summary>
            <value>
            The ignore property names.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Formatters.CsvWriter.Count">
            <summary>
            Gets number of lines that have been written, including the headings line
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.SaveRecords``1(System.Collections.Generic.IEnumerable{``0},System.IO.Stream,System.Boolean)">
            <summary>
            Saves the items to a stream.
            It uses the Windows 1252 text encoding for output
            </summary>
            <typeparam name="T">The type of enumeration</typeparam>
            <param name="items">The items.</param>
            <param name="stream">The stream.</param>
            <param name="truncateData"><c>true</c> if stream is truncated, default <c>false</c>.</param>
            <returns>Number of item saved</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.SaveRecords``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Saves the items to a CSV file.
            If the file exits, it overwrites it. If it does not, it creates it.
            It uses the Windows 1252 text encoding for output
            </summary>
            <typeparam name="T">The type of enumeration</typeparam>
            <param name="items">The items.</param>
            <param name="filePath">The file path.</param>
            <returns>Number of item saved</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteLine(System.Object[])">
            <summary>
            Writes a line of CSV text. Items are converted to strings.
            If items are found to be null, empty strings are written out.
            If items are not string, the ToStringInvariant() method is called on them
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteLine(System.String[])">
            <summary>
            Writes a line of CSV text.
            If items are found to be null, empty strings are written out.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObject(System.Object)">
            <summary>
            Writes a row of CSV text. It handles the special cases where the object is
            a dynamic object or and array. It also handles non-collection objects fine.
            If you do not like the way the output is handled, you can simply write an extension
            method of this class and use the WriteLine method instead.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObject``1(``0)">
            <summary>
            Writes a row of CSV text. It handles the special cases where the object is
            a dynamic object or and array. It also handles non-collection objects fine.
            If you do not like the way the output is handled, you can simply write an extension
            method of this class and use the WriteLine method instead.
            </summary>
            <typeparam name="T">The type of object to write</typeparam>
            <param name="item">The item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes a set of items, one per line and atomically by repeatedly calling the
            WriteObject method. For more info check out the description of the WriteObject
            method.
            </summary>
            <typeparam name="T">The type of object to write</typeparam>
            <param name="items">The items.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Type)">
            <summary>
            Writes the headings.
            </summary>
            <param name="type">The type of object to extract headings.</param>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings``1">
            <summary>
            Writes the headings.
            </summary>
            <typeparam name="T">The type of object to extract headings</typeparam>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Collections.IDictionary)">
            <summary>
            Writes the headings.
            </summary>
            <param name="dictionary">The dictionary to extract headings.</param>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteHeadings(System.Object)">
            <summary>
            Writes the headings.
            </summary>
            <param name="obj">The object to extract headings.</param>
            <exception cref="T:System.ArgumentNullException">obj</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryKeys(System.Collections.IDictionary)">
            <summary>
            Gets the filtered dictionary keys using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>An array containing copies of the elements of the dictionary</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredDictionaryValues(System.Collections.IDictionary)">
            <summary>
            Gets the filtered dictionary values using the IgnoreProperties list.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>An array containing copies of the elements of the dictionary</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.GetFilteredTypeProperties(System.Type)">
            <summary>
            Gets the filtered type properties using the IgnoreProperties list.
            </summary>
            <param name="type">The type.</param>
            <returns>Filtered type properties using the IgnoreProperties list</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteObjectValues(System.Object)">
            <summary>
            Writes the object values.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteCollectionValues(System.Collections.ICollection)">
            <summary>
            Writes the collection values.
            </summary>
            <param name="typedItem">The typed item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.WriteDictionaryValues(System.Collections.IDictionary)">
            <summary>
            Writes the dictionary values.
            </summary>
            <param name="typedItem">The typed item.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeAlsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json">
            <summary>
            A very simple, light-weight JSON library written by Mario
            to teach Geo how things are done
            
            This is an useful helper for small tasks but it doesn't represent a full-featured
            serializer such as the beloved Json.NET
            </summary>
            <summary>
            A very simple, light-weight JSON library written by Mario
            to teach Geo how things are done
            
            This is an useful helper for small tasks but it doesn't represent a full-featured
            serializer such as the beloved Json.NET
            </summary>
            <summary>
            A very simple, light-weight JSON library written by Mario
            to teach Geo how things are done
            
            This is an useful helper for small tasks but it doesn't represent a full-featured
            serializer such as the beloved Json.NET
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serialize(System.Object,System.Boolean,System.String,System.Boolean,System.String[],System.String[])">
            <summary>
            Serializes the specified object into a JSON string.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="typeSpecifier">The type specifier. Leave null or empty to avoid setting.</param>
            <param name="includeNonPublic">if set to <c>true</c> non-public getters will be also read.</param>
            <param name="includedNames">The included property names.</param>
            <param name="excludedNames">The excluded property names.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the current object
            </returns>
            <exception cref="T:System.ArgumentException">You need to provide an object or array</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serialize(System.Object,System.Boolean,System.String,System.Boolean,System.String[],System.String[],System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Serializes the specified object into a JSON string.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="typeSpecifier">The type specifier. Leave null or empty to avoid setting.</param>
            <param name="includeNonPublic">if set to <c>true</c> non-public getters will be also read.</param>
            <param name="includedNames">The included property names.</param>
            <param name="excludedNames">The excluded property names.</param>
            <param name="parentReferences">The parent references.</param>
            <returns>
            A <see cref="T:System.String" /> that represents the current object
            </returns>
            <exception cref="T:System.ArgumentException">You need to provide an object or array</exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.SerializeOnly(System.Object,System.Boolean,System.String[])">
            <summary>
            Serializes the specified object only including the specified property names.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="includeNames">The include names.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.SerializeExcluding(System.Object,System.Boolean,System.String[])">
            <summary>
            Serializes the specified object excluding the specified property names.
            </summary>
            <param name="obj">The object.</param>
            <param name="format">if set to <c>true</c> it formats and indents the output.</param>
            <param name="excludeNames">The exclude names.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize(System.String)">
            <summary>
            Deserializes the specified json string as either a Dictionary[string, object] or as a List[object]
            depending on the syntax of the JSON string
            </summary>
            <param name="json">The json.</param>
            <returns>Type of the current deserializes</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            Non-public constructors and property setters are ignored.
            </summary>
            <typeparam name="T">The type of object to deserialize</typeparam>
            <param name="json">The json.</param>
            <returns>The deserialized specified type object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize``1(System.String,System.Boolean)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            </summary>
            <typeparam name="T">The type of object to deserialize</typeparam>
            <param name="json">The json.</param>
            <param name="includeNonPublic">if set to true, it also uses the non-public constructors and property setters.</param>
            <returns>The deserialized specified type object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserialize(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes the specified json string and converts it to the specified object type.
            </summary>
            <param name="json">The json.</param>
            <param name="resultType">Type of the result.</param>
            <param name="includeNonPublic">if set to true, it also uses the non-public constructors and property setters.</param>
            <returns>Type of the current conversion from json result</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.RetrieveProperties(System.Type)">
            <summary>
            Retrieves PropertyInfo[] (both public and non-public) for the given type
            </summary>
            <param name="type">The type.</param>
            <returns>Properties for the given type</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.RetrieveFields(System.Type)">
            <summary>
            Retrieves FieldInfo[] (public) for the given type
            </summary>
            <param name="type">The type.</param>
            <returns>Value of a field supported by a given object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.ConvertFromJsonResult(System.Object,System.Type,System.Object@,System.Boolean)">
            <summary>
            Converts a json deserialized object (simple type, dictionary or list) to a new instance of the specified target type.
            </summary>
            <param name="source">The source.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetInstance">An optional target instance. If null, we will attempt creation.</param>
            <param name="includeNonPublic">if set to <c>true</c> [include private].</param>
            <returns>Type of the current conversion from json result</returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Deserializer">
            <summary>
            A simple JSON Deserializer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Deserializer.DeserializeInternal(System.String)">
            <summary>
            Deserializes specified JSON string
            </summary>
            <param name="json">The json.</param>
            <returns>Type of the current deserializes specified JSON string</returns>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Deserializer.ReadState">
            <summary>
            Defines the different JSON read states
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Formatters.Json.Serializer">
            <summary>
            A simple JSON serializer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.#ctor(System.Object,System.Int32,System.Boolean,Unosquare.Swan.Formatters.Json.SerializerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.Json.Serializer" /> class.
            </summary>
            <param name="obj">The object.</param>
            <param name="depth">The depth.</param>
            <param name="format">if set to <c>true</c> [format].</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Serialize(System.Object,System.Int32,System.Boolean,System.String,System.String[],System.String[],System.Boolean,System.Collections.Generic.List{System.WeakReference})">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="obj">The object.</param>
            <param name="depth">The depth.</param>
            <param name="format">if set to <c>true</c> [format].</param>
            <param name="typeSpecifier">The type specifier. Leave empty to avoid setting.</param>
            <param name="includeProperties">The include properties.</param>
            <param name="excludeProperties">The exclude properties.</param>
            <param name="includeNonPublic">if set to true, then non public properties are also retrieved</param>
            <param name="parentReferences">The parent references.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.IsNonEmptyJsonArrayOrObject(System.String)">
            <summary>
            Determines whether the specified serialized JSON is a non-empty an array or an object
            </summary>
            <param name="serialized">The serialized.</param>
            <returns>
              <c>true</c> if [is set opening] [the specified serialized]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Escape(System.String)">
            <summary>
            Escapes the specified string as a JSON string.
            </summary>
            <param name="str">The string to escape.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.CreateDictionary(System.String,System.Boolean,System.Type,System.Object)">
            <summary>
            Creates the dictionary of values from a target.
            </summary>
            <param name="typeSpecifier">The type specifier.</param>
            <param name="includeNonPublic">if set to <c>true</c> [include non public].</param>
            <param name="targetType">Type of the target.</param>
            <param name="target">The target.</param>
            <returns>Object of the type of the elements in the collection of key/value pairs</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.GetIndentString(System.Int32)">
            <summary>
            Gets the indent string given the depth.
            </summary>
            <param name="depth">The depth.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.RemoveLastComma">
            <summary>
            Removes the last comma in the current string builder.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Append(System.String,System.Int32)">
            <summary>
            Appends the specified text to the output StringBuilder.
            </summary>
            <param name="text">The text.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.Append(System.Char,System.Int32)">
            <summary>
            Appends the specified text to the output StringBuilder.
            </summary>
            <param name="text">The text.</param>
            <param name="depth">The depth.</param>
        </member>
        <member name="M:Unosquare.Swan.Formatters.Json.Serializer.AppendLine">
            <summary>
            Appends a line to the output StringBuilder.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Reflection.AssemblyInfo">
            <summary>
            Represents an Assembly information object
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.AssemblyInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.AssemblyInfo"/> class.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AssemblyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.AssemblyInfo.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo">
            <summary>
            Represents a Property object from a Object Reflection Property with extended values
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedPropertyInfo.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>
            The property.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the data.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>
            The default value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedPropertyInfo.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1">
            <summary>
            Represents a Property object from a Object Reflection Property with extended values
            </summary>
            <typeparam name="T">The type of the object</typeparam>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedPropertyInfo`1"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedTypeInfo">
            <summary>
            Provides extended information about a type.
            
            This class is mainly used to define sets of types within the Constants class
            and it is not meant for other than querying the BasicTypesInfo dictionary.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedTypeInfo"/> class.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.Type">
            <summary>
            Gets the type this extended info class provides for.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsNullableValueType">
            <summary>
            Gets a value indicating whether the type is a nullable value type.
            </summary>
            <value>
            <c>true</c> if this instance is nullable value type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsNumeric">
            <summary>
            Gets a value indicating whether the type or underlying type is numeric.
            </summary>
            <value>
             <c>true</c> if this instance is numeric; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.IsValueType">
            <summary>
            Gets a value indicating whether the type is value type.
            Nullable value types have this property set to False
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.UnderlyingType">
            <summary>
            When dealing with nullable value types, this property will
            return the underlying value type of the nullable,
            Otherwise it will return the same type as the Type property
            </summary>
            <value>
            The type of the underlying.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.TryParseMethodInfo">
            <summary>
            Gets the try parse method information. If the type does not contain
            a suitable TryParse static method, it will return null.
            </summary>
            <value>
            The try parse method information.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.ToStringMethodInfo">
            <summary>
            Gets the ToString method info
            It will prefer the overload containing the IFormatProvider argument
            </summary>
            <value>
            To string method information.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Reflection.ExtendedTypeInfo.CanParseNatively">
            <summary>
            Gets a value indicating whether the type contains a suitable TryParse method.
            </summary>
            <value>
            <c>true</c> if this instance can parse natively; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.GetDefault">
            <summary>
            Gets the default value of this type. For reference types it return null.
            For value types it returns the default value.
            </summary>
            <returns>Default value of this type</returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.TryParse(System.String,System.Object@)">
            <summary>
            Tries to parse the string into an object of the type this instance represents.
            Returns false when no suitable TryParse methods exists for the type or when parsing fails
            for any reason. When possible, this method uses CultureInfo.InvariantCulture and NumberStyles.Any
            </summary>
            <param name="s">The s.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if parse was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo.ToStringInvariant(System.Object)">
            <summary>
            Converts this instance to its string representation, 
            trying to use the CultureInfo.InvariantCulture
            IFormat provider if the overload is available
            </summary>
            <param name="instance">The instance.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.ExtendedTypeInfo`1">
            <summary>
            Provides extended information about a type.
            
            This class is mainly used to define sets of types within the Constants class
            and it is not meant for other than querying the BasicTypesInfo dictionary.
            </summary>
            <typeparam name="T">The type of extended type infomation</typeparam>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Reflection.ExtendedTypeInfo`1"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.ExtendedTypeInfo`1.ToStringInvariant(`0)">
            <summary>
            Converts this instance to its string representation,
            trying to use the CultureInfo.InvariantCulture
            IFormat provider if the overload is available
            </summary>
            <param name="instance">The instance.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.TypeCache`1">
            <summary>
            A thread-safe cache of members belonging to a given type
            The Retrieve method is the most useful one in this class as it
            calls the retrieval process if the type is not contained
            in the cache.
            </summary>
            <typeparam name="T">The type of Member to be cached</typeparam>
        </member>
        <member name="P:Unosquare.Swan.Reflection.TypeCache`1.Item(System.Type)">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> with the specified type.
            If the properties are not available, it returns null.
            </summary>
            <value>
            The <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </value>
            <param name="type">The type.</param>
            <returns>
            A sequence of <see cref="T:System.Collections.Generic.IEnumerable`1" /> with a specified type
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.TypeCache`1.Contains(System.Type)">
            <summary>
            Determines whether the cache contains the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [contains] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.TypeCache`1.Contains``1">
            <summary>
            Determines whether the cache contains the specified type.
            </summary>
            <typeparam name="TOut">The type of the out.</typeparam>
            <returns>
              <c>true</c> if [contains]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.TypeCache`1.Retrieve(System.Type,System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Retrieves the properties stored for the specified type.
            If the properties are not available, it calls the factory method to retrieve them
            and returns them as an array of PropertyInfo
            </summary>
            <param name="type">The type.</param>
            <param name="factory">The factory.</param>
            <returns>
            An array of the properties stored for the specified type
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Unosquare.Swan.Reflection.TypeCache`1.Retrieve``1(System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Retrieves the properties stored for the specified type.
            If the properties are not available, it calls the factory method to retrieve them
            and returns them as an array of PropertyInfo
            </summary>
            <typeparam name="TOut">The type of the out.</typeparam>
            <param name="factory">The factory.</param>
            <returns>An array of the properties stored for the specified type</returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.PropertyTypeCache">
            <summary>
            A thread-safe cache of properties belonging to a given type
            The Retrieve method is the most useful one in this class as it
            calls the retrieval process if the type is not contained
            in the cache.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.GetAllPropertiesFunc(System.Type)">
            <summary>
            Gets all properties function.
            </summary>
            <param name="type">The type.</param>
            <returns>A function to retrieve all properties</returns>
        </member>
        <member name="M:Unosquare.Swan.Reflection.PropertyTypeCache.GetAllPublicPropertiesFunc(System.Type)">
            <summary>
            Gets all public properties function.
            </summary>
            <param name="type">The type.</param>
            <returns>A function to retrieve all public properties</returns>
        </member>
        <member name="T:Unosquare.Swan.Reflection.FieldTypeCache">
            <summary>
            A thread-safe cache of fields belonging to a given type
            The Retrieve method is the most useful one in this class as it
            calls the retrieval process if the type is not contained
            in the cache.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Reflection.FieldTypeCache.GetAllFieldsFunc(System.Type)">
            <summary>
            Gets all fields function.
            </summary>
            <param name="type">The type.</param>
            <returns>A function to retrieve all fields</returns>
        </member>
        <member name="T:Unosquare.Swan.Runtime">
            <summary>
            Provides utility methods to retrieve information about the current application
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Runtime.OS">
            <summary>
            Gets the current Operating System.
            </summary>
            <value>
            The os.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.IsTheOnlyInstance">
            <summary>
            Checks if this application (including version number) is the only instance currently running.
            </summary>
            <value>
              <c>true</c> if this instance is the only instance; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.IsUsingMonoRuntime">
            <summary>
            Gets a value indicating whether this application instance is using the MONO runtime.
            </summary>
            <value>
              <c>true</c> if this instance is using MONO runtime; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.PropertyTypeCache">
            <summary>
            The property type cache
            </summary>
            <value>
            The property type cache.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.FieldTypeCache">
            <summary>
            Gets the field type cache.
            </summary>
            <value>
            The field type cache.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.LocalStoragePath">
            <summary>
            Gets a local storage path with a version
            </summary>
            <value>
            The local storage path.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ArgumentParser">
            <summary>
            Gets the singleton instance created with basic defaults.
            </summary>
            <value>
            The argument parser.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Runtime.ObjectMapper">
            <summary>
            Gets the object mapper instance created with basic defaults.
            </summary>
            <value>
            The object mapper.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Terminal">
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
            <summary>
            A console terminal helper to create nicer output and receive input from the user
            This class is thread-safe :)
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Terminal.OutputContext">
            <summary>
            Represents an asynchronous output context
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.OutputContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Terminal.OutputContext"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.Swan.Terminal"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.CursorLeft">
            <summary>
            Gets or sets the cursor left position.
            </summary>
            <value>
            The cursor left.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.CursorTop">
            <summary>
            Gets or sets the cursor top position.
            </summary>
            <value>
            The cursor top.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.IsConsolePresent">
            <summary>
            Gets a value indicating whether the Console is present
            </summary>
            <value>
            <c>true</c> if this instance is console present; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.IsDebuggerAttached">
            <summary>
            Gets a value indicating whether a debugger is attached.
            </summary>
            <value>
              <c>true</c> if this instance is debugger attached; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.AvailableWriters">
            <summary>
            Gets the available output writers in a bitwise mask.
            </summary>
            <value>
            The available writers.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.OutputEncoding">
            <summary>
            Gets or sets the output encoding for the current console.
            </summary>
            <value>
            The output encoding.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Flush(System.Nullable{System.TimeSpan})">
            <summary>
            Waits for all of the queued output messages to be written out to the console.
            Call this method if it is important to display console text before
            quitting the application such as showing usage or help.
            Set the timeout to null or TimeSpan.Zero to wait indefinitely.
            </summary>
            <param name="timeout">The timeout. Set the amount of time to black before this method exits.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Sets the cursor position.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.BacklineCursor">
            <summary>
            Moves the output cursor one line up starting at left position 0
            Please note that backlining the cursor does not clear the contents of the 
            previous line so you might need to clear it by writing an empty string the 
            length of the console width
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.EnqueueOutput(Unosquare.Swan.Terminal.OutputContext)">
            <summary>
            Enqueues the output to be written to the console
            This is the only method that should enqueue to the output
            Please note that if AvailableWriters is None, then no output will be enqueued
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.DequeueOutputAsync">
            <summary>
            Dequeues the output asynchronously.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Terminal.Table">
            <summary>
            Represents a Table to print in console
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Table.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.Boolean,System.Boolean)">
            <summary>
            Reads a key from the Terminal. This is the closest equivalent to Console.ReadKey
            </summary>
            <param name="intercept">if set to <c>true</c> the pressed key will not be rendered to the output.</param>
            <param name="disableLocking">if set to <c>true</c> the output will continue to be shown.
            This is useful for services and daemons that are running as console applications and wait for a key to exit the program.</param>
            <returns>The console key information</returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.String,System.Boolean)">
            <summary>
            Reads a key from the Terminal
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="preventEcho">if set to <c>true</c> [prevent echo].</param>
            <returns>The console key information</returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadKey(System.String)">
            <summary>
            Reads a key from the terminal preventing the key from being echoed.
            </summary>
            <param name="prompt">The prompt.</param>
            <returns>A value that identifies the console key</returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadLine">
            <summary>
            Reads a line of text from the console
            </summary>
            <returns>The read line</returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadNumber(System.String,System.Int32)">
            <summary>
            Reads a number from the input. If unable to parse, it returns the default number
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultNumber">The default number.</param>
            <returns>
            Conversions of string representation of a number to its 32-bit signed integer equivalent
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Terminal.ReadPrompt(System.String,System.Collections.Generic.Dictionary{System.ConsoleKey,System.String},System.String)">
            <summary>
            Creates a table prompt where the user can enter an option based on the options dictionary provided
            </summary>
            <param name="title">The title.</param>
            <param name="options">The options.</param>
            <param name="anyKeyOption">Any key option.</param>
            <returns>A value that identifies the console key that was pressed</returns>
        </member>
        <member name="E:Unosquare.Swan.Terminal.OnLogMessageReceived">
            <summary>
            Occurs asynchronously, whenever a logging message is received by the terminal.
            Only called when Terminal writes data via Info, Error, Trace, Warn, Debug methods, regardless of whether or not
            the console is present. Subscribe to this event to pass data on to your own logger.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Terminal.OnLogMessageDisplaying">
            <summary>
            Occurs synchronously (so handle quickly), whenever a logging message is about to be enqueued to the
            console output. Setting the CancelOutput to true in the event arguments prevents the
            logging message to be written out to the console.
            Message filtering only works with logging methods such as Trace, Debug, Info, Warn, Error and Dump
            Standard Write methods do not get filtering capabilities.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.LogMessage(Unosquare.Swan.LogMessageType,System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a message
            </summary>
            <param name="messageType">Type of the message.</param>
            <param name="message">The text.</param>
            <param name="sourceName">Name of the source.</param>
            <param name="extendedData">The extended data. Could be an exception, or a dictionary of properties or anything the user specifies.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Debug(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a debug message to the console
            </summary>
            <param name="extendedData">The exception.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Trace(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Warn(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a warning message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Info(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an info message to the console
            </summary>
            <param name="extendedData">The extended data.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.String,System.String,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="message">The text.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.String,System.Type,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Error(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The exception.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.String,System.String,Unosquare.Swan.LogMessageType,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="messageType">Type of the message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.String,System.Type,Unosquare.Swan.LogMessageType,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="source">The source.</param>
            <param name="messageType">Type of the message.</param>
            <param name="extendedData">The extended data.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.Exception,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The ex.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Log(System.Exception,System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs an error message to the console's standard error
            </summary>
            <param name="ex">The ex.</param>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Dump(System.Object,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message showing all possible non-null properties of the given object
            This method is expensive as it uses Stringify internally
            </summary>
            <param name="obj">The object.</param>
            <param name="source">The source.</param>
            <param name="text">The title.</param>
            <param name="callerMemberName">Name of the caller member. This is automatically populated.</param>
            <param name="callerFilePath">The caller file path. This is automatically populated.</param>
            <param name="callerLineNumber">The caller line number. This is automatically populated.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Dump(System.Object,System.Type,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a trace message showing all possible non-null properties of the given object
            This method is expensive as it uses Stringify internally
            </summary>
            <param name="obj">The object.</param>
            <param name="source">The source.</param>
            <param name="text">The text.</param>
            <param name="callerMemberName">Name of the caller member.</param>
            <param name="callerFilePath">The caller file path.</param>
            <param name="callerLineNumber">The caller line number.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.PrintCurrentCodePage">
            <summary>
            Prints all characters in the current code page.
            This is provided for debugging purposes only.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.Byte,System.Nullable{System.ConsoleColor},System.Int32,System.Boolean,Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a character a number of times, optionally adding a new line at the end
            </summary>
            <param name="charCode">The character code.</param>
            <param name="color">The color.</param>
            <param name="count">The count.</param>
            <param name="newLine">if set to <c>true</c> [new line].</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.Char,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes the specified character in the default color.
            </summary>
            <param name="charCode">The character code.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.Write(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes the specified text in the given color
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.WriteLine(Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a New Line Sequence to the standard output
            </summary>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.WriteLine(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            Writes a line of text in the current console foreground color
            to the standard output
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="M:Unosquare.Swan.Terminal.OverwriteLine(System.String,System.Nullable{System.ConsoleColor},Unosquare.Swan.TerminalWriters)">
            <summary>
            As opposed to WriteLine methods, it prepends a Carriage Return character to the text
            so that the console moves the cursor one position up after the text has been written out.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="writerFlags">The writer flags.</param>
        </member>
        <member name="T:Unosquare.Swan.Terminal.Settings">
            <summary>
            Terminal global settings
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DefaultColor">
            <summary>
            Gets or sets the default output color.
            </summary>
            <value>
            The default color.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.InfoColor">
            <summary>
            Gets or sets the color of the information output logging.
            </summary>
            <value>
            The color of the information.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DebugColor">
            <summary>
            Gets or sets the color of the debug output logging.
            </summary>
            <value>
            The color of the debug.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.TraceColor">
            <summary>
            Gets or sets the color of the trace output logging.
            </summary>
            <value>
            The color of the trace.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.WarnColor">
            <summary>
            Gets or sets the color of the warning logging.
            </summary>
            <value>
            The color of the warn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.ErrorColor">
            <summary>
            Gets or sets the color of the error logging.
            </summary>
            <value>
            The color of the error.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.InfoPrefix">
            <summary>
            Gets or sets the information logging prefix.
            </summary>
            <value>
            The information prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.UserInputPrefix">
            <summary>
            Gets or sets the user input prefix.
            </summary>
            <value>
            The user input prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.UserOptionText">
            <summary>
            Gets or sets the user option text.
            </summary>
            <value>
            The user option text.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DebugPrefix">
            <summary>
            Gets or sets the debug logging prefix.
            </summary>
            <value>
            The debug prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.TracePrefix">
            <summary>
            Gets or sets the trace logging prefix.
            </summary>
            <value>
            The trace prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.WarnPrefix">
            <summary>
            Gets or sets the warning logging prefix.
            </summary>
            <value>
            The warn prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.ErrorPrefix">
            <summary>
            Gets or sets the error logging prefix.
            </summary>
            <value>
            The error prefix.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.LoggingTimeFormat">
            <summary>
            Gets or sets the logging time format.
            set to null or empty to prevent output
            </summary>
            <value>
            The logging time format.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.DisplayLoggingMessageType">
            <summary>
            Gets or sets the logging message types (in a bitwise mask)
            to display in the console.
            </summary>
            <value>
            The console options.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Terminal.Settings.OverrideIsConsolePresent">
            <summary>
            Gets or sets a value indicating whether [override is console present].
            </summary>
            <value>
              <c>true</c> if [override is console present]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Unosquare.Swan.TerminalWriters">
            <summary>
            Defines a set of bitwise standard terminal writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.None">
            <summary>
            Prevents output
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.StandardOutput">
            <summary>
            Writes to the Console.Out
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.StandardError">
            <summary>
            Writes to the Console.Error
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.Diagnostics">
            <summary>
            Writes to the System.Diagnostics.Debug
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.All">
            <summary>
            Writes to all possible terminal writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.ErrorAndDebug">
            <summary>
            The error and debug writers
            </summary>
        </member>
        <member name="F:Unosquare.Swan.TerminalWriters.OutputAndDebug">
            <summary>
            The output and debug writers
            </summary>
        </member>
        <member name="T:Unosquare.Swan.LogMessageType">
            <summary>
            Defines the bitwise flags to determine
            which types of messages get printed on the current console
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.None">
            <summary>
            The none message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Info">
            <summary>
            The information message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Debug">
            <summary>
            The debug message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Trace">
            <summary>
            The trace message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Error">
            <summary>
            The error message type
            </summary>
        </member>
        <member name="F:Unosquare.Swan.LogMessageType.Warning">
            <summary>
            The warning message type
            </summary>
        </member>
    </members>
</doc>
