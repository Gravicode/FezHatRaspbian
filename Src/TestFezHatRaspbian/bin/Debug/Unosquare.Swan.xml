<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unosquare.Swan</name>
    </assembly>
    <members>
        <member name="T:Unosquare.Swan.Abstractions.AppWorkerBase">
            <summary>
            A base implementation of an Application service containing a worker task that performs background processing.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Abstractions.AppWorkerBase"/> class.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Abstractions.AppWorkerBase.StateChanged">
            <summary>
            Occurs when [state changed].
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.State">
            <summary>
            Gets the state of the application service.
            In other words, useful to know whether the service is running.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.CancellationToken">
            <summary>
            Gets the cancellation token.
            </summary>
            <value>
            The cancellation token.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerBase.IsBusy">
            <summary>
            Gets a value indicating whether the thread is busy
            </summary>
            <value>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Initialize">
            <summary>
            Performs internal service initialization tasks required before starting the service.
            </summary>
            <exception cref="T:System.InvalidOperationException">Service cannot be initialized because it seems to be currently running</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Start">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Service cannot be started because it seems to be currently running</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.Stop">
            <inheritdoc/>
            <exception cref="T:System.InvalidOperationException">Service cannot be stopped because it is not running.</exception>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.OnWorkerThreadLoopException(System.Exception)">
            <summary>
            Called when an unhandled exception is thrown.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.OnWorkerThreadExit">
            <summary>
            This method is called when the user loop has exited
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.WorkerThreadLoop">
            <summary>
            Implement this method as a loop that checks whether CancellationPending has been set to true
            If so, immediately exit the loop.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerBase.CreateWorker">
            <summary>
            Creates the worker task.
            </summary>
            <exception cref="T:System.InvalidOperationException">Worker Thread seems to be still running.</exception>
        </member>
        <member name="T:Unosquare.Swan.Abstractions.AppWorkerStateChangedEventArgs">
            <summary>
            Represents event arguments whenever the state of an application service changes
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Abstractions.AppWorkerStateChangedEventArgs.#ctor(Unosquare.Swan.AppWorkerState,Unosquare.Swan.AppWorkerState)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Abstractions.AppWorkerStateChangedEventArgs" /> class.
            </summary>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerStateChangedEventArgs.NewState">
            <summary>
            Gets the state to which the application service changed.
            </summary>
            <value>
            The new state.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Abstractions.AppWorkerStateChangedEventArgs.OldState">
            <summary>
            Gets the old state.
            </summary>
            <value>
            The old state.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Components.CircularBuffer">
            <summary>
            A fixed-size buffer that acts as an infinite length one.
            This buffer is backed by unmanaged, very fast memory so ensure you call
            the dispose method when you are done using it.
            Only for Windows.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.Swan.Components.CircularBuffer._syncLock">
            <summary>
            The locking object to perform synchronization.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.CircularBuffer._buffer">
            <summary>
            The unmanaged buffer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.CircularBuffer"/> class.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.Length">
            <summary>
            Gets the capacity of this buffer.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.ReadIndex">
            <summary>
            Gets the current, 0-based read index
            </summary>
            <value>
            The index of the read.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.WriteIndex">
            <summary>
            Gets the current, 0-based write index.
            </summary>
            <value>
            The index of the write.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.WriteTag">
            <summary>
            Gets an the object associated with the last write
            </summary>
            <value>
            The write tag.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.ReadableCount">
            <summary>
            Gets the available bytes to read.
            </summary>
            <value>
            The readable count.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.WritableCount">
            <summary>
            Gets the number of bytes that can be written.
            </summary>
            <value>
            The writable count.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CircularBuffer.CapacityPercent">
            <summary>
            Gets percentage of used bytes (readbale/available, from 0.0 to 1.0).
            </summary>
            <value>
            The capacity percent.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads the specified number of bytes into the target array.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="target">The target.</param>
            <param name="targetOffset">The target offset.</param>
            <exception cref="T:System.InvalidOperationException">
            Exception that is thrown when a method call is invalid for the object's current state
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.Write(System.IntPtr,System.Int32,System.TimeSpan)">
            <summary>
            Writes data to the backing buffer using the specified pointer and length.
            and associating a write tag for this operation.
            </summary>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
            <param name="writeTag">The write tag.</param>
            <exception cref="T:System.InvalidOperationException">Read</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.Clear">
            <summary>
            Resets all states as if this buffer had just been created.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.CircularBuffer.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Fast pointer memory block copy function
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.CsProjFile`1">
            <summary>
            Represents a CsProjFile parser
            Based on https://github.com/maartenba/dotnetcli-init
            </summary>
            <typeparam name="T">The type of <c>CsProjMetadataBase</c></typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjFile`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.CsProjFile`1"/> class.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjFile`1.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.CsProjFile`1"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="leaveOpen">if set to <c>true</c> [leave open].</param>
            <exception cref="T:System.ArgumentException">Project file is not of the new .csproj type.</exception>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjFile`1.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The nu get metadata.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjFile`1.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjFile`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.CsProjMetadataBase">
            <summary>
            Represents a CsProj metadata abstract class
            to use with <c>CsProjFile</c> parser.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjMetadataBase.PackageId">
            <summary>
            Gets the package identifier.
            </summary>
            <value>
            The package identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjMetadataBase.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>
            The name of the assembly.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjMetadataBase.TargetFrameworks">
            <summary>
            Gets the target frameworks.
            </summary>
            <value>
            The target frameworks.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjMetadataBase.TargetFramework">
            <summary>
            Gets the target framework.
            </summary>
            <value>
            The target framework.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.CsProjMetadataBase.Version">
            <summary>
            Gets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjMetadataBase.ParseCsProjTags(System.String[]@)">
            <summary>
            Parses the cs proj tags.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjMetadataBase.SetData(System.Xml.Linq.XDocument)">
            <summary>
            Sets the data.
            </summary>
            <param name="xmlDocument">The XML document.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.CsProjMetadataBase.FindElement(System.String)">
            <summary>
            Finds the element.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>A XElement.</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer">
            <summary>
            The concrete implementation of a simple IoC container
            based largely on TinyIoC
            </summary>
            <seealso cref="T:System.IDisposable" />
            <summary>
            The concrete implementation of a simple IoC container
            based largely on TinyIoC
            </summary>
            <seealso cref="T:System.IDisposable" />
            <summary>
            The concrete implementation of a simple IoC container
            based largely on TinyIoC
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.GetChildContainer">
            <summary>
            Gets the child container.
            </summary>
            <returns>A new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer"/> class</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.AutoRegister(Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register(System.Type,System.Func{Unosquare.Swan.Components.DependencyContainer,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="TRegister">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="TRegister">Type to register</typeparam>
            <typeparam name="TRegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="TRegister">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="TRegister">Type to register</typeparam>
            <typeparam name="TRegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Register``1(System.Func{Unosquare.Swan.Components.DependencyContainer,System.Collections.Generic.Dictionary{System.String,System.Object},``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="TRegister">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registation</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="TRegister">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Unregister``1(System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <typeparam name="TRegister">Type to unregister</typeparam>
            <param name="name">Name of registration</param>
            <returns><c>true</c> if the registration is successfully found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Unregister(System.Type,System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <param name="name">Name of registration</param>
            <returns><c>true</c> if the registration is successfully found and removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Resolve``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
            All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
            Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User supplied named parameter overloads</param>
            <param name="name">The name.</param>
            <param name="options">Resolution options</param>
            <returns>
            Bool indicating whether the type can be resolved
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.CanResolve``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="TResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(``0@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.Collections.Generic.Dictionary{System.String,System.Object},``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TryResolve``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="TResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns><c>true</c> if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="TResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.BuildUp(System.Object,Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.TypeRegistration">
            <summary>
            Represents a Type Registration within the IoC Container
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer.TypeRegistration"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.TypeRegistration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory successfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.ObjectFactoryBase.GetObject(System.Type,Unosquare.Swan.Components.DependencyContainer,System.Collections.Generic.Dictionary{System.String,System.Object},Unosquare.Swan.Components.DependencyContainerResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options">The options.</param>
            <returns> Instance of type </returns>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.#ctor(Unosquare.Swan.Components.DependencyContainer,Unosquare.Swan.Components.DependencyContainer.TypeRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer.RegisterOptions"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>A registration options  for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic constraint registration exception</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>A registration options  for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic constraint registration exception</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>A registration options  for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic constraint registration exception</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>A registration options  for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic constraint registration exception</exception>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{Unosquare.Swan.Components.DependencyContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions"/> class.
            </summary>
            <param name="registerOptions">The register options.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>A registration multi-instance for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic Constraint Registration Exception</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.DependencyContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>A registration multi-instance for fluent API</returns>
            <exception cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">Generic Constraint Registration Exception</exception>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.UnregisteredResolutionAction">
            <summary>
            Gets or sets the unregistered resolution action.
            </summary>
            <value>
            The unregistered resolution action.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.DependencyContainerResolveOptions.NamedResolutionFailureAction">
            <summary>
            Gets or sets the named resolution failure action.
            </summary>
            <value>
            The named resolution failure action.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions">
            <summary>
            Defines Resolution actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerUnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions">
            <summary>
            Enumerates failure actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.AttemptUnnamedResolution">
            <summary>
            The attempt unnamed resolution
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerNamedResolutionFailureActions.Fail">
            <summary>
            The fail
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions">
            <summary>
            Enumerates duplicate definition actions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.RegisterSingle">
            <summary>
            The register single
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.RegisterMultiple">
            <summary>
            The register multiple
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.DependencyContainerDuplicateImplementationActions.Fail">
            <summary>
            The fail
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubMessage">
            <summary>
            A Message to be published/delivered by Messenger
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IMessageHubMessage.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubSubscription">
            <summary>
            Represents a message subscription
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.IMessageHubSubscription.SubscriptionToken">
            <summary>
            Token returned to the subscribed to reference this subscription
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubSubscription.ShouldAttemptDelivery(Unosquare.Swan.Components.IMessageHubMessage)">
            <summary>
            Whether delivery should be attempted.
            </summary>
            <param name="message">Message that may potentially be delivered.</param>
            <returns><c>true</c> - ok to send, <c>false</c> - should not attempt to send</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubSubscription.Deliver(Unosquare.Swan.Components.IMessageHubMessage)">
            <summary>
            Deliver the message
            </summary>
            <param name="message">Message to deliver</param>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHubProxy">
            <summary>
            Message proxy definition.
            
            A message proxy can be used to intercept/alter messages and/or
            marshal delivery actions onto a particular thread.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHubProxy.Deliver(Unosquare.Swan.Components.IMessageHubMessage,Unosquare.Swan.Components.IMessageHubSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubDefaultProxy">
            <summary>
            Default "pass through" proxy.
            
            Does nothing other than deliver the message.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubDefaultProxy.Instance">
            <summary>
            Singleton instance of the proxy.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubDefaultProxy.Deliver(Unosquare.Swan.Components.IMessageHubMessage,Unosquare.Swan.Components.IMessageHubSubscription)">
            <summary>
            Delivers the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="subscription">The subscription.</param>
        </member>
        <member name="T:Unosquare.Swan.Components.IMessageHub">
            <summary>
            Messenger hub responsible for taking subscriptions/publications and delivering of messages.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>MessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            MessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Unsubscribe``1(Unosquare.Swan.Components.MessageHubSubscriptionToken)">
            <summary>
            Unsubscribe from a particular message type.
            
            Does not throw an exception if the subscription is not found.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="subscriptionToken">Subscription token received from Subscribe</param>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:Unosquare.Swan.Components.IMessageHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <returns>A task from Publish action</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHub">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.WeakMessageSubscription`1.#ctor(Unosquare.Swan.Components.MessageHubSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.MessageHub.WeakMessageSubscription`1" /> class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <exception cref="T:System.ArgumentNullException">subscriptionToken
            or
            deliveryAction
            or
            messageFilter</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.StrongMessageSubscription`1.#ctor(Unosquare.Swan.Components.MessageHubSubscriptionToken,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.MessageHub.StrongMessageSubscription`1" /> class.
            </summary>
            <param name="subscriptionToken">The subscription token.</param>
            <param name="deliveryAction">The delivery action.</param>
            <param name="messageFilter">The message filter.</param>
            <exception cref="T:System.ArgumentNullException">subscriptionToken
            or
            deliveryAction
            or
            messageFilter</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action.
            Messages will be delivered via the specified proxy.
            
            All messages of this type will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction </param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>MessageSubscription used to unsubscribing</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Subscribe``1(System.Action{``0},System.Func{``0,System.Boolean},System.Boolean,Unosquare.Swan.Components.IMessageHubProxy)">
            <summary>
            Subscribe to a message type with the given destination and delivery action with the given filter.
            Messages will be delivered via the specified proxy.
            All references are held with WeakReferences
            Only messages that "pass" the filter will be delivered.
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="deliveryAction">Action to invoke when message is delivered</param>
            <param name="messageFilter">The message filter.</param>
            <param name="useStrongReferences">Use strong references to destination and deliveryAction</param>
            <param name="proxy">Proxy to use when delivering the messages</param>
            <returns>
            MessageSubscription used to unsubscribing
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Unsubscribe``1(Unosquare.Swan.Components.MessageHubSubscriptionToken)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.Publish``1(``0)">
            <summary>
            Publish a message to any subscribers
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHub.PublishAsync``1(``0)">
            <summary>
            Publish a message to any subscribers asynchronously
            </summary>
            <typeparam name="TMessage">Type of message</typeparam>
            <param name="message">Message to deliver</param>
            <returns>A task with the publish</returns>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubMessageBase">
            <summary>
            Base class for messages that provides weak reference storage of the sender
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Components.MessageHubMessageBase._sender">
            <summary>
            Store a WeakReference to the sender just in case anyone is daft enough to
            keep the message around and prevent the sender from being collected.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubMessageBase.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.MessageHubMessageBase"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <exception cref="T:System.ArgumentNullException">sender</exception>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubMessageBase.Sender">
            <summary>
            The sender of the message, or null if not supported by the message implementation.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubGenericMessage`1">
            <summary>
            Generic message with user specified content
            </summary>
            <typeparam name="TContent">Content type to store</typeparam>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubGenericMessage`1.#ctor(System.Object,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.MessageHubGenericMessage`1"/> class.
            </summary>
            <param name="sender">The sender.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.MessageHubGenericMessage`1.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.MessageHubSubscriptionToken">
            <summary>
            Represents an active subscription to a message
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubSubscriptionToken.#ctor(Unosquare.Swan.Components.IMessageHub,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.MessageHubSubscriptionToken"/> class.
            </summary>
            <param name="hub">The hub.</param>
            <param name="messageType">Type of the message.</param>
            <exception cref="T:System.ArgumentNullException">hub</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">messageType</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.MessageHubSubscriptionToken.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessResult">
            <summary>
            Represents the text of the standard output and standard error
            of a process, including its exit code.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessResult.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Components.ProcessResult" /> class.
            </summary>
            <param name="exitCode">The exit code.</param>
            <param name="standardOutput">The standard output.</param>
            <param name="standardError">The standard error.</param>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
            <value>
            The exit code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.StandardOutput">
            <summary>
            Gets the text of the standard output.
            </summary>
            <value>
            The standard output.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Components.ProcessResult.StandardError">
            <summary>
            Gets the text of the standard error.
            </summary>
            <value>
            The standard error.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessRunner">
            <summary>
            Provides methods to help create external processes, and efficiently capture the
            standard error and standard output streams.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback">
            <summary>
            Defines a delegate to handle binary data reception from the standard 
            output or standard error streams from a process
            </summary>
            <param name="processData">The process data.</param>
            <param name="process">The process.</param>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.GetProcessOutputAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Runs the process asynchronously and if the exit code is 0,
            returns all of the standard output text. If the exit code is something other than 0
            it returns the contents of standard error.
            This method is meant to be used for programs that output a relatively small amount of text.
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="ct">The cancellation token.</param>
            <returns>The type of the result produced by this Task</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.GetProcessResultAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a process asynchronously and returns the text of the standard output and standard error streams
            along with the exit code. This method is meant to be used for programs that output a relatively small
            amount of text.
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="ct">The ct.</param>
            <returns>
            Text of the standard output and standard error streams along with the exit code
            </returns>
            <exception cref="T:System.ArgumentNullException">filename</exception>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.RunProcessAsync(System.String,System.String,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Runs an external process asynchronously, providing callbacks to
            capture binary data from the standard error and standard output streams.
            The callbacks contain a reference to the process so you can respond to output or
            error streams by writing to the process' input stream.
            The exit code (return value) will be -1 for forceful termination of the process
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="onOutputData">The on output data.</param>
            <param name="onErrorData">The on error data.</param>
            <param name="syncEvents">if set to <c>true</c> the next data callback will wait until the current one completes.</param>
            <param name="ct">The ct.</param>
            <returns>Value type will be -1 for forceful termination of the process</returns>
        </member>
        <member name="M:Unosquare.Swan.Components.ProcessRunner.CopyStreamAsync(System.Diagnostics.Process,System.IO.Stream,Unosquare.Swan.Components.ProcessRunner.ProcessDataReceivedCallback,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Copies the stream asynchronously.
            </summary>
            <param name="process">The process.</param>
            <param name="baseStream">The source stream.</param>
            <param name="onDataCallback">The on data callback.</param>
            <param name="syncEvents">if set to <c>true</c> [synchronize events].</param>
            <param name="ct">The ct.</param>
            <returns>Total copies stream</returns>
        </member>
        <member name="T:Unosquare.Swan.ConnectionDataReceivedTrigger">
            <summary>
            Enumerates the possible causes of the DataReceived event occurring.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.Flush">
            <summary>
            The trigger was a forceful flush of the buffer
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.NewLineSequenceEncountered">
            <summary>
            The new line sequence bytes were received
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.BufferFull">
            <summary>
            The buffer was full
            </summary>
        </member>
        <member name="F:Unosquare.Swan.ConnectionDataReceivedTrigger.BlockSizeReached">
            <summary>
            The block size reached
            </summary>
        </member>
        <member name="T:Unosquare.Swan.ConnectionAcceptedEventArgs">
            <summary>
            The event arguments for when connections are accepted
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionAcceptedEventArgs.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionAcceptedEventArgs" /> class.
            </summary>
            <param name="client">The client.</param>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="P:Unosquare.Swan.ConnectionAcceptedEventArgs.Client">
            <summary>
            Gets the client.
            </summary>
            <value>
            The client.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionAcceptingEventArgs">
            <summary>
            Occurs before a connection is accepted. Set the Cancel property to true to prevent the connection from being accepted.
            </summary>
            <seealso cref="T:Unosquare.Swan.ConnectionAcceptedEventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionAcceptingEventArgs.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionAcceptingEventArgs"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="P:Unosquare.Swan.ConnectionAcceptingEventArgs.Cancel">
            <summary>
            Setting Cancel to true rejects the new TcpClient
            </summary>
            <value>
              <c>true</c> if cancel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerStartedEventArgs">
            <summary>
            Event arguments for when a server listener is started
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerStartedEventArgs.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerStartedEventArgs" /> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
            <exception cref="T:System.ArgumentNullException">listenerEndPoint</exception>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStartedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerFailedEventArgs">
            <summary>
            Event arguments for when a server listener fails to start
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerFailedEventArgs.#ctor(System.Net.IPEndPoint,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerFailedEventArgs" /> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
            <param name="ex">The ex.</param>
            <exception cref="T:System.ArgumentNullException">
            listenerEndPoint
            or
            ex
            </exception>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerFailedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerFailedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionListenerStoppedEventArgs">
            <summary>
            Event arguments for when a server listener stopped
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionListenerStoppedEventArgs.#ctor(System.Net.IPEndPoint,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionListenerStoppedEventArgs" /> class.
            </summary>
            <param name="listenerEndPoint">The listener end point.</param>
            <param name="ex">The ex.</param>
            <exception cref="T:System.ArgumentNullException">
            listenerEndPoint
            or
            ex
            </exception>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStoppedEventArgs.EndPoint">
            <summary>
            Gets the end point.
            </summary>
            <value>
            The end point.
            </value>
        </member>
        <member name="P:Unosquare.Swan.ConnectionListenerStoppedEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionFailureEventArgs">
            <summary>
            The event arguments for connection failure events
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionFailureEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionFailureEventArgs"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Unosquare.Swan.ConnectionFailureEventArgs.Error">
            <summary>
            Gets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Unosquare.Swan.ConnectionDataReceivedEventArgs">
            <summary>
            Event arguments for when data is received.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.#ctor(System.Byte[],Unosquare.Swan.ConnectionDataReceivedTrigger,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.ConnectionDataReceivedEventArgs"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="trigger">The trigger.</param>
            <param name="moreAvailable">if set to <c>true</c> [more available].</param>
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.Trigger">
            <summary>
            Gets the cause as to why this event was thrown
            </summary>
            <value>
            The trigger.
            </value>
        </member>
        <member name="P:Unosquare.Swan.ConnectionDataReceivedEventArgs.HasMoreAvailable">
            <summary>
            Gets a value indicating whether the receive buffer has more bytes available
            </summary>
            <value>
              <c>true</c> if this instance has more available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.GetStringFromBuffer(System.Byte[],System.Text.Encoding)">
            <summary>
            Gets the string from the given buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="encoding">The encoding.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.ConnectionDataReceivedEventArgs.GetStringFromBuffer(System.Text.Encoding)">
            <summary>
            Gets the string from buffer.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException">
            <summary>
            Generic Constraint Registration Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException"/> class.
            </summary>
            <param name="registerType">Type of the register.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.DependencyContainerRegistrationException" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="method">The method.</param>
            <param name="isTypeFactory">if set to <c>true</c> [is type factory].</param>
        </member>
        <member name="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException">
            <summary>
            An exception for dependency resolutions
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.Exceptions.DependencyContainerResolutionException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Unosquare.Swan.Exceptions.DependencyContainerResolutionException.#ctor(System.Type,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.DependencyContainerResolutionException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Unosquare.Swan.Exceptions.DependencyContainerWeakReferenceException">
            <summary>
            Weak Reference Exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.Exceptions.DependencyContainerWeakReferenceException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.DependencyContainerWeakReferenceException"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:Unosquare.Swan.Exceptions.DnsQueryException">
            <summary>
            An exception thrown when the DNS query fails.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="T:Unosquare.Swan.Exceptions.JsonRequestException">
            <summary>
            Represents errors that occurs requesting a JSON file through HTTP
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.Exceptions.JsonRequestException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.JsonRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="httpErrorCode">The HTTP error code.</param>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.JsonRequestException.HttpErrorCode">
            <summary>
            Gets the HTTP error code.
            </summary>
            <value>
            The HTTP error code.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Exceptions.LdapException">
            <summary>
            Thrown to indicate that an Ldap exception has occurred. This is a general
            exception which includes a message and an Ldap result code.
            An LdapException can result from physical problems (such as
            network errors) as well as problems with Ldap operations detected
            by the server. For example, if an Ldap add operation fails because of a
            duplicate entry, the server returns a result code.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.Swan.Exceptions.LdapException.#ctor(System.String,Unosquare.Swan.Networking.Ldap.LdapStatusCode,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Exceptions.LdapException" /> class.
            Constructs an exception with a detailed message obtained from the
            specified <c>MessageOrKey</c> String.
            Additional parameters specify the result code, the message returned
            from the server, and a matchedDN returned from the server.
            The String is used either as a message key to obtain a localized
            messsage from ExceptionMessages, or if there is no key in the
            resource matching the text, it is used as the detailed message itself.
            </summary>
            <param name="message">The message.</param>
            <param name="resultCode">The result code returned.</param>
            <param name="serverMsg">Error message specifying additional information
            from the server</param>
            <param name="matchedDN">The maximal subset of a specified DN which could
            be matched by the server on a search operation.</param>
            <param name="rootException">The root exception.</param>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.LdapException.LdapErrorMessage">
            <summary>
                Returns the error message from the Ldap server, if this message is
                available (that is, if this message was set). If the message was not set,
                this method returns null.
            </summary>
            <returns>
                The error message or null if the message was not set.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.LdapException.Cause">
            <summary>
            Returns the lower level Exception which caused the failure, if any.
            For example, an IOException with additional information may be returned
            on a CONNECT_ERROR failure.
            </summary>
            <value>
            The cause.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.LdapException.ResultCode">
            <summary>
            Returns the result code from the exception.
            The codes are defined as <c>public final static int</c> members
            of the Ldap Exception class. If the exception is a
            result of error information returned from a directory operation, the
            code will be one of those defined for the class. Otherwise, a local error
            code is returned.
            </summary>
            <value>
            The result code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.LdapException.MatchedDN">
            <summary>
            Returns the part of a submitted distinguished name which could be
            matched by the server.
            If the exception was caused by a local error, such as no server
            available, the return value is null. If the exception resulted from
            an operation being executed on a server, the value is an empty string
            except when the result of the operation was one of the following:
            <ul><li>NO_SUCH_OBJECT</li><li>ALIAS_PROBLEM</li><li>INVALID_DN_SYNTAX</li><li>ALIAS_DEREFERENCING_PROBLEM</li></ul>
            </summary>
            <value>
            The matched dn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Exceptions.LdapException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Exceptions.LdapException.ToString">
            <summary>
            Returns a string of information about the exception and the
            the nested exceptions, if any.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.SmtpExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.SmtpExtensions.ToMimeMessage(System.Net.Mail.MailMessage)">
            <summary>
            The raw contents of this MailMessage as a MemoryStream.
            </summary>
            <param name="self">The caller.</param>
            <returns>A MemoryStream with the raw contents of this MailMessage.</returns>
        </member>
        <member name="T:Unosquare.Swan.NetworkExtensions">
            <summary>
            Provides various extension methods for networking-related tasks
            </summary>
        </member>
        <member name="M:Unosquare.Swan.NetworkExtensions.IsPrivateAddress(System.Net.IPAddress)">
            <summary>
            Determines whether the IP address is private
            </summary>
            <param name="address">The IP address.</param>
            <returns>
            True if the IP Address is private; otherwise, false
            </returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
        </member>
        <member name="M:Unosquare.Swan.NetworkExtensions.ToUInt32(System.Net.IPAddress)">
            <summary>
            Converts an IPv4 Address to its Unsigned, 32-bit integer representation.
            </summary>
            <param name="address">The address.</param>
            <returns>
            A 32-bit unsigned integer converted from four bytes at a specified position in a byte array
            </returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
            <exception cref="T:System.ArgumentException">InterNetwork - address</exception>
        </member>
        <member name="T:Unosquare.Swan.WindowsServicesExtensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:Unosquare.Swan.WindowsServicesExtensions.RunInConsoleMode(System.ServiceProcess.ServiceBase)">
            <summary>
            Runs a service in console mode.
            </summary>
            <param name="serviceToRun">The service to run.</param>
        </member>
        <member name="M:Unosquare.Swan.WindowsServicesExtensions.RunInConsoleMode(System.ServiceProcess.ServiceBase[])">
            <summary>
            Runs a set of services in console mode.
            </summary>
            <param name="servicesToRun">The services to run.</param>
        </member>
        <member name="T:Unosquare.Swan.Formatters.BitmapBuffer">
            <summary>
            Represents a buffer of bytes containing pixels in BGRA byte order
            loaded from an image that is passed on to the constructor.
            Data contains all the raw bytes (without scanline left-over bytes)
            where they can be quickly changed and then a new bitmap
            can be created from the byte data
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Formatters.BitmapBuffer.BytesPerPixel">
            <summary>
            A constant representing the number of
            bytes per pixel in the pixel data. This is
            always 4 but it is kept here for readability
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Formatters.BitmapBuffer.BOffset">
            <summary>
            The blue byte offset within a pixel offset. This is 0.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Formatters.BitmapBuffer.GOffset">
            <summary>
            The green byte offset within a pixel offset.  This is 1
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Formatters.BitmapBuffer.ROffset">
            <summary>
            The red byte offset within a pixel offset.  This is 2
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Formatters.BitmapBuffer.AOffset">
            <summary>
            The alpha byte offset within a pixel offset.  This is 3
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.BitmapBuffer.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Formatters.BitmapBuffer"/> class.
            Data will not contain left-over stride bytes
            </summary>
            <param name="sourceImage">The source image.</param>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.Data">
            <summary>
            Contains all the bytes of the pixel data
            Each horizontal scanline is represented by LineLength
            rather than by LinceStride. The left-over stride bytes
            are removed
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.ImageWidth">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.ImageHeight">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.PixelFormat">
            <summary>
            Gets the pixel format. This will always be Format32bppArgb
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.LineStride">
            <summary>
            Gets the length in bytes of a line of pixel data.
            Basically the same as Line Length except Stride might be a little larger as
            some bitmaps might be DWORD-algned
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Formatters.BitmapBuffer.LineLength">
            <summary>
            Gets the length in bytes of a line of pixel data.
            Basically the same as Stride except Stride might be a little larger as
            some bitmaps might be DWORD-algned
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Formatters.BitmapBuffer.GetPixelOffset(System.Int32,System.Int32)">
            <summary>
            Gets the index of the first byte in the BGRA pixel data for the given image coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>Index of the first byte in the BGRA pixel</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            x
            or
            y
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Formatters.BitmapBuffer.ToBitmap">
            <summary>
            Converts the pixel data bytes held in the buffer
            to a 32-bit RGBA bitmap.
            </summary>
            <returns>Pixel data for a graphics image and its attribute</returns>
        </member>
        <member name="T:Unosquare.Swan.Models.OkOrError`2">
            <summary>
            Represents a Ok value or Error value
            </summary>
            <typeparam name="T">The type of OK value</typeparam>
            <typeparam name="TError">The type of the error.</typeparam>
        </member>
        <member name="P:Unosquare.Swan.Models.OkOrError`2.IsOk">
            <summary>
            Gets or sets a value indicating whether this instance is ok.
            </summary>
            <value>
              <c>true</c> if this instance is ok; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Models.OkOrError`2.Ok">
            <summary>
            Gets or sets the ok.
            </summary>
            <value>
            The ok.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Models.OkOrError`2.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            The error.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Network">
            <summary>
            Provides miscellaneous network utilities such as a Public IP finder,
            a DNS client to query DNS records of any kind, and an NTP client.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Network.DnsDefaultPort">
            <summary>
            The DNS default port
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Network.NtpDefaultPort">
            <summary>
            The NTP default port
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Network.HostName">
            <summary>
            Gets the name of the host.
            </summary>
            <value>
            The name of the host.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Network.DomainName">
            <summary>
            Gets the name of the network domain.
            </summary>
            <value>
            The name of the network domain.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Interfaces">
            <summary>
            Gets the active IPv4 interfaces.
            Only those interfaces with a valid unicast address and a valid gateway will be returned in the collection
            </summary>
            <returns>
            A collection of NetworkInterface/IPInterfaceProperties pairs
            that represents the active IPv4 interfaces
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Addresses(System.Boolean)">
            <summary>
            Retrieves the local ip addresses.
            </summary>
            <param name="includeLoopback">if set to <c>true</c> [include loopback].</param>
            <returns>An array of local ip addresses</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4Addresses(System.Net.NetworkInformation.NetworkInterfaceType,System.Boolean,System.Boolean)">
            <summary>
            Retrieves the local ip addresses.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="skipTypeFilter">if set to <c>true</c> [skip type filter].</param>
            <param name="includeLoopback">if set to <c>true</c> [include loopback].</param>
            <returns>An array of local ip addresses</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetPublicIPAddressAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the public IP address using ipify.org.
            </summary>
            <param name="ct">The cancellation token.</param>
            <returns>A public ip address of the result produced by this Task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetPublicIPAddress">
            <summary>
            Gets the public IP address using ipify.org.
            </summary>
            <returns>A public ip address</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetIPv4DnsServers">
            <summary>
            Gets the configured IPv4 DNS servers for the active network interfaces.
            </summary>
            <returns>
            A collection of NetworkInterface/IPInterfaceProperties pairs
            that represents the active IPv4 interfaces
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntry(System.String)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <returns>An array of local ip addresses</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="ct">The ct.</param>
            <returns>An array of local ip addresses of the result produced by this task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntry(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns>
            An array of local ip addresses
            </returns>
            <exception cref="T:System.ArgumentNullException">fqdn</exception>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsHostEntryAsync(System.String,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the DNS host entry (a list of IP addresses) for the domain name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns>An array of local ip addresses of the result produced by this task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntry(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntryAsync(System.Net.IPAddress,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The ct.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntry(System.Net.IPAddress)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetDnsPointerEntryAsync(System.Net.IPAddress,System.Threading.CancellationToken)">
            <summary>
            Gets the reverse lookup FQDN of the given IP Address.
            </summary>
            <param name="query">The query.</param>
            <param name="ct">The ct.</param>
            <returns>A <see cref="T:System.String" /> that represents the current object</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDns(System.String,Unosquare.Swan.Networking.DnsRecordType,System.Net.IPAddress,System.Int32)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <returns>
            Appropriate DNS server for the specified record type
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDnsAsync(System.String,Unosquare.Swan.Networking.DnsRecordType,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="dnsServer">The DNS server.</param>
            <param name="port">The port.</param>
            <param name="ct">The ct.</param>
            <returns>Queries the DNS server for the specified record type of the result produced by this Task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDns(System.String,Unosquare.Swan.Networking.DnsRecordType)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <returns>Appropriate DNS server for the specified record type</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.QueryDnsAsync(System.String,Unosquare.Swan.Networking.DnsRecordType,System.Threading.CancellationToken)">
            <summary>
            Queries the DNS server for the specified record type.
            </summary>
            <param name="query">The query.</param>
            <param name="recordType">Type of the record.</param>
            <param name="ct">The cancellation token.</param>
            <returns>Queries the DNS server for the specified record type of the result produced by this Task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtc(System.Net.IPAddress,System.Int32)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerAddress">The NTP server address.</param>
            <param name="port">The port.</param>
            <returns>
            A new instance of the DateTime structure to 
            the specified year, month, day, hour, minute and second
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtc(System.String,System.Int32)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerName">The NTP server, by default pool.ntp.org.</param>
            <param name="port">The port, by default NTP 123.</param>
            <returns>The UTC time by querying from an NTP server</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtcAsync(System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerAddress">The NTP server address.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns>The UTC time by querying from an NTP server of the result produced by this Task</returns>
        </member>
        <member name="M:Unosquare.Swan.Network.GetNetworkTimeUtcAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the UTC time by querying from an NTP server
            </summary>
            <param name="ntpServerName">Name of the NTP server.</param>
            <param name="port">The port.</param>
            <param name="ct">The cancellation token.</param>
            <returns>The UTC time by querying from an NTP server of the result produced by this Task</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Connection">
            <summary>
            Represents a network connection either on the server or on the client. It wraps a TcpClient
            and its corresponding network streams. It is capable of working in 2 modes. Typically on the server side
            you will need to enable continuous reading and events. On the client side you may want to disable continuous reading
            and use the Read methods available. In continuous reading mode Read methods are not available and will throw
            an invalid operation exceptions if they are used.
            Continuous Reading Mode: Subscribe to data reception events, it runs a background thread, don't use Read methods
            Manual Reading Mode: Data reception events are NEVER fired. No background threads are used. Use Read methods to receive data
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient,System.Text.Encoding,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="textEncoding">The text encoding.</param>
            <param name="newLineSequence">The new line sequence used for read and write operations.</param>
            <param name="disableContinuousReading">if set to <c>true</c> [disable continuous reading].</param>
            <param name="blockSize">Size of the block. -- set to 0 or less to disable</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class in continuous reading mode.
            It uses UTF8 encoding, CRLF as a new line sequence and disables a protocol block size
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.#ctor(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Connection"/> class in continuous reading mode.
            It uses UTF8 encoding, disables line sequences, and uses a protocol block size instead
            </summary>
            <param name="client">The client.</param>
            <param name="blockSize">Size of the block.</param>
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.DataReceived">
            <summary>
            Occurs when the receive buffer has encounters a new line sequence, the buffer is flushed or the buffer is full.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.ConnectionFailure">
            <summary>
            Occurs when an error occurs while upgrading, sending, or receiving data in this client
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.Connection.ClientDisconnected">
            <summary>
            Occurs when a client is disconnected
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.Id">
            <summary>
            Gets the unique identifier of this connection.
            This field is filled out upon instantiation of this class
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ActiveStream">
            <summary>
            Gets the active stream. Returns an SSL stream if the connection is secure, otherwise returns
            the underlying NetworkStream
            </summary>
            <value>
            The active stream.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsActiveStreamSecure">
            <summary>
            Gets a value indicating whether the current connection stream is an SSL stream.
            </summary>
            <value>
              <c>true</c> if this instance is active stream secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.TextEncoding">
            <summary>
            Gets the text encoding for send and receive operations.
            </summary>
            <value>
            The text encoding.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.RemoteEndPoint">
            <summary>
            Gets the remote end point of this TCP connection.
            </summary>
            <value>
            The remote end point.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.LocalEndPoint">
            <summary>
            Gets the local end point of this TCP connection.
            </summary>
            <value>
            The local end point.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.RemoteClient">
            <summary>
            Gets the remote client of this TCP connection.
            </summary>
            <value>
            The remote client.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ProtocolBlockSize">
            <summary>
            When in continuous reading mode, and if set to greater than 0,
            a Data reception event will be fired whenever the amount of bytes
            determined by this property has been received. Useful for fixed-length message protocols.
            </summary>
            <value>
            The size of the protocol block.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsContinuousReadingEnabled">
            <summary>
            Gets a value indicating whether this connection is in continuous reading mode.
            Remark: Whenever a disconnect event occurs, the background thread is terminated
            and this property will return false whenever the reading thread is not active.
            Therefore, even if continuous reading was not disabled in the constructor, this property
            might return false.
            </summary>
            <value>
              <c>true</c> if this instance is continuous reading enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionStartTimeUtc">
            <summary>
            Gets the start time at which the connection was started in UTC.
            </summary>
            <value>
            The connection start time UTC.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionStartTime">
            <summary>
            Gets the start time at which the connection was started in local time.
            </summary>
            <value>
            The connection start time.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.ConnectionDuration">
            <summary>
            Gets the duration of the connection.
            </summary>
            <value>
            The duration of the connection.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataReceivedLastTimeUtc">
            <summary>
            Gets the last time data was received at in UTC.
            </summary>
            <value>
            The data received last time UTC.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataReceivedIdleDuration">
            <summary>
            Gets how long has elapsed since data was last received.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataSentLastTimeUtc">
            <summary>
            Gets the last time at which data was sent in UTC.
            </summary>
            <value>
            The data sent last time UTC.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.DataSentIdleDuration">
            <summary>
            Gets how long has elapsed since data was last sent
            </summary>
            <value>
            The duration of the data sent idle.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Connection.IsConnected">
            <summary>
            Gets a value indicating whether this connection is connected.
            Remarks: This property polls the socket internally and checks if it is available to read data from it.
            If disconnect has been called, then this property will return false.
            </summary>
            <value>
              <c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadDataAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Reads data from the remote client asynchronously and with the given timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
            <exception cref="T:System.InvalidOperationException">Read methods have been disabled because continuous reading is enabled.</exception>
            <exception cref="T:System.TimeoutException">Reading data from {ActiveStream} timed out in {timeout.TotalMilliseconds} m</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadDataAsync(System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from the remote stream with a 5000 millisecond timeout.
            </summary>
            <param name="ct">The cancellation token.</param>
            <returns>A byte array containing the results the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadTextAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads data as text with the given timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadTextAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads data as text with a 5000 millisecond timeout.
            </summary>
            <param name="ct">The cancellation token.</param>
            <returns>When this method completes successfully, it returns the contents of the file as a text string</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadLineAsync(System.Threading.CancellationToken)">
            <summary>
            Performs the same task as this method's overload but it defaults to a read timeout of 30 seconds.
            </summary>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult parameter 
            contains the next line from the stream, or is null if all the characters have been read
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.ReadLineAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Reads the next available line of text in queue. Return null when no text is read.
            This method differs from the rest of the read methods because it keeps an internal
            queue of lines that are read from the stream and only returns the one line next in the queue.
            It is only recommended to use this method when you are working with text-based protocols
            and the rest of the read methods are not called.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a string line from the queue</returns>
            <exception cref="T:System.InvalidOperationException">Read methods have been disabled because continuous reading is enabled.</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteDataAsync(System.Byte[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes data asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="forceFlush">if set to <c>true</c> [force flush].</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Writes text asynchronously.
            </summary>
            <param name="text">The text.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes text asynchronously.
            </summary>
            <param name="text">The text.</param>
            <param name="encoding">The encoding.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteLineAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes a line of text asynchronously.
            The new line sequence is added automatically at the end of the line.
            </summary>
            <param name="line">The line.</param>
            <param name="encoding">The encoding.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.WriteLineAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Writes a line of text asynchronously.
            The new line sequence is added automatically at the end of the line.
            </summary>
            <param name="line">The line.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the server.
            </summary>
            <param name="serverCertificate">The server certificate.</param>
            <returns><c>true</c> if the object is hosted in the server; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsClientAsync(System.String,System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the client.
            </summary>
            <param name="hostname">The hostname.</param>
            <param name="callback">The callback.</param>
            <returns>A tasks with <c>true</c> if the upgrade to SSL was successful; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.UpgradeToSecureAsClientAsync">
            <summary>
            Upgrades the active stream to an SSL stream if this connection object is hosted in the client.
            Remarks: DO NOT use this method in production. It accepts ALL server certificates without even checking them!
            </summary>
            <returns>A tasks with <c>true</c> if the upgrade to SSL was successful; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.Disconnect">
            <summary>
            Disconnects this connection.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.RaiseReceiveBufferEvents(System.Byte[])">
            <summary>
            Raises the receive buffer events.
            </summary>
            <param name="receivedData">The received data.</param>
            <exception cref="T:System.Exception">Split function failed! This is terribly wrong!</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Connection.PerformContinuousReading(System.Object)">
            <summary>
            This is the body of the thread when performing continuous reading
            </summary>
            <param name="threadContext">The thread context.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.ConnectionListener">
            <summary>
            TCP Listener manager with built-in events and asynchronous functionality.
            This networking component is typically used when writing server software
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionAccepting">
            <summary>
            Occurs when a new connection requests a socket from the listener.
            Set Cancel = true to prevent the TCP client from being accepted.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionAccepted">
            <summary>
            Occurs when a new connection is accepted.
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnConnectionFailure">
            <summary>
            Occurs when a connection fails to get accepted
            </summary>
        </member>
        <member name="E:Unosquare.Swan.Networking.ConnectionListener.OnListenerStopped">
            <summary>
            Occurs when the listener stops.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
            <param name="listenEndPoint">The listen end point.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            It uses the loopback address for listening
            </summary>
            <param name="listenPort">The listen port.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
            <param name="listenAddress">The listen address.</param>
            <param name="listenPort">The listen port.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.Swan.Networking.ConnectionListener"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.LocalEndPoint">
            <summary>
            Gets the local end point on which we are listening.
            </summary>
            <value>
            The local end point.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.IsListening">
            <summary>
            Gets a value indicating whether this listener is active
            </summary>
            <value>
              <c>true</c> if this instance is listening; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.ConnectionListener.Id">
            <summary>
            Gets a unique identifier that gets automatically assigned upon instantiation of this class.
            </summary>
            <value>
            The unique identifier.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Start">
            <summary>
            Starts the listener in an asynchronous, non-blocking fashion.
            Subscribe to the events of this class to gain access to connected client sockets.
            </summary>
            <exception cref="T:System.InvalidOperationException">Cancellation has already been requested. This listener is not reusable.</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.DoWorkAsync">
            <summary>
            Continuously checks for client connections until the Close method has been called.
            </summary>
            <returns>A task that represents the asynchronous connection operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Stop">
            <summary>
            Stops the listener from receiving new connections.
            This does not prevent the listener from 
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.ConnectionListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsClient">
            <summary>
            DnsClient public methods
            </summary>
            <summary>
            DnsClient public interfaces
            </summary>
            <summary>
            DnsClient Request inner class
            </summary>
            <summary>
            DnsClient Response inner class
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsClient.DnsClientRequest.Resolve">
            <summary>
            Resolves this request into a response using the provided DNS information. The given
            request strategy is used to retrieve the response.
            </summary>
            <exception cref="T:Unosquare.Swan.Exceptions.DnsQueryException">Throw if a malformed response is received from the server</exception>
            <exception cref="T:System.IO.IOException">Thrown if a IO error occurs</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if a the reading or writing to the socket fails</exception>
            <returns>The response received from server</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsQueryResult">
            <summary>
            Represents a response from a DNS server
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsQueryResult.#ctor(Unosquare.Swan.Networking.DnsClient.DnsClientResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.DnsQueryResult"/> class.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsAuthoritativeServer">
            <summary>
            Gets a value indicating whether this instance is authoritative server.
            </summary>
            <value>
            <c>true</c> if this instance is authoritative server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsTruncated">
            <summary>
            Gets a value indicating whether this instance is truncated.
            </summary>
            <value>
            <c>true</c> if this instance is truncated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.IsRecursionAvailable">
            <summary>
            Gets a value indicating whether this instance is recursion available.
            </summary>
            <value>
            <c>true</c> if this instance is recursion available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.OperationCode">
            <summary>
            Gets the operation code.
            </summary>
            <value>
            The operation code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.ResponseCode">
            <summary>
            Gets the response code.
            </summary>
            <value>
            The response code.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AnswerRecords">
            <summary>
            Gets the answer records.
            </summary>
            <value>
            The answer records.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AdditionalRecords">
            <summary>
            Gets the additional records.
            </summary>
            <value>
            The additional records.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsQueryResult.AuthorityRecords">
            <summary>
            Gets the authority records.
            </summary>
            <value>
            The authority records.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsRecord">
            <summary>
            Represents a DNS record entry
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.DnsRecord.#ctor(Unosquare.Swan.Networking.DnsClient.IDnsResourceRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.DnsRecord"/> class.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Type">
            <summary>
            Gets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Class">
            <summary>
            Gets the class.
            </summary>
            <value>
            The class.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.TimeToLive">
            <summary>
            Gets the time to live.
            </summary>
            <value>
            The time to live.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.Data">
            <summary>
            Gets the raw data of the record.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.DataText">
            <summary>
            Gets the data text bytes in ASCII encoding.
            </summary>
            <value>
            The data text.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.PointerDomainName">
            <summary>
            Gets the name of the pointer domain.
            </summary>
            <value>
            The name of the pointer domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.IPAddress">
            <summary>
            Gets the ip address.
            </summary>
            <value>
            The ip address.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.NameServerDomainName">
            <summary>
            Gets the name of the name server domain.
            </summary>
            <value>
            The name of the name server domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.CanonicalDomainName">
            <summary>
            Gets the name of the canonical domain.
            </summary>
            <value>
            The name of the canonical domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.MailExchangerPreference">
            <summary>
            Gets the mail exchanger preference.
            </summary>
            <value>
            The mail exchanger preference.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.MailExchangerDomainName">
            <summary>
            Gets the name of the mail exchanger domain.
            </summary>
            <value>
            The name of the mail exchanger domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaMasterDomainName">
            <summary>
            Gets the name of the soa master domain.
            </summary>
            <value>
            The name of the soa master domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaResponsibleDomainName">
            <summary>
            Gets the name of the soa responsible domain.
            </summary>
            <value>
            The name of the soa responsible domain.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaSerialNumber">
            <summary>
            Gets the soa serial number.
            </summary>
            <value>
            The soa serial number.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaRefreshInterval">
            <summary>
            Gets the soa refresh interval.
            </summary>
            <value>
            The soa refresh interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaRetryInterval">
            <summary>
            Gets the soa retry interval.
            </summary>
            <value>
            The soa retry interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaExpireInterval">
            <summary>
            Gets the soa expire interval.
            </summary>
            <value>
            The soa expire interval.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.DnsRecord.SoaMinimumTimeToLive">
            <summary>
            Gets the soa minimum time to live.
            </summary>
            <value>
            The soa minimum time to live.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsRecordType">
            <summary>
            Enumerates the different DNS record types
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.A">
            <summary>
            A records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.NS">
            <summary>
            Nameserver records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.CNAME">
            <summary>
            CNAME records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.SOA">
            <summary>
            SOA records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.WKS">
            <summary>
            WKS records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.PTR">
            <summary>
            PTR records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.MX">
            <summary>
            MX records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.TXT">
            <summary>
            TXT records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.AAAA">
            <summary>
            A records fot IPv6
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.SRV">
            <summary>
            SRV records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordType.ANY">
            <summary>
            ANY records
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsRecordClass">
            <summary>
            Enumerates the different DNS record classes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordClass.IN">
            <summary>
            IN records
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsRecordClass.ANY">
            <summary>
            ANY records
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsOperationCode">
            <summary>
            Enumerates the different DNS operation codes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsOperationCode.Query">
            <summary>
            Query operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsOperationCode.IQuery">
            <summary>
            IQuery operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsOperationCode.Status">
            <summary>
            Status operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsOperationCode.Notify">
            <summary>
            Notify operation
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsOperationCode.Update">
            <summary>
            Update operation
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.Networking.DnsResponseCode">
            <summary>
            Enumerates the different DNS query response codes
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NoError">
            <summary>
            No error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.FormatError">
            <summary>
            No error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.ServerFailure">
            <summary>
            Format error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NameError">
            <summary>
            Server failure error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NotImplemented">
            <summary>
            Name error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.Refused">
            <summary>
            Not implemented error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.YXDomain">
            <summary>
            Refused error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.YXRRSet">
            <summary>
            YXRR error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NXRRSet">
            <summary>
            NXRR Set error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NotAuth">
            <summary>
            Not authorized error
            </summary> 
        </member>
        <member name="F:Unosquare.Swan.Networking.DnsResponseCode.NotZone">
            <summary>
            Not zone error
            </summary> 
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpCommandNames">
            <summary>
            Enumerates all of the well-known SMTP command names.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.Unknown">
            <summary>
            An unknown command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.HELO">
            <summary>
            The helo command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.EHLO">
            <summary>
            The ehlo command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.QUIT">
            <summary>
            The quit command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.HELP">
            <summary>
            The help command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.NOOP">
            <summary>
            The noop command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.RSET">
            <summary>
            The rset command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.MAIL">
            <summary>
            The mail command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.DATA">
            <summary>
            The data command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.SEND">
            <summary>
            The send command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.SOML">
            <summary>
            The soml command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.SAML">
            <summary>
            The saml command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.RCPT">
            <summary>
            The RCPT command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.VRFY">
            <summary>
            The vrfy command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.EXPN">
            <summary>
            The expn command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.STARTTLS">
            <summary>
            The starttls command
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpCommandNames.AUTH">
            <summary>
            The authentication command
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpReplyCodeSeverities">
            <summary>
            Enumerates the reply code severities
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeSeverities.Unknown">
            <summary>
            The unknown severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeSeverities.PositiveCompletion">
            <summary>
            The positive completion severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeSeverities.PositiveIntermediate">
            <summary>
            The positive intermediate severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeSeverities.TransientNegative">
            <summary>
            The transient negative severity
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeSeverities.PermanentNegative">
            <summary>
            The permanent negative severity
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpReplyCodeCategories">
            <summary>
            Enumerates the reply code categories
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.Unknown">
            <summary>
            The unknown category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.Syntax">
            <summary>
            The syntax category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.Information">
            <summary>
            The information category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.Connections">
            <summary>
            The connections category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.UnspecifiedA">
            <summary>
            The unspecified a category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.UnspecifiedB">
            <summary>
            The unspecified b category
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpReplyCodeCategories.System">
            <summary>
            The system category
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.JsonClient">
            <summary>
            Represents a HttpClient with extended methods to use with JSON payloads 
            and bearer tokens authentication
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Post``1(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Post a object as JSON with optional authorization token.
            </summary>
            <typeparam name="T">The type of response object</typeparam>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result of the requested type</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostOrError``2(System.String,System.Object,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Posts a object as JSON with optional authorization token and retrieve an object
            or an error.
            </summary>
            <typeparam name="T">The type of response object</typeparam>
            <typeparam name="TE">The type of the error.</typeparam>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="httpStatusError">The HTTP status error.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result of the requested type or an error object</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Post(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Posts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result as a collection of key/value pairs</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostString(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Posts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task with a result of the requested string
            </returns>
            <exception cref="T:System.ArgumentNullException">url</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.JsonRequestException">Error POST JSON</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.JsonRequestException">Error POST Json.</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Put``1(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts the specified URL.
            </summary>
            <typeparam name="T">The type of response object</typeparam>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result of the requested type</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Put(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result of the requested collection of key/value pairs</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PutString(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Puts as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="payload">The payload.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task with a result of the requested string
            </returns>
            <exception cref="T:System.ArgumentNullException">url</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.JsonRequestException">Error PUT JSON</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.GetString(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets as string.
            </summary>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task with a result of the requested string
            </returns>
            <exception cref="T:System.ArgumentNullException">url</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.JsonRequestException">Error GET JSON</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Get``1(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the specified URL and return the JSON data as object
            with optional authorization token.
            </summary>
            <typeparam name="T">The response type</typeparam>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>A task with a result of the requested type</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.GetBinary(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the binary.
            </summary>
            <param name="url">The URL.</param>
            <param name="authorization">The authorization.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task with a result of the requested byte array
            </returns>
            <exception cref="T:System.ArgumentNullException">url</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.JsonRequestException">Error GET Binary</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.Authenticate(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate against a web server using Bearer Token
            </summary>
            <param name="url">The URL.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task with a Dictionary with authentication data
            </returns>
            <exception cref="T:System.ArgumentNullException">
            url
            or
            username
            </exception>
            <exception cref="T:System.Security.SecurityException">Error Authenticating</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostFileString(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the file.
            </summary>
            <param name="url">The URL.</param>
            <param name="buffer">The buffer.</param>
            <param name="fileName">Name of the file.</param>
            <param name="authorization">The authorization.</param>
            <returns>A task with a result of the requested string</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.JsonClient.PostFile``1(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Posts the file.
            </summary>
            <typeparam name="T">The response type</typeparam>
            <param name="url">The URL.</param>
            <param name="buffer">The buffer.</param>
            <param name="fileName">Name of the file.</param>
            <param name="authorization">The authorization.</param>
            <returns>A task with a result of the requested string</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1SetOf">
            <summary>
            The Asn1Set class can hold an unordered collection of components with
            identical type. This class inherits from the Asn1Structured class
            which already provides functionality to hold multiple Asn1 components.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Structured" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Choice">
            <summary>
            The Asn1Choice object represents the choice of any Asn1Object. All
            Asn1Object methods are delegated to the object this Asn1Choice contains.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Identifier">
            <summary>
            This class is used to encapsulate an ASN.1 Identifier.
            An Asn1Identifier is composed of three parts:
            <li> a class type,</li><li> a form, and</li><li> a tag.</li>
            The class type is defined as:
            <pre>
            bit 8 7 TAG CLASS
            ------- -----------
            0 0 UNIVERSAL
            0 1 APPLICATION
            1 0 CONTEXT
            1 1 PRIVATE
            </pre>
            The form is defined as:
            <pre>
            bit 6 FORM
            ----- --------
            0 PRIMITIVE
            1 CONSTRUCTED
            </pre>
            Note: CONSTRUCTED types are made up of other CONSTRUCTED or PRIMITIVE
            types.
            The tag is defined as:
            <pre>
            bit 5 4 3 2 1 TAG
            ------------- ---------------------------------------------
            0 0 0 0 0
            . . . . .
            1 1 1 1 0 (0-30) single octet tag
            1 1 1 1 1 (&gt; 30) multiple octet tag, more octets follow
            </pre></summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Identifier.Clone">
            <summary>
            Creates a duplicate, not a true clone, of this object and returns
            a reference to the duplicate.
            </summary>
            <returns>Cloned object</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Identifier.DecodeTagNumber(System.IO.Stream)">
            <summary>
            In the case that we have a tag number that is greater than 30, we need
            to decode a multiple octet tag number.
            </summary>
            <param name="stream">The stream.</param>
            <returns>Int octet</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Object">
            <summary>
            This is the base class for all other Asn1 types.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.#ctor(Unosquare.Swan.Networking.Ldap.Asn1Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.Encode(Unosquare.Swan.Networking.Ldap.IAsn1Encoder,System.IO.Stream)">
            <summary>
            Abstract method that must be implemented by each child
            class to encode itself ( an Asn1Object) directly intto
            a output stream.
            </summary>
            <param name="enc">The enc.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.GetIdentifier">
            <summary>
                Returns the identifier for this Asn1Object as an Asn1Identifier.
                This Asn1Identifier object will include the CLASS, FORM and TAG
                for this Asn1Object.
            </summary>
            <returns>Asn1 Identifier</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.SetIdentifier(Unosquare.Swan.Networking.Ldap.Asn1Identifier)">
            <summary>
            Sets the identifier for this Asn1Object. This is helpful when
            creating implicit Asn1Tagged types.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.GetEncoding(Unosquare.Swan.Networking.Ldap.IAsn1Encoder)">
            <summary>
            This method returns a byte array representing the encoded
            Asn1Object.  It in turn calls the encode method that is
            defined in Asn1Object but will usually be implemented
            in the child Asn1 classes.
            </summary>
            <param name="enc">The enc.</param>
            <returns>
            Byte array
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Object.ToString">
            <summary>
            Return a String representation of this Asn1Object.
            </summary>
            <returns>
            String object
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1OctetString">
            <summary>
            This class encapsulates the OCTET STRING type.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Tagged">
            <summary>
            The Asn1Tagged class can hold a base Asn1Object with a distinctive tag
            describing the type of that base object. It also maintains a boolean value
            indicating whether the value should be encoded by EXPLICIT or IMPLICIT
            means. (Explicit is true by default.)
            If the type is encoded IMPLICITLY, the base types form, length and content
            will be encoded as usual along with the class type and tag specified in
            the constructor of this Asn1Tagged class.
            If the type is to be encoded EXPLICITLY, the base type will be encoded as
            usual after the Asn1Tagged identifier has been encoded.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Tagged.#ctor(Unosquare.Swan.Networking.Ldap.Asn1Identifier,Unosquare.Swan.Networking.Ldap.Asn1Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Tagged"/> class.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="obj">The object renamed.</param>
            <param name="isExplicit">if set to <c>true</c> [explicit].</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Tagged.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32,Unosquare.Swan.Networking.Ldap.Asn1Identifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Tagged"/> class by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Structured">
            <summary>
            This class serves as the base type for all ASN.1
            structured types.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Boolean">
            <summary>
            This class encapsulates the ASN.1 BOOLEAN type.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Boolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Boolean"/> class.
            Call this constructor to construct an Asn1Boolean
            object from a boolean value.
            </summary>
            <param name="content">The boolean value to be contained in the
            this Asn1Boolean object</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Boolean.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Boolean"/> class.
            Constructs an Asn1Boolean object by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Boolean.Encode(Unosquare.Swan.Networking.Ldap.IAsn1Encoder,System.IO.Stream)">
            <summary>
            Encode the current instance into the
            specified output stream using the specified encoder object.
            </summary>
            <param name="enc">Encoder object to use when encoding self.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Boolean.BooleanValue">
            <summary>
            Returns the content of this Asn1Boolean as a boolean.
            </summary>
            <returns>Asn1Boolean as a boolean</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Boolean.ToString">
            <summary>
            Returns a String representation of this Asn1Boolean object.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Null">
            <summary>
            This class represents the ASN.1 NULL type.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Null.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Null"/> class.
            Call this constructor to construct a new Asn1Null
            object.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Null.Encode(Unosquare.Swan.Networking.Ldap.IAsn1Encoder,System.IO.Stream)">
            <summary>
            Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            </summary>
            <param name="enc">Encoder object to use when encoding self.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Null.ToString">
            <summary> Return a String representation of this Asn1Null object.</summary>
            <returns>Asn1Null string</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Numeric">
            <summary>
            This abstract class is the base class
            for all Asn1 numeric (integral) types. These include
            Asn1Integer and Asn1Enumerated.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Object" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Length">
            <summary>
            This class provides a means to manipulate ASN.1 Length's. It will
            be used by Asn1Encoder's and Asn1Decoder's by composition.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Length.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Length"/> class. Constructs an empty Asn1Length.  Values are added by calling reset</summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Length.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Length"/> class.
            Constructs an Asn1Length object by decoding data from an
            input stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Length.Reset(System.IO.Stream)">
            <summary>
            Resets an Asn1Length object by decoding data from an
            input stream.
            Note: this was added for optimization of Asn1.LBERdecoder.decode()
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence">
            <summary>
            The Asn1Sequence class can hold an ordered collection of components with
            distinct type.
            This class inherits from the Asn1Structured class which
            provides functionality to hold multiple Asn1 components.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Structured" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Sequence.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence"/> class.
                Constructs an Asn1Sequence object with the specified
                number of placeholders for Asn1Objects.
                It should be noted there are no actual Asn1Objects in this
                SequenceOf object.
            </summary>
            <param name="size">
                Specifies the initial size of the collection.
            </param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Sequence.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" /> class.
            Constructs an Asn1Sequence object by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Set">
            <summary>
            The Asn1Set class can hold an unordered collection of components with
            distinct type. This class inherits from the Asn1Structured class
            which already provides functionality to hold multiple Asn1 components.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Structured" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Set.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Set" /> class.
            Constructs an Asn1Set object by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Set.ToString">
            <summary>
            Returns a String representation of this Asn1Set.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Integer">
            <summary>
            This class encapsulates the ASN.1 INTEGER type.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Numeric" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Integer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Integer" /> class.
            Call this constructor to construct an Asn1Integer
            object from an integer value.
            </summary>
            <param name="content">The integer value to be contained in the
            this Asn1Integer object</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Integer.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Integer" /> class.
            Constructs an Asn1Integer object by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Integer.Encode(Unosquare.Swan.Networking.Ldap.IAsn1Encoder,System.IO.Stream)">
            <summary>
            Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            </summary>
            <param name="enc">Encoder object to use when encoding self.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Integer.ToString">
            <summary>
            Returns a String representation of this Asn1Integer object.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1Enumerated">
            <summary>
            This class encapsulates the ASN.1 ENUMERATED type.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Numeric" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Enumerated.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Enumerated" /> class.
            Call this constructor to construct an Asn1Enumerated
            object from an integer value.
            </summary>
            <param name="content">The integer value to be contained in the
            this Asn1Enumerated object</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Enumerated.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Asn1Enumerated"/> class.
            Constructs an Asn1Enumerated object by decoding data from an
            input stream.
            </summary>
            <param name="dec">The decoder object to use when decoding the
            input stream.  Sometimes a developer might want to pass
            in his/her own decoder object</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Enumerated.Encode(Unosquare.Swan.Networking.Ldap.IAsn1Encoder,System.IO.Stream)">
            <summary>
            Call this method to encode the current instance into the
            specified output stream using the specified encoder object.
            </summary>
            <param name="enc">Encoder object to use when encoding self.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Asn1Enumerated.ToString">
            <summary>
            Return a String representation of this Asn1Enumerated.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1SequenceOf">
            <summary>
            The Asn1SequenceOf class is used to hold an ordered collection
            of components with identical type.  This class inherits
            from the Asn1Structured class which already provides
            functionality to hold multiple Asn1 components.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Structured" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.IAsn1Decoder">
            <summary>
            This interface defines the methods for decoding each of the ASN.1 types.
            Decoders which implement this interface may be used to decode any of the
            Asn1Object data types.
            This package also provides the BERDecoder class that can be used to
            BER decode ASN.1 classes.  However an application might chose to use
            its own decoder class.
            This interface thus allows an application to use this package to
            decode ASN.1 objects using other decoding rules if needed.
            Note that Ldap packets are required to be BER encoded. Since this package
            includes a BER decoder no application provided decoder is needed for
            building Ldap packets.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Decoder.Decode(System.IO.Stream,System.Int32[])">
            <summary>
            Decode an encoded value into an Asn1Object from an InputStream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="length">The decoded components encoded length. This value is
            handy when decoding structured types. It allows you to accumulate
            the number of bytes decoded, so you know when the structured
            type has decoded all of its components.</param>
            <returns>Decoded object</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Decoder.DecodeBoolean(System.IO.Stream,System.Int32)">
            <summary>
            Decode a BOOLEAN directly from a stream. Call this method when you
            know that the next ASN.1 encoded element is a BOOLEAN
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">Length in bytes</param>
            <returns>Decoded Boolean</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Decoder.DecodeNumeric(System.IO.Stream,System.Int32)">
            <summary>
            Decode a Numeric value directly from a stream.  Call this method when you
            know that the next ASN.1 encoded element is a Numeric
            Can be used to decodes INTEGER and ENUMERATED types.
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">Length in bytes</param>
            <returns>Decoded Numeric</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Decoder.DecodeOctetString(System.IO.Stream,System.Int32)">
            <summary>
            Decode an OCTET_STRING directly from a stream. Call this method when you
            know that the next ASN.1 encoded element is a OCTET_STRING.
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">Length in bytes</param>
            <returns>Decoded string</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.IAsn1Encoder">
            <summary>
            This interface defines the methods for encoding each of the ASN.1 types.
            Encoders which implement this interface may be used to encode any of the
            IAsn1Object data types.
            This package also provides the BEREncoder class that can be used to
            BER encode ASN.1 classes.  However an application might chose to use
            its own encoder class.
            This interface thus allows an application to use this package to
            encode ASN.1 objects using other encoding rules if needed.
            Note that Ldap packets are required to be BER encoded. Since this package
            includes a BER encoder no application provided encoder is needed for
            building Ldap packets.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Boolean,System.IO.Stream)">
            <summary>
            Encode an Asn1Boolean directly into the provided output stream.
            </summary>
            <param name="b">The Asn1Boolean object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Numeric,System.IO.Stream)">
            <summary>
            Encode an Asn1Numeric directly to a stream.
            Use a two's complement representation in the fewest number of octets
            possible.
            Can be used to encode both INTEGER and ENUMERATED values.
            </summary>
            <param name="n">The Asn1Numeric object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Null,System.IO.Stream)">
            <summary>
            Encode an Asn1Null directly to a stream.
            </summary>
            <param name="n">The Asn1Null object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1OctetString,System.IO.Stream)">
            <summary>
            Encode an Asn1OctetString directly to a stream.
            </summary>
            <param name="os">The Asn1OctetString object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Structured,System.IO.Stream)">
            <summary>
            Encode an Asn1Structured directly to a stream.
            </summary>
            <param name="c">The Asn1Structured object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Tagged,System.IO.Stream)">
            <summary>
            Encode an Asn1Tagged directly to a stream.
            </summary>
            <param name="t">The Asn1Tagged object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IAsn1Encoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Identifier,System.IO.Stream)">
            <summary>
            Encode an Asn1Identifier directly to a stream.
            </summary>
            <param name="id">The Asn1Identifier object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LBERDecoder">
            <summary>
            This class provides LBER decoding routines for ASN.1 Types. LBER is a
            subset of BER as described in the following taken from 5.1 of RFC 2251:
            5.1. Mapping Onto BER-based Transport Services
            The protocol elements of Ldap are encoded for exchange using the
            Basic Encoding Rules (BER) [11] of ASN.1 [3]. However, due to the
            high overhead involved in using certain elements of the BER, the
            following additional restrictions are placed on BER-encodings of Ldap
            protocol elements:
            <li>(1) Only the definite form of length encoding will be used.</li>
            <li>(2) OCTET STRING values will be encoded in the primitive form only.</li><li>
            (3) If the value of a BOOLEAN type is true, the encoding MUST have
            its contents octets set to hex "FF".
            </li><li>
            (4) If a value of a type is its default value, it MUST be absent.
            Only some BOOLEAN and INTEGER types have default values in this
            protocol definition.
            These restrictions do not apply to ASN.1 types encapsulated inside of
            OCTET STRING values, such as attribute values, unless otherwise
            noted.
            </li>
            [3] ITU-T Rec. X.680, "Abstract Syntax Notation One (ASN.1) -
            Specification of Basic Notation", 1994.
            [11] ITU-T Rec. X.690, "Specification of ASN.1 encoding rules: Basic,
            Canonical, and Distinguished Encoding Rules", 1994.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IAsn1Decoder" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBERDecoder.Decode(System.IO.Stream,System.Int32[])">
            <summary>
            Decode an LBER encoded value into an Asn1Object from an InputStream.
            This method also returns the total length of this encoded
            Asn1Object (length of type + length of length + length of content)
            in the parameter len. This information is helpful when decoding
            structured types.
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
            <returns>
            Decoded Asn1Obect
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">Unknown tag</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBERDecoder.DecodeBoolean(System.IO.Stream,System.Int32)">
            <summary>
            Decode a boolean directly from a stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">Length in bytes</param>
            <returns>
            Decoded boolean object
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">LBER: BOOLEAN: decode error: EOF</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBERDecoder.DecodeNumeric(System.IO.Stream,System.Int32)">
            <summary>
            Decode a Numeric type directly from a stream. Decodes INTEGER
            and ENUMERATED types.
            </summary>
            <param name="stream">The stream.</param>
            <param name="len">Length in bytes</param>
            <returns>
            Decoded numeric object
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            LBER: NUMERIC: decode error: EOF
            or
            LBER: NUMERIC: decode error: EOF
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBERDecoder.DecodeOctetString(System.IO.Stream,System.Int32)">
            <summary>
            Decode an OctetString directly from a stream.
            </summary>
            <param name="stream">The stream</param>
            <param name="len">Length in bytes</param>
            <returns>Decoded octet </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LBEREncoder">
            <summary>
            This class provides LBER encoding routines for ASN.1 Types. LBER is a
            subset of BER as described in the following taken from 5.1 of RFC 2251:
            5.1. Mapping Onto BER-based Transport Services
            The protocol elements of Ldap are encoded for exchange using the
            Basic Encoding Rules (BER) [11] of ASN.1 [3]. However, due to the
            high overhead involved in using certain elements of the BER, the
            following additional restrictions are placed on BER-encodings of Ldap
            protocol elements:
            <li>(1) Only the definite form of length encoding will be used.</li><li>(2) OCTET STRING values will be encoded in the primitive form only.</li><li>
            (3) If the value of a BOOLEAN type is true, the encoding MUST have
            its contents octets set to hex "FF".
            </li><li>
            (4) If a value of a type is its default value, it MUST be absent.
            Only some BOOLEAN and INTEGER types have default values in this
            protocol definition.
            These restrictions do not apply to ASN.1 types encapsulated inside of
            OCTET STRING values, such as attribute values, unless otherwise
            noted.
            </li>
            [3] ITU-T Rec. X.680, "Abstract Syntax Notation One (ASN.1) -
            Specification of Basic Notation", 1994.
            [11] ITU-T Rec. X.690, "Specification of ASN.1 encoding rules: Basic,
            Canonical, and Distinguished Encoding Rules", 1994.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IAsn1Encoder" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Boolean,System.IO.Stream)">
            <summary>
            BER Encode an Asn1Boolean directly into the specified output stream.
            </summary>
            <param name="b">The Asn1Boolean object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Numeric,System.IO.Stream)">
            <summary>
            Encode an Asn1Numeric directly into the specified outputstream.
            Use a two's complement representation in the fewest number of octets
            possible.
            Can be used to encode INTEGER and ENUMERATED values.
            </summary>
            <param name="n">The Asn1Numeric object to encode</param>
            <param name="stream">The stram</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Null,System.IO.Stream)">
            <summary>
            Encode an Asn1Null directly into the specified outputstream.
            </summary>
            <param name="n">The Asn1Null object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1OctetString,System.IO.Stream)">
            <summary>
            Encode an Asn1OctetString directly into the specified outputstream.
            </summary>
            <param name="os">The Asn1OctetString object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Structured,System.IO.Stream)">
            <summary>
            Encode an Asn1Structured into the specified outputstream.  This method
            can be used to encode SET, SET_OF, SEQUENCE, SEQUENCE_OF
            </summary>
            <param name="c">The Asn1Structured object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Tagged,System.IO.Stream)">
            <summary>
            Encode an Asn1Tagged directly into the specified outputstream.
            </summary>
            <param name="t">The Asn1Tagged object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.Encode(Unosquare.Swan.Networking.Ldap.Asn1Identifier,System.IO.Stream)">
            <summary>
            Encode an Asn1Identifier directly into the specified outputstream.
            </summary>
            <param name="id">The Asn1Identifier object to encode</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.EncodeLength(System.Int32,System.IO.Stream)">
            <summary>
            Encodes the length.
            </summary>
            <param name="length">The length.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LBEREncoder.EncodeTagInteger(System.Int32,System.IO.Stream)">
            <summary>
            Encodes the provided tag into the outputstream.
            </summary>
            <param name="val">The value.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapConnection">
            <summary>
            The central class that encapsulates the connection
            to a directory server through the Ldap protocol.
            LdapConnection objects are used to perform common Ldap
            operations such as search, modify and add.
            In addition, LdapConnection objects allow you to bind to an
            Ldap server, set connection and search constraints, and perform
            several other tasks.
            An LdapConnection object is not connected on
            construction and can only be connected to one server at one
            port. Multiple threads may share this single connection, typically
            by cloning the connection object, one for each thread. An
            application may have more than one LdapConnection object, connected
            to the same or different directory servers.
            
            Base on https://github.com/dsbenghe/Novell.Directory.Ldap.NETStandard
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.ScopeBase">
            <summary>
            Used with search to specify that the scope of entrys to search is to
            search only the base object.
            SCOPE_BASE = 0
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.ScopeOne">
            <summary>
            Used with search to specify that the scope of entrys to search is to
            search only the immediate subordinates of the base object.
            SCOPE_ONE = 1
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.ScopeSub">
            <summary>
            Used with search to specify that the scope of entrys to search is to
            search the base object and all entries within its subtree.
            SCOPE_ONE = 2
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.NoAttrs">
            <summary>
            Used with search instead of an attribute list to indicate that no
            attributes are to be returned.
            NO_ATTRS = "1.1"
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.AllUserAttrs">
            <summary>
            Used with search instead of an attribute list to indicate that all
            attributes are to be returned.
            ALL_USER_ATTRS = "*"
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.LdapV3">
            <summary>
            Specifies the Ldapv3 protocol version when performing a bind operation.
            Specifies Ldap version V3 of the protocol, and is specified
            when performing bind operations.
            You can use this identifier in the version parameter
            of the bind method to specify an Ldapv3 bind.
            Ldap_V3 is the default protocol version
            Ldap_V3 = 3
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.DefaultPort">
            <summary>
                The default port number for Ldap servers.
                You can use this identifier to specify the port when establishing
                a clear text connection to a server.  This the default port.
                DEFAULT_PORT = 389
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.DefaultSslPort">
            <summary>
                The default SSL port number for Ldap servers.
                DEFAULT_SSL_PORT = 636
                You can use this identifier to specify the port when establishing
                a an SSL connection to a server..
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.LdapPropertySdk">
            <summary>
                A string that can be passed in to the getProperty method.
                Ldap_PROPERTY_SDK = "version.sdk"
                You can use this string to request the version of the SDK.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.LdapPropertyProtocol">
            <summary>
                A string that can be passed in to the getProperty method.
                Ldap_PROPERTY_PROTOCOL = "version.protocol"
                You can use this string to request the version of the
                Ldap protocol.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.LdapPropertySecurity">
            <summary>
                A string that can be passed in to the getProperty method.
                Ldap_PROPERTY_SECURITY = "version.security"
                You can use this string to request the type of security
                being used.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.ServerShutdownOid">
            <summary>
                A string that corresponds to the server shutdown notification OID.
                This notification may be used by the server to advise the client that
                the server is about to close the connection due to an error
                condition.
                SERVER_SHUTDOWN_OID = "1.3.6.1.4.1.1466.20036"
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapConnection.StartTlsOid">
            <summary> The OID string that identifies a StartTLS request and response.</summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapConnection.ProtocolVersion">
            <summary>
            Returns the protocol version uses to authenticate.
            0 is returned if no authentication has been performed.
            </summary>
            <value>
            The protocol version.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapConnection.AuthenticationDn">
            <summary>
            Returns the distinguished name (DN) used for as the bind name during
            the last successful bind operation.  null is returned
            if no authentication has been performed or if the bind resulted in
            an anonymous connection.
            </summary>
            <value>
            The authentication dn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapConnection.AuthenticationMethod">
            <summary>
            Returns the method used to authenticate the connection. The return
            value is one of the following:
            <ul><li>"none" indicates the connection is not authenticated.</li><li>
            "simple" indicates simple authentication was used or that a null
            or empty authentication DN was specified.
            </li><li>"sasl" indicates that a SASL mechanism was used to authenticate</li></ul>
            </summary>
            <value>
            The authentication method.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapConnection.Connected">
            <summary>
                Indicates whether the connection represented by this object is open
                at this time.
            </summary>
            <returns>
                True if connection is open; false if the connection is closed.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapConnection.ResponseControls">
            <summary>
                Returns the Server Controls associated with the most recent response
                to a synchronous request on this connection object, or null
                if the latest response contained no Server Controls. The method
                always returns null for asynchronous requests. For asynchronous
                requests, the response controls are available in LdapMessage.
            </summary>
            <returns>
                The server controls associated with the most recent response
                to a synchronous request or null if the response contains no server
                controls.
            </returns>
            <seealso cref="P:Unosquare.Swan.Networking.Ldap.LdapMessage.Controls">
            </seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Bind(System.String,System.String)">
            <summary>
            Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap version,
            and constraints.
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            </summary>
            <param name="dn">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.</param>
            <param name="passwd">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Bind(System.Int32,System.String,System.String)">
            <summary>
            Synchronously authenticates to the Ldap server (that the object is
            currently connected to) using the specified name, password, Ldap version,
            and constraints.
            If the object has been disconnected from an Ldap server,
            this method attempts to reconnect to the server. If the object
            has already authenticated, the old authentication is discarded.
            </summary>
            <param name="version">The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.</param>
            <param name="dn">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.</param>
            <param name="passwd">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.
            Note: the application should use care in the use
            of String password objects.  These are long lived
            objects, and may expose a security risk, especially
            in objects that are serialized.  The LdapConnection
            keeps no long lived instances of these objects.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified host and port.
            If this LdapConnection object represents an open connection, the
            connection is closed first before the new connection is opened.
            At this point, there is no authentication, and any operations are
            conducted as an anonymous client.
            </summary>
            <param name="host">A host name or a dotted string representing the IP address
            of a host running an Ldap server.</param>
            <param name="port">The TCP or UDP port number to connect to or contact.
            The default Ldap port is 389.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Disconnect">
            <summary>
            Synchronously disconnects from the Ldap server.
            Before the object can perform Ldap operations again, it must
            reconnect to the server by calling connect.
            The disconnect method abandons any outstanding requests, issues an
            unbind request to the server, and then closes the socket.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Read(System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Synchronously reads the entry for the specified distinguished name (DN),
            using the specified constraints, and retrieves only the specified
            attributes from the entry.
            </summary>
            <param name="dn">The distinguished name of the entry to retrieve.</param>
            <param name="attrs">The names of the attributes to retrieve.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            the LdapEntry read from the server
            </returns>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">Read response is ambiguous, multiple entries returned</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Performs the search specified by the parameters,
            also allowing specification of constraints for the search (such
            as the maximum number of entries to find or the maximum time to
            wait for search results).
            </summary>
            <param name="base">The base distinguished name to search from.</param>
            <param name="scope">The scope of the entries to search. The following
            are the valid options:
            <ul><li>SCOPE_BASE - searches only the base DN</li><li>SCOPE_ONE - searches only entries under the base DN</li><li>
            SCOPE_SUB - searches the base DN and all entries
            within its subtree
            </li></ul></param>
            <param name="filter">The search filter specifying the search criteria.</param>
            <param name="attrs">The names of attributes to retrieve.</param>
            <param name="typesOnly">If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Modify(System.String,Unosquare.Swan.Networking.Ldap.LdapModification[],System.Threading.CancellationToken)">
            <summary>
            Modifies the specified dn.
            </summary>
            <param name="dn">The dn.</param>
            <param name="mods">The mods.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">dn</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.RequestLdapMessage(Unosquare.Swan.Networking.Ldap.LdapMessage,System.Threading.CancellationToken)">
            <summary>
            Requests the LDAP message.
            </summary>
            <param name="msg">The MSG.</param>
            <param name="ct">The ct.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="isDisposing">
              <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapControl">
            <summary>
            Encapsulates optional additional parameters or constraints to be applied to
            an Ldap operation.
            When included with LdapConstraints or LdapSearchConstraints
            on an LdapConnection or with a specific operation request, it is
            sent to the server along with operation requests.
            </summary>
            <seealso cref="P:Unosquare.Swan.Networking.Ldap.LdapConnection.ResponseControls"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapControl.#ctor(System.String,System.Boolean,System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapControl"/> class.
            Constructs a new LdapControl object using the specified values.
            </summary>
            <param name="oid">The OID of the control, as a dotted string.</param>
            <param name="critical">True if the Ldap operation should be discarded if
            the control is not supported. False if
            the operation can be processed without the control.</param>
            <param name="values">The control-specific data.</param>
            <exception cref="T:System.ArgumentException">An OID must be specified</exception>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapControl.Id">
            <summary>
            Returns the identifier of the control.
            </summary>
            <value>
            The identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapControl.Critical">
            <summary>
            Returns whether the control is critical for the operation.
            </summary>
            <value>
              <c>true</c> if critical; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapControl.Register(System.String,System.Type)">
            <summary>
            Registers a class to be instantiated on receipt of a control with the
            given OID.
            Any previous registration for the OID is overridden. The
            controlClass must be an extension of LdapControl.
            </summary>
            <param name="oid">The object identifier of the control.</param>
            <param name="controlClass">A class which can instantiate an LdapControl.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapControl.Clone">
            <summary>
            Returns a copy of the current LdapControl object.
            </summary>
            <returns>
            A copy of the current LdapControl object.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapControl.GetValue">
            <summary>
                Returns the control-specific data of the object.
            </summary>
            <returns>
                The control-specific data of the object as a byte array,
                or null if the control has no data.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapBindRequest">
            <summary>
            Represents a simple bind request.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapBindRequest.#ctor(System.Int32,System.String,System.SByte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapBindRequest"/> class.
            Constructs a simple bind request.
            </summary>
            <param name="version">The Ldap protocol version, use Ldap_V3.
            Ldap_V2 is not supported.</param>
            <param name="dn">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name.</param>
            <param name="passwd">If non-null and non-empty, specifies that the
            connection and all operations through it should
            be authenticated with dn as the distinguished
            name and passwd as password.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapBindRequest.AuthenticationDN">
            <summary>
            Retrieves the Authentication DN for a bind request.
            </summary>
            <value>
            The authentication dn.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapBindRequest.ToString">
            <summary>
            Return an Asn1 representation of this add request.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapSearchResultReference">
            <summary>
            Encapsulates a continuation reference from an asynchronous search operation.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapSearchResultReference.#ctor(Unosquare.Swan.Networking.Ldap.RfcLdapMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapSearchResultReference"/> class.
            Constructs an LdapSearchResultReference object.
            </summary>
            <param name="message">The LdapMessage with a search reference.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchResultReference.Referrals">
            <summary>
            Returns any URLs in the object.
            </summary>
            <value>
            The referrals.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapUrl">
            <summary>
            Encapsulates parameters of an Ldap URL query as defined in RFC2255.
            An LdapUrl object can be passed to LdapConnection.search to retrieve
            search results.
            </summary>
            <seealso cref="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,System.Threading.CancellationToken)"></seealso>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.DN">
            <summary>
            Gets or sets the distinguised name.
            </summary>
            <value>
            The dn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.AttributeArray">
            <summary>
            Returns an array of attribute names specified in the URL.
            </summary>
            <value>
            The attribute array.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Extensions">
            <summary>
                Returns an enumerator for the attribute names specified in the URL.
            </summary>
            <returns>
                An enumeration of attribute names.
            </returns>
            <summary>
                Returns any Ldap URL extensions specified, or null if none are
                specified. Each extension is a type=value expression. The =value part
                MAY be omitted. The expression MAY be prefixed with '!' if it is
                mandatory for evaluation of the URL.
            </summary>
            <returns>
                string array of extensions.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Filter">
            <summary>
                Returns the search filter or null if none was specified.
            </summary>
            <returns>
                The search filter.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Host">
            <summary>
                Returns the name of the Ldap server in the URL.
            </summary>
            <returns>
                The host name specified in the URL.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Port">
            <summary>
                Returns the port number of the Ldap server in the URL.
            </summary>
            <returns>
                The port number in the URL.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Scope">
            <summary>
                Returns the depth of search. It returns one of the following from
                LdapConnection: SCOPE_BASE, SCOPE_ONE, or SCOPE_SUB.
            </summary>
            <returns>
                The search scope.
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapUrl.Secure">
            <summary>
                Returns true if the URL is of the type ldaps (Ldap over SSL, a predecessor
                to startTls)
            </summary>
            <returns>
                whether this is a secure Ldap url or not.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapUrl.Clone">
            <summary>
                Returns a clone of this URL object.
            </summary>
            <returns>
                clone of this URL object.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapUrl.ToString">
            <summary>
            Returns a valid string representation of this Ldap URL.
            </summary>
            <returns>
            The string representation of the Ldap URL.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RespControlVector">
            <summary>
            The RespControlVector class implements extends the
            existing Vector class so that it can be used to maintain a
            list of currently registered control responses.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RespControlVector.RegisteredControl">
            <summary>
            Inner class defined to create a temporary object to encapsulate
            all registration information about a response control.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcBindRequest">
            <summary>
            Represents and Ldap Bind Request.
            <pre>
            BindRequest ::= [APPLICATION 0] SEQUENCE {
            version                 INTEGER (1 .. 127),
            name                    LdapDN,
            authentication          AuthenticationChoice }
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcRequest" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcBindRequest.#ctor(System.Int32,System.String,Unosquare.Swan.Networking.Ldap.Asn1Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcBindRequest"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="name">The name.</param>
            <param name="auth">The authentication.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcBindRequest.GetIdentifier">
            <summary>
            Override getIdentifier to return an application-wide id.
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 0. (0x60)
            </pre>
            </summary>
            <returns>
            Asn1 Identifier
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapEntry">
            <summary>
            Represents a single entry in a directory, consisting of
            a distinguished name (DN) and zero or more attributes.
            An instance of
            LdapEntry is created in order to add an entry to a directory, and
            instances of LdapEntry are returned on a search by enumerating an
            LdapSearchResults.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapAttribute"></seealso>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapAttributeSet"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapEntry.#ctor(System.String,Unosquare.Swan.Networking.Ldap.LdapAttributeSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapEntry" /> class.
            Constructs a new entry with the specified distinguished name and set
            of attributes.
            </summary>
            <param name="dn">The distinguished name of the new entry. The
            value is not validated. An invalid distinguished
            name will cause operations using this entry to fail.</param>
            <param name="attrs">The initial set of attributes assigned to the
            entry.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapEntry.DN">
            <summary>
            Returns the distinguished name of the entry.
            </summary>
            <value>
            The dn.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapEntry.GetAttribute(System.String)">
            <summary>
            Returns the attributes matching the specified attrName.
            </summary>
            <param name="attrName">The name of the attribute or attributes to return.</param>
            <returns>
            An array of LdapAttribute objects.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapEntry.GetAttributeSet">
            <summary>
            Returns the attribute set of the entry.
            All base and subtype variants of all attributes are
            returned. The LdapAttributeSet returned may be
            empty if there are no attributes in the entry.
            </summary>
            <returns>
            The attribute set of the entry.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapEntry.GetAttributeSet(System.String)">
            <summary>
            Returns an attribute set from the entry, consisting of only those
            attributes matching the specified subtypes.
            The getAttributeSet method can be used to extract only
            a particular language variant subtype of each attribute,
            if it exists. The "subtype" may be, for example, "lang-ja", "binary",
            or "lang-ja;phonetic". If more than one subtype is specified, separated
            with a semicolon, only those attributes with all of the named
            subtypes will be returned. The LdapAttributeSet returned may be
            empty if there are no matching attributes in the entry.
            </summary>
            <param name="subtype">One or more subtype specification(s), separated
            with semicolons. The "lang-ja" and
            "lang-en;phonetic" are valid subtype
            specifications.</param>
            <returns>
            An attribute set from the entry with the attributes that
            match the specified subtypes or an empty set if no attributes
            match.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapAttribute">
            <summary>
            The name and values of one attribute of a directory entry.
            LdapAttribute objects are used when searching for, adding,
            modifying, and deleting attributes from the directory.
            LdapAttributes are often used in conjunction with an
            LdapAttributeSet when retrieving or adding multiple
            attributes to an entry.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapAttribute"/> class.
            Constructs an attribute with no values.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <exception cref="T:System.ArgumentException">Attribute name cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapAttribute" /> class.
            Constructs an attribute with a single <see cref="T:System.String" /> value.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrString">Value of the attribute as a string.</param>
            <exception cref="T:System.ArgumentException">Attribute value cannot be null</exception>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.ByteValueArray">
            <summary>
            Returns the values of the attribute as an array of bytes.
            </summary>
            <value>
            The byte value array.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.StringValueArray">
            <summary>
            Returns the values of the attribute as an array of strings.
            </summary>
            <value>
            The string value array.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.StringValue">
            <summary>
            Returns the the first value of the attribute as an UTF-8 string.
            </summary>
            <value>
            The string value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.ByteValue">
            <summary>
            Returns the first value of the attribute as a byte array or null.
            </summary>
            <value>
            The byte value.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.LangSubtype">
            <summary>
            Returns the language subtype of the attribute, if any.
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns the string, lang-ja.
            </summary>
            <value>
            The language subtype.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapAttribute.Name">
            <summary>
            Returns the name of the attribute.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.GetSubtypes(System.String)">
            <summary>
            Extracts the subtypes from the specified attribute name.
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns an array containing lang-ja and phonetic.
            </summary>
            <param name="attrName">Name of the attribute from which to extract
            the subtypes.</param>
            <returns>
            An array subtypes or null if the attribute has none.
            </returns>
            <exception cref="T:System.ArgumentException">Attribute name cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.GetBaseName(System.String)">
            <summary>
            Returns the base name of the specified attribute name.
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns cn.
            </summary>
            <param name="attrName">Name of the attribute from which to extract the
            base name.</param>
            <returns> The base name of the attribute. </returns>
            <exception cref="T:System.ArgumentException">Attribute name cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A cloned instance</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.AddValue(System.String)">
            <summary>
            Adds a <see cref="T:System.String" /> value to the attribute.
            </summary>
            <param name="attrString">Value of the attribute as a String.</param>
            <exception cref="T:System.ArgumentException">Attribute value cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.AddValue(System.SByte[])">
            <summary>
            Adds a byte-formatted value to the attribute.
            </summary>
            <param name="attrBytes">Value of the attribute as raw bytes.
            Note: If attrBytes represents a string it should be UTF-8 encoded.</param>
            <exception cref="T:System.ArgumentException">Attribute value cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.AddBase64Value(System.String)">
            <summary>
            Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  String
            data encoded as a base64 value must be UTF-8 characters.
            </summary>
            <param name="attrString">The base64 value of the attribute as a String.</param>
            <exception cref="T:System.ArgumentException">Attribute value cannot be null</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.AddBase64Value(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  Character
            data encoded as a base64 value must be UTF-8 characters.
            </summary>
            <param name="attrString">The base64 value of the attribute as a StringBuffer.</param>
            <param name="start">The start index of base64 encoded part, inclusive.</param>
            <param name="end">The end index of base encoded part, exclusive.</param>
            <exception cref="T:System.ArgumentNullException">attrString</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.AddBase64Value(System.Char[])">
            <summary>
            Adds a base64 encoded value to the attribute.
            The value will be decoded and stored as bytes.  Character
            data encoded as a base64 value must be UTF-8 characters.
            </summary>
            <param name="attrChars">The base64 value of the attribute as an array of
            characters.</param>
            <exception cref="T:System.ArgumentNullException">attrChars</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.GetBaseName">
            <summary>
            Returns the base name of the attribute.
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns cn.
            </summary>
            <returns>
            The base name of the attribute.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.GetSubtypes">
            <summary>
            Extracts the subtypes from the attribute name.
            For example, if the attribute name is cn;lang-ja;phonetic,
            this method returns an array containing lang-ja and phonetic.
            </summary>
            <returns>
            An array subtypes or null if the attribute has none.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.HasSubtype(System.String)">
            <summary>
                Reports if the attribute name contains the specified subtype.
                For example, if you check for the subtype lang-en and the
                attribute name is cn;lang-en, this method returns true.
            </summary>
            <param name="subtype">
                The single subtype to check for.
            </param>
            <returns>
                True, if the attribute has the specified subtype;
                false, if it doesn't.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.HasSubtypes(System.String[])">
            <summary>
                Reports if the attribute name contains all the specified subtypes.
                For example, if you check for the subtypes lang-en and phonetic
                and if the attribute name is cn;lang-en;phonetic, this method
                returns true. If the attribute name is cn;phonetic or cn;lang-en,
                this method returns false.
            </summary>
            <param name="subtypes">
                An array of subtypes to check for.
            </param>
            <returns>
                True, if the attribute has all the specified subtypes;
                false, if it doesn't have all the subtypes.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.RemoveValue(System.String)">
            <summary>
            Removes a string value from the attribute.
            </summary>
            <param name="attrString">Value of the attribute as a string.
            Note: Removing a value which is not present in the attribute has
            no effect.</param>
            <exception cref="T:System.ArgumentNullException">attrString</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.RemoveValue(System.SByte[])">
            <summary>
            Removes a byte-formatted value from the attribute.
            </summary>
            <param name="attrBytes">Value of the attribute as raw bytes.
            Note: If attrBytes represents a string it should be UTF-8 encoded.
            Note: Removing a value which is not present in the attribute has
            no effect.</param>
            <exception cref="T:System.ArgumentNullException">attrBytes</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.Size">
            <summary>
            Returns the number of values in the attribute.
            </summary>
            <returns>
            The number of values in the attribute.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.CompareTo(System.Object)">
            <summary>
            Compares this object with the specified object for order.
            Ordering is determined by comparing attribute names using the method Compare() of the String class.
            </summary>
            <param name="attribute">The LdapAttribute to be compared to this object.</param>
            <returns>
            Returns a negative integer, zero, or a positive
            integer as this object is less than, equal to, or greater than the
            specified object.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.ToString">
            <summary>
            Returns a string representation of this LdapAttribute
            </summary>
            <returns>
            a string representation of this LdapAttribute
            </returns>
            <exception cref="T:System.Exception">NullReferenceException</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.Add(System.SByte[])">
            <summary>
            Adds an object to this object's list of attribute values
            </summary>
            <param name="bytes">Ultimately all of this attribute's values are treated
            as binary data so we simplify the process by requiring
            that all data added to our list is in binary form.
            Note: If attrBytes represents a string it should be UTF-8 encoded.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttribute.Equals(System.SByte[],System.SByte[])">
            <summary>
            Returns true if the two specified arrays of bytes are equal to each
            another. 
            </summary>
            <param name="e1">the first array to be tested</param>
            <param name="e2">the second array to be tested</param>
            <returns>
            true if the two arrays are equal
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapAttributeSet">
            <summary>
            A set of LdapAttribute objects.
            An LdapAttributeSet is a collection of LdapAttribute
            classes as returned from an LdapEntry on a search or read
            operation. LdapAttributeSet may be also used to construct an entry
            to be added to a directory.  
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapAttribute"></seealso>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapEntry"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.Clone">
            <summary>
                Returns a deep copy of this attribute set.
            </summary>
            <returns>
                A deep copy of this attribute set.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.GetAttribute(System.String)">
            <summary>
            Returns the attribute matching the specified attrName.
            For example:
            <ul><li><c>getAttribute("cn")</c>      returns only the "cn" attribute</li><li><c>getAttribute("cn;lang-en")</c> returns only the "cn;lang-en"
            attribute.
            </li></ul>
            In both cases, null is returned if there is no exact match to
            the specified attrName.
            Note: Novell eDirectory does not currently support language subtypes.
            It does support the "binary" subtype.
            </summary>
            <param name="attrName">The name of an attribute to retrieve, with or without
            subtype specifications. For example, "cn", "cn;phonetic", and
            "cn;binary" are valid attribute names.</param>
            <returns>
            The attribute matching the specified attrName, or null
            if there is no exact match.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.GetAttribute(System.String,System.String)">
            <summary>
                Returns a single best-match attribute, or null if no match is
                available in the entry.
                Ldap version 3 allows adding a subtype specification to an attribute
                name. For example, "cn;lang-ja" indicates a Japanese language
                subtype of the "cn" attribute and "cn;lang-ja-JP-kanji" may be a subtype
                of "cn;lang-ja". This feature may be used to provide multiple
                localizations in the same directory. For attributes which do not vary
                among localizations, only the base attribute may be stored, whereas
                for others there may be varying degrees of specialization.
                For example, <c>getAttribute(attrName,lang)</c> returns the
                <c>LdapAttribute</c> that exactly matches attrName and that
                best matches lang.
                If there are subtypes other than "lang" subtypes included
                in attrName, for example, "cn;binary", only attributes with all of
                those subtypes are returned. If lang is null or empty, the
                method behaves as getAttribute(attrName). If there are no matching
                attributes, null is returned.
                Assume the entry contains only the following attributes:
                <ul>
                    <li>cn;lang-en</li>
                    <li>cn;lang-ja-JP-kanji</li>
                    <li>sn</li>
                </ul>
                Examples:
                <ul>
                    <li><c>getAttribute( "cn" )</c>       returns null.</li>
                    <li><c>getAttribute( "sn" )</c>       returns the "sn" attribute.</li>
                    <li>
                        <c>getAttribute( "cn", "lang-en-us" )</c>
                        returns the "cn;lang-en" attribute.
                    </li>
                    <li>
                        <c>getAttribute( "cn", "lang-en" )</c>
                        returns the "cn;lang-en" attribute.
                    </li>
                    <li>
                        <c>getAttribute( "cn", "lang-ja" )</c>
                        returns null.
                    </li>
                    <li>
                        <c>getAttribute( "sn", "lang-en" )</c>
                        returns the "sn" attribute.
                    </li>
                </ul>
                Note: Novell eDirectory does not currently support language subtypes.
                It does support the "binary" subtype.
            </summary>
            <param name="attrName">
                The name of an attribute to retrieve, with or without
                subtype specifications. For example, "cn", "cn;phonetic", and
                cn;binary" are valid attribute names.
            </param>
            <param name="lang">
                A language specification with optional subtypes
                appended using "-" as separator. For example, "lang-en", "lang-en-us",
                "lang-ja", and "lang-ja-JP-kanji" are valid language specification.
            </param>
            <returns>
                A single best-match <c>LdapAttribute</c>, or null
                if no match is found in the entry.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.GetSubset(System.String)">
            <summary>
            Creates a new attribute set containing only the attributes that have
            the specified subtypes.
            For example, suppose an attribute set contains the following
            attributes:
            <ul><li>    cn</li><li>    cn;lang-ja</li><li>    sn;phonetic;lang-ja</li><li>    sn;lang-us</li></ul>
            Calling the <c>getSubset</c> method and passing lang-ja as the
            argument, the method returns an attribute set containing the following
            attributes:
            <ul><li>cn;lang-ja</li><li>sn;phonetic;lang-ja</li></ul>
            </summary>
            <param name="subtype">Semi-colon delimited list of subtypes to include. For
            example:
            <ul><li> "lang-ja" specifies only Japanese language subtypes</li><li> "binary" specifies only binary subtypes</li><li>
            "binary;lang-ja" specifies only Japanese language subtypes
            which also are binary
            </li></ul>
            Note: Novell eDirectory does not currently support language subtypes.
            It does support the "binary" subtype.</param>
            <returns>
            An attribute set containing the attributes that match the
            specified subtype.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.GetEnumerator">
            <summary>
            Returns an iterator over the attributes in this set.  The attributes
            returned from this iterator are not in any particular order.
            </summary>
            <returns>
            iterator over the attributes in this set
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.Contains(System.Object)">
            <summary>
            Returns <c>true</c> if this set contains an attribute of the same name
            as the specified attribute.
            </summary>
            <param name="attr">Object of type <c>LdapAttribute</c></param>
            <returns>
            true if this set contains the specified attribute
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.Add(System.Object)">
            <summary>
            Adds the specified attribute to this set if it is not already present.
            If an attribute with the same name already exists in the set then the
            specified attribute will not be added.
            </summary>
            <param name="attr">Object of type <c>LdapAttribute</c></param>
            <returns>
            <c>true</c> if the attribute was added.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.Remove(System.Object)">
            <summary>
            Removes the specified object from this set if it is present.
            If the specified object is of type <c>LdapAttribute</c>, the
            specified attribute will be removed.  If the specified object is of type
            string, the attribute with a name that matches the string will
            be removed.
            </summary>
            <param name="entry">The entry.</param>
            <returns>
            true if the object was removed.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapAttributeSet.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapMessage">
            <summary>
            The base class for Ldap request and response messages.
            Subclassed by response messages used in asynchronous operations.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapMessage.#ctor(Unosquare.Swan.Networking.Ldap.LdapOperation,Unosquare.Swan.Networking.Ldap.IRfcRequest,Unosquare.Swan.Networking.Ldap.LdapControl[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage"/> class.
            Creates an LdapMessage when sending a protocol operation and sends
            some optional controls with the message.
            </summary>
            <param name="type">The type.</param>
            <param name="op">The operation type of message.</param>
            <param name="controls">The controls to use with the operation.</param>
            <seealso cref="P:Unosquare.Swan.Networking.Ldap.LdapMessage.Type"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapMessage.#ctor(Unosquare.Swan.Networking.Ldap.RfcLdapMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage"/> class.
            Creates an Rfc 2251 LdapMessage when the libraries receive a response
            from a command.
            </summary>
            <param name="message">A response message.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapMessage.Controls">
            <summary>
            Returns any controls in the message.
            </summary>
            <value>
            The controls.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapMessage.MessageId">
            <summary>
            Returns the message ID.  The message ID is an integer value
            identifying the Ldap request and its response.
            </summary>
            <value>
            The message identifier.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapMessage.Request">
            <summary>
            Indicates whether the message is a request or a response
            </summary>
            <value>
              <c>true</c> if request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapMessage.Tag">
            <summary>
            Retrieves the identifier tag for this message.
            An identifier can be associated with a message with the
            <c>setTag</c> method.
            Tags are set by the application and not by the API or the server.
            If a server response <c>isRequest() == false</c> has no tag,
            the tag associated with the corresponding server request is used.
            </summary>
            <value>
            The tag.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapModificationOp">
            <summary>
            Ldap Modification Operators
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapModificationOp.Add">
            <summary>
            Adds the listed values to the given attribute, creating
            the attribute if it does not already exist.
            ADD = 0
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapModificationOp.Delete">
            <summary>
            Deletes the listed values from the given attribute,
            removing the entire attribute (1) if no values are listed or
            (2) if all current values of the attribute are listed for
            deletion.
            DELETE = 1
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapModificationOp.Replace">
            <summary>
            Replaces all existing values of the given attribute
            with the new values listed, creating the attribute if it
            does not already exist.
            A replace with no value deletes the entire attribute if it
            exists, and is ignored if the attribute does not exist.
            REPLACE = 2
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapModification">
            <summary>
            A single add, delete, or replace operation to an LdapAttribute.
            An LdapModification contains information on the type of modification
            being performed, the name of the attribute to be replaced, and the new
            value.  Multiple modifications are expressed as an array of modifications,
            i.e., <c>LdapModification[]</c>.
            An LdapModification or an LdapModification array enable you to modify
            an attribute of an Ldap entry. The entire array of modifications must
            be performed by the server as a single atomic operation in the order they
            are listed. No changes are made to the directory unless all the operations
            succeed. If all succeed, a success result is returned to the application.
            It should be noted that if the connection fails during a modification,
            it is indeterminate whether the modification occurred or not.
            There are three types of modification operations: Add, Delete,
            and Replace.
            <b>Add: </b>Creates the attribute if it doesn't exist, and adds
            the specified values. This operation must contain at least one value, and
            all values of the attribute must be unique.
            <b>Delete: </b>Deletes specified values from the attribute. If no
            values are specified, or if all existing values of the attribute are
            specified, the attribute is removed. Mandatory attributes cannot be
            removed.
            <b>Replace: </b>Creates the attribute if necessary, and replaces
            all existing values of the attribute with the specified values.
            If you wish to keep any existing values of a multi-valued attribute,
            you must include these values in the replace operation.
            A replace operation with no value will remove the entire attribute if it
            exists, and is ignored if the attribute does not exist.
            Additional information on Ldap modifications is available in section 4.6
            of <a href="http://www.ietf.org/rfc/rfc2251.txt">rfc2251.txt</a>
            </summary>
            <seealso cref="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Modify(System.String,Unosquare.Swan.Networking.Ldap.LdapModification[],System.Threading.CancellationToken)"></seealso>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapAttribute"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapModification.#ctor(Unosquare.Swan.Networking.Ldap.LdapModificationOp,Unosquare.Swan.Networking.Ldap.LdapAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapModification" /> class.
            Specifies a modification to be made to an attribute.
            </summary>
            <param name="op">The type of modification to make, which can be
            one of the following:
            <ul><li>
            LdapModification.ADD - The value should be added to
            the attribute
            </li><li>
            LdapModification.DELETE - The value should be removed
            from the attribute
            </li><li>
            LdapModification.REPLACE - The value should replace all
            existing values of the
            attribute
            </li></ul></param>
            <param name="attr">The attribute to modify.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapModification.#ctor(Unosquare.Swan.Networking.Ldap.LdapModificationOp,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapModification"/> class.
            </summary>
            <param name="op">The op.</param>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The attribute value.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapModification.Attribute">
            <summary>
            Returns the attribute to modify, with any existing values.
            </summary>
            <value>
            The attribute.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapModification.Op">
            <summary>
            Returns the type of modification specified by this object.
            The type is one of the following:
            <ul><li>LdapModification.ADD</li><li>LdapModification.DELETE</li><li>LdapModification.REPLACE</li></ul>
            </summary>
            <value>
            The op.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapModifyRequest">
            <summary>
            Modification Request
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.#ctor(System.String,Unosquare.Swan.Networking.Ldap.LdapModification[],Unosquare.Swan.Networking.Ldap.LdapControl[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapModifyRequest"/> class.
            </summary>
            <param name="dn">The dn.</param>
            <param name="modifications">The modifications.</param>
            <param name="control">The control.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.DN">
            <summary>
            Gets the dn.
            </summary>
            <value>
            The dn.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.Modifications">
            <summary>
            Gets the modifications.
            </summary>
            <value>
            The modifications.
            </value>
            <exception cref="T:System.Exception">Modification Exception</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.ToString">
            <summary>
            Return an Asn1 representation of this modify request
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.RfcAttributeTypeAndValues.#ctor(System.String,Unosquare.Swan.Networking.Ldap.Asn1SetOf)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapModifyRequest.RfcAttributeTypeAndValues"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="vals">The vals.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapOperation">
            <summary>
            LDAP Operation
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.BindRequest">
            <summary>
                A bind request operation.
                BIND_REQUEST = 0
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.BindResponse">
            <summary>
                A bind response operation.
                BIND_RESPONSE = 1
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.UnbindRequest">
            <summary>
                An unbind request operation.
                UNBIND_REQUEST = 2
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.SearchRequest">
            <summary>
                A search request operation.
                SEARCH_REQUEST = 3
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.SearchResponse">
            <summary>
                A search response containing data.
                SEARCH_RESPONSE = 4
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.SearchResult">
            <summary>
                A search result message - contains search status.
                SEARCH_RESULT = 5
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.ModifyRequest">
            <summary>
                A modify request operation.
                MODIFY_REQUEST = 6
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.ModifyResponse">
            <summary>
                A modify response operation.
                MODIFY_RESPONSE = 7
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.AbandonRequest">
            <summary>
                An abandon request operation.
                ABANDON_REQUEST = 16
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.SearchResultReference">
            <summary>
                A search result reference operation.
                SEARCH_RESULT_REFERENCE = 19
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.ExtendedRequest">
            <summary>
                An extended request operation.
                EXTENDED_REQUEST = 23
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.ExtendedResponse">
            <summary>
                An extended response operation.
                EXTENDED_RESONSE = 24
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapOperation.IntermediateResponse">
            <summary>
                An intermediate response operation.
                INTERMEDIATE_RESONSE = 25
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Asn1IdentifierTag">
            <summary>
            ASN1 tags
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.Asn1IdentifierTag.Universal">
            <summary>
            Universal tag class.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.Asn1IdentifierTag.Application">
            <summary>
                Application-wide tag class.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.Asn1IdentifierTag.Context">
            <summary>
                Context-specific tag class.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.Asn1IdentifierTag.Private">
            <summary>
                Private-use tag class.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapSearchRequest">
            <summary>
            Represents an Ldap Search request.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.#ctor(System.String,System.Int32,System.String,System.String[],System.Int32,System.Int32,System.Int32,System.Boolean,Unosquare.Swan.Networking.Ldap.LdapControl[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapSearchRequest"/> class.
            </summary>
            <param name="ldapBase">The base distinguished name to search from.</param>
            <param name="scope">The scope of the entries to search. The following
            are the valid options:
            <ul><li>SCOPE_BASE - searches only the base DN</li><li>SCOPE_ONE - searches only entries under the base DN</li><li>
            SCOPE_SUB - searches the base DN and all entries
            within its subtree
            </li></ul></param>
            <param name="filter">The search filter specifying the search criteria.</param>
            <param name="attrs">The names of attributes to retrieve.
            operation exceeds the time limit.</param>
            <param name="dereference">Specifies when aliases should be dereferenced.
            Must be one of the constants defined in
            LdapConstraints, which are DEREF_NEVER,
            DEREF_FINDING, DEREF_SEARCHING, or DEREF_ALWAYS.</param>
            <param name="maxResults">The maximum number of search results to return
            for a search request.
            The search operation will be terminated by the server
            with an LdapException.SIZE_LIMIT_EXCEEDED if the
            number of results exceed the maximum.</param>
            <param name="serverTimeLimit">The maximum time in seconds that the server
            should spend returning search results. This is a
            server-enforced limit.  A value of 0 means
            no time limit.</param>
            <param name="typesOnly">If true, returns the names but not the values of
            the attributes found.  If false, returns the
            names and values for attributes found.</param>
            <param name="cont">Any controls that apply to the search request.
            or null if none.</param>
            <seealso cref="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,System.Threading.CancellationToken)"></seealso>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.SearchFilter">
            <summary>
            Retrieves an Iterator object representing the parsed filter for
            this search request.
            The first object returned from the Iterator is an Integer indicating
            the type of filter component. One or more values follow the component
            type as subsequent items in the Iterator. The pattern of Integer
            component type followed by values continues until the end of the
            filter.
            Values returned as a byte array may represent UTF-8 characters or may
            be binary values. The possible Integer components of a search filter
            and the associated values that follow are:
            <ul><li>AND - followed by an Iterator value</li><li>OR - followed by an Iterator value</li><li>NOT - followed by an Iterator value</li><li>
            EQUALITY_MATCH - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array
            </li><li>
            GREATER_OR_EQUAL - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array
            </li><li>
            LESS_OR_EQUAL - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array
            </li><li>
            APPROX_MATCH - followed by the attribute name represented as a
            String, and by the attribute value represented as a byte array
            </li><li>PRESENT - followed by a attribute name respresented as a String</li><li>
            EXTENSIBLE_MATCH - followed by the name of the matching rule
            represented as a String, by the attribute name represented
            as a String, and by the attribute value represented as a
            byte array.
            </li><li>
            SUBSTRINGS - followed by the attribute name represented as a
            String, by one or more SUBSTRING components (INITIAL, ANY,
            or FINAL) followed by the SUBSTRING value.
            </li></ul>
            </summary>
            <value>
            The search filter.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.DN">
            <summary>
                Retrieves the Base DN for a search request.
            </summary>
            <returns>
                the base DN for a search request
            </returns>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.Scope">
            <summary>
            Retrieves the scope of a search request.
            </summary>
            <value>
            The scope.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.Dereference">
            <summary>
            Retrieves the behaviour of dereferencing aliases on a search request.
            </summary>
            <value>
            The dereference.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.MaxResults">
            <summary>
            Retrieves the maximum number of entries to be returned on a search.
            </summary>
            <value>
            The maximum results.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.ServerTimeLimit">
            <summary>
            Retrieves the server time limit for a search request.
            </summary>
            <value>
            The server time limit.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.TypesOnly">
            <summary>
            Retrieves whether attribute values or only attribute types(names) should
            be returned in a search request.
            </summary>
            <value>
              <c>true</c> if [types only]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.Attributes">
            <summary>
            Retrieves an array of attribute names to request for in a search.
            </summary>
            <value>
            The attributes.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.StringFilter">
            <summary>
            Creates a string representation of the filter in this search request.
            </summary>
            <value>
            The string filter.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchRequest.RfcFilter">
            <summary>
            Retrieves an SearchFilter object representing a filter for a search request
            </summary>
            <value>
            The RFC filter.
            </value>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapSearchResults">
            <summary>
            An LdapSearchResults object is returned from a synchronous search
            operation. It provides access to all results received during the
            operation (entries and exceptions).
            </summary>
            <seealso cref="M:Unosquare.Swan.Networking.Ldap.LdapConnection.Search(System.String,System.Int32,System.String,System.String[],System.Boolean,System.Threading.CancellationToken)"></seealso>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapSearchResults.#ctor(Unosquare.Swan.Networking.Ldap.LdapConnection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.LdapSearchResults"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="messageId">The message identifier.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.LdapSearchResults.Count">
            <summary>
            Returns a count of the items in the search result.
            Returns a count of the entries and exceptions remaining in the object.
            If the search was submitted with a batch size greater than zero,
            getCount reports the number of results received so far but not enumerated
            with next().  If batch size equals zero, getCount reports the number of
            items received, since the application thread blocks until all results are
            received.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapSearchResults.HasMore">
            <summary>
            Reports if there are more search results.
            </summary>
            <returns>
            true if there are more search results.
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.LdapSearchResults.Next">
            <summary>
            Returns the next result as an LdapEntry.
            If automatic referral following is disabled or if a referral
            was not followed, next() will throw an LdapReferralException
            when the referral is received.
            </summary>
            <returns>
            The next search result as an LdapEntry.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Next - No more results</exception>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapStatusCode">
            <summary>
            LDAP Connection Sttus Code
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.Success">
            <summary>
            Indicates the requested client operation completed successfully.
            SUCCESS = 0<p />
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.OperationsError">
            <summary>
                Indicates an internal error.
                The server is unable to respond with a more specific error and is
                also unable to properly respond to a request. It does not indicate
                that the client has sent an erroneous message.
                OPERATIONS_ERROR = 1
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ProtocolError">
            <summary>
                Indicates that the server has received an invalid or malformed request
                from the client.
                PROTOCOL_ERROR = 2
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.TimeLimitExceeded">
            <summary>
                Indicates that the operation's time limit specified by either the
                client or the server has been exceeded.
                On search operations, incomplete results are returned.
                TIME_LIMIT_EXCEEDED = 3
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.SizeLimitExceeded">
            <summary>
                Indicates that in a search operation, the size limit specified by
                the client or the server has been exceeded. Incomplete results are
                returned.
                SIZE_LIMIT_EXCEEDED = 4
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.CompareFalse">
            <summary>
                Does not indicate an error condition. Indicates that the results of
                a compare operation are false.
                COMPARE_FALSE = 5
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.CompareTrue">
            <summary>
                Does not indicate an error condition. Indicates that the results of a
                compare operation are true.
                COMPARE_TRUE = 6
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AuthMethodNotSupported">
            <summary>
                Indicates that during a bind operation the client requested an
                authentication method not supported by the Ldap server.
                AUTH_METHOD_NOT_SUPPORTED = 7
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.StrongAuthRequired">
            <summary>
            Indicates a problem with the level of authentication.
            One of the following has occurred:
            <ul><li>
            In bind requests, the Ldap server accepts only strong
            authentication.
            </li><li>
            In a client request, the client requested an operation such as delete
            that requires strong authentication.
            </li><li>
            In an unsolicited notice of disconnection, the Ldap server discovers
            the security protecting the communication between the client and
            server has unexpectedly failed or been compromised.
            </li></ul>
            STRONG_AUTH_REQUIRED = 8
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.LdapPartialResults">
            <summary>
                Returned by some Ldap servers to Ldapv2 clients to indicate that a referral
                has been returned in the error string.
                Ldap_PARTIAL_RESULTS = 9
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.Referral">
            <summary>
                Does not indicate an error condition. In Ldapv3, indicates that the server
                does not hold the target entry of the request, but that the servers in the
                referral field may.
                REFERRAL = 10
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AdminLimitExceeded">
            <summary>
                Indicates that an Ldap server limit set by an administrative authority
                has been exceeded.
                ADMIN_LIMIT_EXCEEDED = 11
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.UnavailableCriticalExtension">
            <summary>
                Indicates that the Ldap server was unable to satisfy a request because
                one or more critical extensions were not available.
                Either the server does not support the control or the control is not
                appropriate for the operation type.
                UNAVAILABLE_CRITICAL_EXTENSION = 12
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ConfidentialityRequired">
            <summary>
                Indicates that the session is not protected by a protocol such as
                Transport Layer Security (TLS), which provides session confidentiality.
                CONFIDENTIALITY_REQUIRED = 13
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.SaslBindInProgress">
            <summary>
                Does not indicate an error condition, but indicates that the server is
                ready for the next step in the process. The client must send the server
                the same SASL mechanism to continue the process.
                SASL_BIND_IN_PROGRESS = 14
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NoSuchAttribute">
            <summary>
                Indicates that the attribute specified in the modify or compare
                operation does not exist in the entry.
                NO_SUCH_ATTRIBUTE = 16
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.UndefinedAttributeType">
            <summary>
                Indicates that the attribute specified in the modify or add operation
                does not exist in the Ldap server's schema.
                UNDEFINED_ATTRIBUTE_TYPE = 17
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InappropriateMatching">
            <summary>
                Indicates that the matching rule specified in the search filter does
                not match a rule defined for the attribute's syntax.
                INAPPROPRIATE_MATCHING = 18
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ConstraintViolation">
            <summary>
                Indicates that the attribute value specified in a modify, add, or
                modify DN operation violates constraints placed on the attribute. The
                constraint can be one of size or content (for example, string only,
                no binary data).
                CONSTRAINT_VIOLATION = 19
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AttributeOrValueExists">
            <summary>
                Indicates that the attribute value specified in a modify or add
                operation already exists as a value for that attribute.
                ATTRIBUTE_OR_VALUE_EXISTS = 20
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InvalidAttributeSyntax">
            <summary>
                Indicates that the attribute value specified in an add, compare, or
                modify operation is an unrecognized or invalid syntax for the attribute.
                INVALID_ATTRIBUTE_SYNTAX = 21
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NoSuchObject">
            <summary>
                Indicates the target object cannot be found.
                This code is not returned on the following operations:
                <ul>
                    <li>
                        Search operations that find the search base but cannot find any
                        entries that match the search filter.
                    </li>
                    <li>Bind operations.</li>
                </ul>
                NO_SUCH_OBJECT = 32
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AliasProblem">
            <summary>
                Indicates that an error occurred when an alias was dereferenced.
                ALIAS_PROBLEM = 33
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InvalidDnSyntax">
            <summary>
                Indicates that the syntax of the DN is incorrect.
                If the DN syntax is correct, but the Ldap server's structure
                rules do not permit the operation, the server returns
                Ldap_UNWILLING_TO_PERFORM.
                INVALID_DN_SYNTAX = 34
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.IsLeaf">
            <summary>
                Indicates that the specified operation cannot be performed on a
                leaf entry.
                This code is not currently in the Ldap specifications, but is
                reserved for this constant.
                IS_LEAF = 35
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AliasDereferencingProblem">
            <summary>
                Indicates that during a search operation, either the client does not
                have access rights to read the aliased object's name or dereferencing
                is not allowed.
                ALIAS_DEREFERENCING_PROBLEM = 36
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InappropriateAuthentication">
            <summary>
                Indicates that during a bind operation, the client is attempting to use
                an authentication method that the client cannot use correctly.
                For example, either of the following cause this error:
                <ul>
                    <li>
                        The client returns simple credentials when strong credentials are
                        required.
                    </li>
                    <li>
                        The client returns a DN and a password for a simple bind when the
                        entry does not have a password defined.
                    </li>
                </ul>
                INAPPROPRIATE_AUTHENTICATION = 48
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InvalidCredentials">
            <summary>
                Indicates that invalid information was passed during a bind operation.
                One of the following occurred:
                <ul>
                    <li> The client passed either an incorrect DN or password.</li>
                    <li>
                        The password is incorrect because it has expired, intruder detection
                        has locked the account, or some other similar reason.
                    </li>
                </ul>
                INVALID_CREDENTIALS = 49
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InsufficientAccessRights">
            <summary>
                Indicates that the caller does not have sufficient rights to perform
                the requested operation.
                INSUFFICIENT_ACCESS_RIGHTS = 50
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.Busy">
            <summary>
                Indicates that the Ldap server is too busy to process the client request
                at this time, but if the client waits and resubmits the request, the
                server may be able to process it then.
                BUSY = 51
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.Unavailable">
            <summary>
                Indicates that the Ldap server cannot process the client's bind
                request, usually because it is shutting down.
                UNAVAILABLE = 52
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.UnwillingToPerform">
            <summary>
                Indicates that the Ldap server cannot process the request because of
                server-defined restrictions.
                This error is returned for the following reasons:
                <ul>
                    <li>The add entry request violates the server's structure rules.</li>
                    <li>
                        The modify attribute request specifies attributes that users
                        cannot modify.
                    </li>
                </ul>
                UNWILLING_TO_PERFORM = 53
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.LoopDetect">
            <summary>
                Indicates that the client discovered an alias or referral loop,
                and is thus unable to complete this request.
                LOOP_DETECT = 54
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NamingViolation">
            <summary>
                Indicates that the add or modify DN operation violates the schema's
                structure rules.
                For example,
                <ul>
                    <li>The request places the entry subordinate to an alias.</li>
                    <li>
                        The request places the entry subordinate to a container that
                        is forbidden by the containment rules.
                    </li>
                    <li>The RDN for the entry uses a forbidden attribute type.</li>
                </ul>
                NAMING_VIOLATION = 64
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ObjectClassViolation">
            <summary>
                Indicates that the add, modify, or modify DN operation violates the
                object class rules for the entry.
                For example, the following types of request return this error:
                <ul>
                    <li>
                        The add or modify operation tries to add an entry without a value
                        for a required attribute.
                    </li>
                    <li>
                        The add or modify operation tries to add an entry with a value for
                        an attribute which the class definition does not contain.
                    </li>
                    <li>
                        The modify operation tries to remove a required attribute without
                        removing the auxiliary class that defines the attribute as required.
                    </li>
                </ul>
                OBJECT_CLASS_VIOLATION = 65
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NotAllowedOnNonleaf">
            <summary>
                Indicates that the requested operation is permitted only on leaf entries.
                For example, the following types of requests return this error:
                <ul>
                    <li>The client requests a delete operation on a parent entry.</li>
                    <li> The client request a modify DN operation on a parent entry.</li>
                </ul>
                NOT_ALLOWED_ON_NONLEAF = 66
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NotAllowedOnRdn">
            <summary>
                Indicates that the modify operation attempted to remove an attribute
                value that forms the entry's relative distinguished name.
                NOT_ALLOWED_ON_RDN = 67
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.EntryAlreadyExists">
            <summary>
                Indicates that the add operation attempted to add an entry that already
                exists, or that the modify operation attempted to rename an entry to the
                name of an entry that already exists.
                ENTRY_ALREADY_EXISTS = 68
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ObjectClassModsProhibited">
            <summary>
                Indicates that the modify operation attempted to modify the structure
                rules of an object class.
                OBJECT_CLASS_MODS_PROHIBITED = 69
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AffectsMultipleDsas">
            <summary>
                Indicates that the modify DN operation moves the entry from one Ldap
                server to another and thus requires more than one Ldap server.
                AFFECTS_MULTIPLE_DSAS = 71
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.Other">
            <summary>
                Indicates an unknown error condition.
                OTHER = 80
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ServerDown">
            <summary>
                Indicates that the Ldap libraries cannot establish an initial connection
                with the Ldap server. Either the Ldap server is down or the specified
                host name or port number is incorrect.
                SERVER_DOWN = 81
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.LocalError">
            <summary>
                Indicates that the Ldap client has an error. This is usually a failed
                dynamic memory allocation error.
                LOCAL_ERROR = 82
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.EncodingError">
            <summary>
                Indicates that the Ldap client encountered errors when encoding an
                Ldap request intended for the Ldap server.
                ENCODING_ERROR = 83
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.DecodingError">
            <summary>
                Indicates that the Ldap client encountered errors when decoding an
                Ldap response from the Ldap server.
                DECODING_ERROR = 84
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.LdapTimeout">
            <summary>
                Indicates that the time limit of the Ldap client was exceeded while
                waiting for a result.
                Ldap_TIMEOUT = 85
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AuthUnknown">
            <summary>
                Indicates that a bind method was called with an unknown
                authentication method.
                AUTH_UNKNOWN = 86
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.FilterError">
            <summary>
                Indicates that the search method was called with an invalid
                search filter.
                FILTER_ERROR = 87
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.UserCancelled">
            <summary>
                Indicates that the user cancelled the Ldap operation.
                USER_CANCELLED = 88
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NoMemory">
            <summary>
                Indicates that a dynamic memory allocation method failed when calling
                an Ldap method.
                NO_MEMORY = 90
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ConnectError">
            <summary>
                Indicates that the Ldap client has lost either its connection or
                cannot establish a connection to the Ldap server.
                CONNECT_ERROR = 91
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.LdapNotSupported">
            <summary>
                Indicates that the requested functionality is not supported by the
                client. For example, if the Ldap client is established as an Ldapv2
                client, the libraries set this error code when the client requests
                Ldapv3 functionality.
                Ldap_NOT_SUPPORTED = 92
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ControlNotFound">
            <summary>
                Indicates that the client requested a control that the libraries
                cannot find in the list of supported controls sent by the Ldap server.
                CONTROL_NOT_FOUND = 93
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.NoResultsReturned">
            <summary>
                Indicates that the Ldap server sent no results.
                NO_RESULTS_RETURNED = 94
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.MoreResultsToReturn">
            <summary>
                Indicates that more results are chained in the result message.
                MORE_RESULTS_TO_RETURN = 95
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ClientLoop">
            <summary>
                Indicates the Ldap libraries detected a loop. Usually this happens
                when following referrals.
                CLIENT_LOOP = 96
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.ReferralLimitExceeded">
            <summary>
                Indicates that the referral exceeds the hop limit. The default hop
                limit is ten.
                The hop limit determines how many servers the client can hop through
                to retrieve data. For example, suppose the following conditions:
                <ul>
                    <li>Suppose the hop limit is two.</li>
                    <li>
                        If the referral is to server D which can be contacted only through
                        server B (1 hop) which contacts server C (2 hops) which contacts
                        server D (3 hops).
                    </li>
                </ul>
                With these conditions, the hop limit is exceeded and the Ldap
                libraries set this code.
                REFERRAL_LIMIT_EXCEEDED = 97
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.InvalidResponse">
            <summary>
                Indicates that the server response to a request is invalid.
                INVALID_RESPONSE = 100
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.AmbiguousResponse">
            <summary>
                Indicates that the server response to a request is ambiguous.
                AMBIGUOUS_RESPONSE = 101
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.TlsNotSupported">
            <summary>
                Indicates that TLS is not supported on the server.
                TLS_NOT_SUPPORTED = 112
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.SslHandshakeFailed">
            <summary>
                Indicates that SSL Handshake could not succeed.
                SSL_HANDSHAKE_FAILED = 113
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.LdapStatusCode.SslProviderNotFound">
            <summary>
                Indicates that SSL Provider could not be found.
                SSL_PROVIDER_NOT_FOUND = 114
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.Tokenizer">
            <summary>
            The class performs token processing from strings
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.Tokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.Tokenizer" /> class.
            Initializes a new class instance with a specified string to process
            and the specified token delimiters to use
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
            <param name="retDel">if set to <c>true</c> [ret delete].</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcMatchingRuleAssertion">
            <summary>
            Represents an Ldap Matching Rule Assertion.
            <pre>
            MatchingRuleAssertion ::= SEQUENCE {
            matchingRule    [1] MatchingRuleId OPTIONAL,
            type            [2] AttributeDescription OPTIONAL,
            matchValue      [3] AssertionValue,
            dnAttributes    [4] BOOLEAN DEFAULT FALSE }
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcAttributeDescriptionList">
            <summary>
            The AttributeDescriptionList is used to list attributes to be returned in
            a search request.
            <pre>
            AttributeDescriptionList ::= SEQUENCE OF
            AttributeDescription
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1SequenceOf" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSearchRequest">
            <summary>
            Represents an Ldap Search Request.
            <pre>
            SearchRequest ::= [APPLICATION 3] SEQUENCE {
            baseObject      LdapDN,
            scope           ENUMERATED {
            baseObject              (0),
            singleLevel             (1),
            wholeSubtree            (2) },
            derefAliases    ENUMERATED {
            neverDerefAliases       (0),
            derefInSearching        (1),
            derefFindingBaseObj     (2),
            derefAlways             (3) },
            sizeLimit       INTEGER (0 .. maxInt),
            timeLimit       INTEGER (0 .. maxInt),
            typesOnly       BOOLEAN,
            filter          Filter,
            attributes      AttributeDescriptionList }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcRequest" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcSearchRequest.GetIdentifier">
            <summary>
            Override getIdentifier to return an application-wide id.
            <pre>
            ID = CLASS: APPLICATION, FORM: CONSTRUCTED, TAG: 3. (0x63)
            </pre>
            </summary>
            <returns>
            Asn1 Identifier
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSubstringFilter">
            <summary>
            Represents an Ldap Substring Filter.
            <pre>
            SubstringFilter ::= SEQUENCE {
            type            AttributeDescription,
            -- at least one must be present
            substrings      SEQUENCE OF CHOICE {
            initial [0] LdapString,
            any     [1] LdapString,
            final   [2] LdapString } }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcAttributeValueAssertion">
            <summary>
            Represents an Ldap Attribute Value Assertion.
            <pre>
            AttributeValueAssertion ::= SEQUENCE {
            attributeDesc   AttributeDescription,
            assertionValue  AssertionValue }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.SubstringOp">
            <summary>
            Substring Operators
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.SubstringOp.Initial">
            <summary>
            Search Filter Identifier for an INITIAL component of a SUBSTRING.
            Note: An initial SUBSTRING is represented as "value*".
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.SubstringOp.Any">
            <summary>
            Search Filter Identifier for an ANY component of a SUBSTRING.
            Note: An ANY SUBSTRING is represented as "*value*".
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.SubstringOp.Final">
            <summary>
            Search Filter Identifier for a FINAL component of a SUBSTRING.
            Note: A FINAL SUBSTRING is represented as "*value".
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.FilterOp">
            <summary>
            Filtering Operators
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.And">
            <summary>
            Identifier for AND component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.Or">
            <summary>
            Identifier for OR component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.Not">
            <summary>
            Identifier for NOT component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.EqualityMatch">
            <summary>
            Identifier for EQUALITY_MATCH component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.Substrings">
            <summary>
            Identifier for SUBSTRINGS component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.GreaterOrEqual">
            <summary>
            Identifier for GREATER_OR_EQUAL component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.LessOrEqual">
            <summary>
            Identifier for LESS_OR_EQUAL component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.Present">
            <summary>
            Identifier for PRESENT component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.ApproxMatch">
            <summary>
            Identifier for APPROX_MATCH component.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.Ldap.FilterOp.ExtensibleMatch">
            <summary>
            Identifier for EXTENSIBLE_MATCH component.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.BindProperties">
            <summary> Encapsulates an Ldap Bind properties</summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.BindProperties.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.BindProperties" /> class.
            </summary>
            <param name="version">The version.</param>
            <param name="dn">The dn.</param>
            <param name="method">The method.</param>
            <param name="anonymous">if set to <c>true</c> [anonymous].</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcControl">
            <summary>
            Represents an Ldap Control.
            <pre>
            Control ::= SEQUENCE {
            controlType             LdapOID,
            criticality             BOOLEAN DEFAULT FALSE,
            controlValue            OCTET STRING OPTIONAL }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcControl.#ctor(System.String,Unosquare.Swan.Networking.Ldap.Asn1Boolean,Unosquare.Swan.Networking.Ldap.Asn1Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcControl"/> class.
            Note: criticality is only added if true, as per RFC 2251 sec 5.1 part
            (4): If a value of a type is its default value, it MUST be
            absent.
            </summary>
            <param name="controlType">Type of the control.</param>
            <param name="criticality">The criticality.</param>
            <param name="controlValue">The control value.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSaslCredentials">
            <summary>
            Represents Ldap Sasl Credentials.
            <pre>
            SaslCredentials ::= SEQUENCE {
            mechanism               LdapString,
            credentials             OCTET STRING OPTIONAL }
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcAuthenticationChoice">
            <summary>
            Represents an Ldap Authentication Choice.
            <pre>
            AuthenticationChoice ::= CHOICE {
            simple                  [0] OCTET STRING,
            -- 1 and 2 reserved
            sasl                    [3] SaslCredentials }
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Choice" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcFilter">
            <summary>
            Represents an Ldap Filter  by parsing an RFC 2254 Search Filter String.
            This filter object can be created from a String or can be built up
            programatically by adding filter components one at a time.  Existing filter
            components can be iterated though.
            Each filter component has an integer identifier defined in this class.
            The following are basic filter components: {EQUALITY_MATCH},
            {GREATER_OR_EQUAL}, {LESS_OR_EQUAL}, {SUBSTRINGS},
            {PRESENT}, {APPROX_MATCH}, {EXTENSIBLE_MATCH}.
            More filters can be nested together into more complex filters with the
            following filter components: {AND}, {OR}, {NOT}
            Substrings can have three components:
            <pre>
            Filter ::= CHOICE {
            and             [0] SET OF Filter,
            or              [1] SET OF Filter,
            not             [2] Filter,
            equalityMatch   [3] AttributeValueAssertion,
            substrings      [4] SubstringFilter,
            greaterOrEqual  [5] AttributeValueAssertion,
            lessOrEqual     [6] AttributeValueAssertion,
            present         [7] AttributeDescription,
            approxMatch     [8] AttributeValueAssertion,
            extensibleMatch [9] MatchingRuleAssertion }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Choice" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.StartSubstrings(System.String)">
            <summary>
            Creates and addes a substrings filter component.
            startSubstrings must be immediatly followed by at least one
            <c>AddSubstring</c> method and one <c>EndSubstrings</c> method
            </summary>
            <param name="attrName">Name of the attribute.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.AddSubstring(Unosquare.Swan.Networking.Ldap.SubstringOp,System.SByte[])">
            <summary>
            Adds a Substring component of initial, any or final substring matching.
            This method can be invoked only if startSubString was the last filter-
            building method called.  A substring is not required to have an 'INITIAL'
            substring.  However, when a filter contains an 'INITIAL' substring only
            one can be added, and it must be the first substring added. Any number of
            'ANY' substrings can be added. A substring is not required to have a
            'FINAL' substrings either.  However, when a filter does contain a 'FINAL'
            substring only one can be added, and it must be the last substring added.
            </summary>
            <param name="type">Substring type: INITIAL | ANY | FINAL]</param>
            <param name="values">The value renamed.</param>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">
            Attempt to add an invalid " + "substring type
            or
            Attempt to add an initial " + "substring match after the first substring
            or
            Attempt to add a substring " + "match after a final substring match
            or
            A call to addSubstring occured " + "without calling startSubstring
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.EndSubstrings">
            <summary>
            Completes a SubString filter component.
            </summary>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">
            Empty substring filter
            or
            Missmatched ending of substrings
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.AddAttributeValueAssertion(Unosquare.Swan.Networking.Ldap.FilterOp,System.String,System.SByte[])">
            <summary>
            Creates and adds an AttributeValueAssertion to the filter.
            </summary>
            <param name="rfcType">Filter type: EQUALITY_MATCH | GREATER_OR_EQUAL
            | LESS_OR_EQUAL | APPROX_MATCH ]</param>
            <param name="attrName">Name of the attribute to be asserted</param>
            <param name="valueArray">Value of the attribute to be asserted</param>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">
            Cannot insert an attribute assertion in a substring
            or
            Invalid filter type for AttributeValueAssertion
            </exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.AddPresent(System.String)">
            <summary>
            Creates and adds a present matching to the filter.
            </summary>
            <param name="attrName">Name of the attribute to check for presence.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.StartNestedFilter(Unosquare.Swan.Networking.Ldap.FilterOp)">
            <summary>
            Creates and adds the Asn1Tagged value for a nestedFilter: AND, OR, or
            NOT.
            Note that a Not nested filter can only have one filter, where AND
            and OR do not
            </summary>
            <param name="rfcType">Filter type:
            [AND | OR | NOT]</param>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">Attempt to create a nested filter other than AND, OR or NOT</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.EndNestedFilter(Unosquare.Swan.Networking.Ldap.FilterOp)">
            <summary>
            Completes a nested filter and checks for the valid filter type.
            </summary>
            <param name="rfcType">Type of filter to complete.</param>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">Mismatched ending of nested filter</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.GetFilterIterator">
            <summary>
            Creates an iterator over the preparsed segments of a filter.
            The first object returned by an iterator is an integer indicating the
            type of filter components.  Subseqence values are returned.  If a
            component is of type 'AND' or 'OR' or 'NOT' then the value
            returned is another iterator.  This iterator is used by ToString.
            </summary>
            <returns>
            Iterator over filter segments
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.FilterToString">
            <summary>
            Creates and returns a String representation of this filter.
            </summary>
            <returns>Filtered string.</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcFilter.UnescapeString(System.String)">
            <summary>
            Replace escaped hex digits with the equivalent binary representation.
            Assume either V2 or V3 escape mechanisms:
            V2: \*,  \(,  \),  \\.
            V3: \2A, \28, \29, \5C, \00.
            </summary>
            <param name="value">The string renamed.</param>
            <returns>
            octet-string encoding of the specified string.
            </returns>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">Invalid Escape</exception>
            <exception cref="T:System.Exception">UTF-8 String encoding not supported by JVM</exception>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">The exception.</exception>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcFilter.FilterTokenizer.OpOrAttr">
            <summary>
            Reads either an operator, or an attribute, whichever is
            next in the filter string.
            If the next component is an attribute, it is read and stored in the
            attr field of this class which may be retrieved with getAttr()
            and a -1 is returned. Otherwise, the int value of the operator read is
            returned.
            </summary>
            <value>
            The op or attribute.
            </value>
            <exception cref="T:Unosquare.Swan.Exceptions.LdapException">Unexpect end</exception>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcFilter.FilterIterator">
            <summary>
            This inner class wrappers the Search Filter with an iterator.
            This iterator will give access to all the individual components
            preparsed.  The first call to next will return an Integer identifying
            the type of filter component.  Then the component values will be returned
            AND, NOT, and OR components values will be returned as Iterators.
            </summary>
            <seealso cref="T:System.Collections.IEnumerator" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.LdapSearchResult">
            <summary>
            Encapsulates a single search result that is in response to an asynchronous
            search operation.
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.LdapMessage" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSearchResultReference">
            <summary>
            Represents an Ldap Search Result Reference.
            <pre>
            SearchResultReference ::= [APPLICATION 19] SEQUENCE OF LdapURL
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1SequenceOf" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcSearchResultReference.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcSearchResultReference"/> class.
            The only time a client will create a SearchResultReference is when it is
            decoding it from an InputStream
            </summary>
            <param name="dec">The decimal.</param>
            <param name="stream">The in renamed.</param>
            <param name="len">The length.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcExtendedResponse">
            <summary>
            Represents an Ldap Extended Response.
            <pre>
            ExtendedResponse ::= [APPLICATION 24] SEQUENCE {
            COMPONENTS OF LdapResult,
            responseName     [10] LdapOID OPTIONAL,
            response         [11] OCTET STRING OPTIONAL }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcResponse" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcExtendedResponse.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcExtendedResponse"/> class.
            The only time a client will create a ExtendedResponse is when it is
            decoding it from an InputStream
            </summary>
            <param name="dec">The decimal.</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcBindResponse">
            <summary>
            Represents and Ldap Bind Response.
            <pre>
            BindResponse ::= [APPLICATION 1] SEQUENCE {
            COMPONENTS OF LdapResult,
            serverSaslCreds    [7] OCTET STRING OPTIONAL }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcResponse" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcBindResponse.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcBindResponse"/> class.
            The only time a client will create a BindResponse is when it is
            decoding it from an InputStream
            Note: If serverSaslCreds is included in the BindResponse, it does not
            need to be decoded since it is already an OCTET STRING.
            </summary>
            <param name="dec">The decimal.</param>
            <param name="stream">The in renamed.</param>
            <param name="len">The length.</param>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcIntermediateResponse">
            <summary>
            Represents an LDAP Intermediate Response.
            IntermediateResponse ::= [APPLICATION 25] SEQUENCE {
            COMPONENTS OF LDAPResult, note: only present on incorrectly
            encoded response from pre Falcon-sp1 server
            responseName     [10] LDAPOID OPTIONAL,
            responseValue    [11] OCTET STRING OPTIONAL }
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcResponse" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcLdapMessage">
            <summary>
            Represents an Ldap Message.
            <pre>
            LdapMessage ::= SEQUENCE {
            messageID       MessageID,
            protocolOp      CHOICE {
            bindRequest     BindRequest,
            bindResponse    BindResponse,
            unbindRequest   UnbindRequest,
            searchRequest   SearchRequest,
            searchResEntry  SearchResultEntry,
            searchResDone   SearchResultDone,
            searchResRef    SearchResultReference,
            modifyRequest   ModifyRequest,
            modifyResponse  ModifyResponse,
            addRequest      AddRequest,
            addResponse     AddResponse,
            delRequest      DelRequest,
            delResponse     DelResponse,
            modDNRequest    ModifyDNRequest,
            modDNResponse   ModifyDNResponse,
            compareRequest  CompareRequest,
            compareResponse CompareResponse,
            abandonRequest  AbandonRequest,
            extendedReq     ExtendedRequest,
            extendedResp    ExtendedResponse },
            controls       [0] Controls OPTIONAL }
            </pre>
            Note: The creation of a MessageID should be hidden within the creation of
            an RfcLdapMessage. The MessageID needs to be in sequence, and has an
            upper and lower limit. There is never a case when a user should be
            able to specify the MessageID for an RfcLdapMessage. The MessageID()
            constructor should be package protected. (So the MessageID value
            isn't arbitrarily run up.)
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.#ctor(Unosquare.Swan.Networking.Ldap.IRfcRequest,Unosquare.Swan.Networking.Ldap.RfcControls)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcLdapMessage"/> class.
            Create an RfcLdapMessage request from input parameters.
            </summary>
            <param name="op">The op.</param>
            <param name="controls">The controls.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.#ctor(Unosquare.Swan.Networking.Ldap.IAsn1Decoder,System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcLdapMessage"/> class.
            Will decode an RfcLdapMessage directly from an InputStream.
            </summary>
            <param name="dec">The decimal.</param>
            <param name="stream">The stream.</param>
            <param name="len">The length.</param>
            <exception cref="T:System.Exception">RfcLdapMessage: Invalid tag: " + protocolOpId.Tag</exception>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.Type">
            <summary> Returns this RfcLdapMessage's message type</summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.Response">
            <summary>
            Returns the response associated with this RfcLdapMessage.
            Can be one of RfcLdapResult, RfcBindResponse, RfcExtendedResponse
            all which extend RfcResponse. It can also be
            RfcSearchResultEntry, or RfcSearchResultReference
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.Controls">
            <summary> Returns the optional Controls for this RfcLdapMessage.</summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.RequestDn">
            <summary> Returns the dn of the request, may be null</summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.RequestingMessage">
            <summary>
            returns the original request in this message
            </summary>
            <value>
            The requesting message.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.GetRequest">
            <summary>
            Returns the request associated with this RfcLdapMessage.
            Throws a class cast exception if the RfcLdapMessage is not a request.
            </summary>
            <returns>The RFC request</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcLdapMessage.IsRequest">
            <summary>
            Determines whether this instance is request.
            </summary>
            <returns>
              <c>true</c> if this instance is request; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcControls">
            <summary>
            Represents Ldap Controls.
            <pre>
            Controls ::= SEQUENCE OF Control
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1SequenceOf" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.IRfcResponse">
            <summary>
            This interface represents RfcLdapMessages that contain a response from a
            server.
            If the protocol operation of the RfcLdapMessage is of this type,
            it contains at least an RfcLdapResult.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IRfcResponse.GetResultCode">
            <summary>
            Gets the result code.
            </summary>
            <returns>Asn1Enumerated</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IRfcResponse.GetMatchedDN">
            <summary>
            Gets the matched dn.
            </summary>
            <returns>RfcLdapDN</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IRfcResponse.GetErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <returns>RfcLdapString</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IRfcResponse.GetReferral">
            <summary>
            Gets the referral.
            </summary>
            <returns>Asn1SequenceOf</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.IRfcRequest">
            <summary>
            This interface represents Protocol Operations that are requests from a
            client.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.IRfcRequest.GetRequestDN">
            <summary>
            Builds a new request using the data from the this object.
            </summary>
            <returns>A <see cref="T:System.String" /></returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcLdapResult">
            <summary>
            Represents an LdapResult.
            <pre>
            LdapResult ::= SEQUENCE {
            resultCode      ENUMERATED {
            success                      (0),
            operationsError              (1),
            protocolError                (2),
            timeLimitExceeded            (3),
            sizeLimitExceeded            (4),
            compareFalse                 (5),
            compareTrue                  (6),
            authMethodNotSupported       (7),
            strongAuthRequired           (8),
            -- 9 reserved --
            referral                     (10),  -- new
            adminLimitExceeded           (11),  -- new
            unavailableCriticalExtension (12),  -- new
            confidentialityRequired      (13),  -- new
            saslBindInProgress           (14),  -- new
            noSuchAttribute              (16),
            undefinedAttributeType       (17),
            inappropriateMatching        (18),
            constraintViolation          (19),
            attributeOrValueExists       (20),
            invalidAttributeSyntax       (21),
            -- 22-31 unused --
            noSuchObject                 (32),
            aliasProblem                 (33),
            invalidDNSyntax              (34),
            -- 35 reserved for undefined isLeaf --
            aliasDereferencingProblem    (36),
            -- 37-47 unused --
            inappropriateAuthentication  (48),
            invalidCredentials           (49),
            insufficientAccessRights     (50),
            busy                         (51),
            unavailable                  (52),
            unwillingToPerform           (53),
            loopDetect                   (54),
            -- 55-63 unused --
            namingViolation              (64),
            objectClassViolation         (65),
            notAllowedOnNonLeaf          (66),
            notAllowedOnRDN              (67),
            entryAlreadyExists           (68),
            objectClassModsProhibited    (69),
            -- 70 reserved for CLdap --
            affectsMultipleDSAs          (71), -- new
            -- 72-79 unused --
            other                        (80) },
            -- 81-90 reserved for APIs --
            matchedDN       LdapDN,
            errorMessage    LdapString,
            referral        [3] Referral OPTIONAL }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcResponse" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSearchResultDone">
            <summary>
            Represents an Ldap Search Result Done Response.
            <pre>
            SearchResultDone ::= [APPLICATION 5] LdapResult
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.RfcLdapResult" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcSearchResultEntry">
            <summary>
            Represents an Ldap Search Result Entry.
            <pre>
            SearchResultEntry ::= [APPLICATION 4] SEQUENCE {
            objectName      LdapDN,
            attributes      PartialAttributeList }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcMessageID">
            <summary>
            Represents an Ldap Message ID.
            <pre>
            MessageID ::= INTEGER (0 .. maxInt)
            maxInt INTEGER ::= 2147483647 -- (2^^31 - 1) --
            Note: The creation of a MessageID should be hidden within the creation of
            an RfcLdapMessage. The MessageID needs to be in sequence, and has an
            upper and lower limit. There is never a case when a user should be
            able to specify the MessageID for an RfcLdapMessage. The MessageID()
            class should be package protected. (So the MessageID value isn't
            arbitrarily run up.)
            </pre></summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Integer" />
        </member>
        <member name="M:Unosquare.Swan.Networking.Ldap.RfcMessageID.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.Ldap.RfcMessageID"/> class.
            Creates a MessageID with an auto incremented Asn1Integer value.
            Bounds: (0 .. 2,147,483,647) (2^^31 - 1 or Integer.MAX_VALUE)
            MessageID zero is never used in this implementation.  Always
            start the messages with one.
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.Ldap.RfcModifyRequest">
            <summary>
            Represents an Ldap Modify Request.
            <pre>
            ModifyRequest ::= [APPLICATION 6] SEQUENCE {
            object          LdapDN,
            modification    SEQUENCE OF SEQUENCE {
            operation       ENUMERATED {
            add     (0),
            delete  (1),
            replace (2) },
            modification    AttributeTypeAndValues } }
            </pre>
            </summary>
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.Asn1Sequence" />
            <seealso cref="T:Unosquare.Swan.Networking.Ldap.IRfcRequest" />
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpClient">
            <summary>
            Represents a basic SMTP client that is capable of submitting messages to an SMTP server.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpClient" /> class.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentNullException">host</exception>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Credentials">
            <summary>
            Gets or sets the credentials. No credentials will be used if set to null.
            </summary>
            <value>
            The credentials.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Host">
            <summary>
            Gets or sets the hostname to connect to.
            </summary>
            <value>
            The host.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.Port">
            <summary>
            Gets or sets the port on which the server expects the connection.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.EnableSsl">
            <summary>
            Gets or sets a value indicating whether the SSL is enabled.
            If set to false, communication between client and server will not be secured.
            </summary>
            <value>
              <c>true</c> if [enable SSL]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpClient.ClientHostname">
            <summary>
            Gets or sets the name of the client that gets announced to the server.
            </summary>
            <value>
            The client hostname.
            </value>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.ValidateReply(System.String,System.String)">
            <summary>
            Parses and verifies the server reply. If the reply is not positive or cannot be parsed,
            it will throw an SmtpException
            </summary>
            <param name="replyText">The reply text.</param>
            <param name="sessionId">The session id.</param>
            <exception cref="T:System.Net.Mail.SmtpException">Defines an SMTP Exceptions class</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage,System.String)">
            <summary>
            Sends an email message asynchronously.
            </summary>
            <param name="message">The message.</param>
            <param name="sessionId">The session identifier.</param>
            <returns>A task that represents the asynchronous of send email operation</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.SendMailAsync(Unosquare.Swan.Networking.SmtpSessionState,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an email message using a session state object.
            Credentials, Enable SSL and Client Hostname are NOT taken from the state object but
            rather from the properties of this class.
            </summary>
            <param name="sessionState">The state.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous of send email operation
            </returns>
            <exception cref="T:System.ArgumentNullException">sessionState</exception>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpClient.SendMailAsync(System.Collections.Generic.IEnumerable{Unosquare.Swan.Networking.SmtpSessionState},System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an array of email messages using a session state object.
            Credentials, Enable SSL and Client Hostname are NOT taken from the state object but
            rather from the properties of this class.
            </summary>
            <param name="sessionStates">The session states.</param>
            <param name="sessionId">The session identifier.</param>
            <param name="ct">The cancellation token.</param>
            <returns>
            A task that represents the asynchronous of send email operation
            </returns>
            <exception cref="T:System.ArgumentNullException">sessionStates</exception>
            <exception cref="T:System.Security.SecurityException">Could not upgrade the channel to SSL.</exception>
            <exception cref="T:System.Net.Mail.SmtpException">Defines an SMTP Exceptions class</exception>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpDefinitions">
            <summary>
            Contains useful constants and definitions
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpDefinitions.SmtpDataCommandTerminator">
            <summary>
            The string sequence that delimits the end of the DATA command
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpDefinitions.SmtpAuthMethods">
            <summary>
            Lists the AUTH methods supported by default.
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpDefinitions.SmtpAuthMethods.Plain">
            <summary>
            The plain method
            </summary>
        </member>
        <member name="F:Unosquare.Swan.Networking.SmtpDefinitions.SmtpAuthMethods.Login">
            <summary>
            The login method
            </summary>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpServerReply">
            <summary>
            Represents an SMTP server response object
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="statusCode">The status code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="statusCode">The status code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpServerReply"/> class.
            </summary>
            <param name="responseCode">The response code.</param>
            <param name="content">The content.</param>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.CommandUnrecognized">
            <summary>
            Gets the command unrecognized reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SyntaxErrorArguments">
            <summary>
            Gets the syntax error arguments reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.CommandNotImplemented">
            <summary>
            Gets the command not implemented reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.BadSequenceOfCommands">
            <summary>
            Gets the bad sequence of commands reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ProtocolViolation">
            <summary>
            Gets the protocol violation reply.
            </summary>=
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SystemStatusBye">
            <summary>
            Gets the system status bye reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.SystemStatusHelp">
            <summary>
            Gets the system status help reply.
            </summary>=
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.BadSyntaxCommandEmpty">
            <summary>
            Gets the bad syntax command empty reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.Ok">
            <summary>
            Gets the OK reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.AuthorizationRequired">
            <summary>
            Gets the authorization required reply.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCodeSeverity">
            <summary>
            Gets the response severity.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCodeCategory">
            <summary>
            Gets the response category.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.ReplyCode">
            <summary>
            Gets the numeric response code.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.EnhancedStatusCode">
            <summary>
            Gets the enhanced status code.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.Content">
            <summary>
            Gets the content.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.IsValid">
            <summary>
            Returns true if the response code is between 200 and 599
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpServerReply.IsPositive">
            <summary>
            Gets a value indicating whether this instance is positive.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.Parse(System.String)">
            <summary>
            Parses the specified text into a Server Reply for thorough analysis.
            </summary>
            <param name="text">The text.</param>
            <returns>A new instance of SMTP server response object</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpServerReply.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.SmtpSessionState">
            <summary>
            Represents the state of an SMTP session associated with a client
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.Swan.Networking.SmtpSessionState"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.DataBuffer">
            <summary>
            Gets the contents of the data buffer.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.HasInitiated">
            <summary>
            Gets or sets a value indicating whether this instance has initiated.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.SupportsExtensions">
            <summary>
            Gets or sets a value indicating whether the current session supports extensions.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.ClientHostname">
            <summary>
            Gets or sets the client hostname.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsInDataMode">
            <summary>
            Gets or sets a value indicating whether the session is currently receiving DATA
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.SenderAddress">
            <summary>
            Gets or sets the sender address.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Recipients">
            <summary>
            Gets the recipients.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.ExtendedData">
            <summary>
            Gets or sets the extended data supporting any additional field for storage by a responder implementation.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsInAuthMode">
            <summary>
            Gets or sets a value indicating whether this instance is in authentication mode.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Username">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.Password">
            <summary>
            Gets or sets the password.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.HasProvidedUsername">
            <summary>
            Gets a value indicating whether this instance has provided username.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether this instance is authenticated.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.AuthMode">
            <summary>
            Gets or sets the authentication mode.
            </summary>
        </member>
        <member name="P:Unosquare.Swan.Networking.SmtpSessionState.IsChannelSecure">
            <summary>
            Gets or sets a value indicating whether this instance is channel secure.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.ResetAuthentication">
            <summary>
            Resets the authentication state.
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.ResetEmail">
            <summary>
            Resets the data mode to false, clears the recipients, the sender address and the data buffer
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.Reset(System.Boolean)">
            <summary>
            Resets the state table entirely
            </summary>
            <param name="clearExtensionData">if set to <c>true</c> [clear extension data].</param>
        </member>
        <member name="M:Unosquare.Swan.Networking.SmtpSessionState.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A clone</returns>
        </member>
        <member name="T:Unosquare.Swan.Networking.SnmpClient">
            <summary>
            Represents a little SNMP client based on http://www.java2s.com/Code/CSharp/Network/SimpleSNMP.htm
            </summary>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Discover(System.Int32)">
            <summary>
            Discovers the specified SNMP time out.
            </summary>
            <param name="snmpTimeOut">The SNMP time out.</param>
            <returns>An array of network endpoint as an IP address and a port number</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetPublicName(System.Net.IPEndPoint)">
            <summary>
            Gets the name of the public.
            </summary>
            <param name="host">The host.</param>
            <returns>
            A string that contains the results of decoding the specified sequence 
            of bytes ref=GetString"
            </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetUptime(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the uptime.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns>
             A time interval that represents a specified number of seconds, 
             where the specification is accurate to the nearest millisecond
             </returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.GetString(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns>A <see cref="T:System.String" /> that contains the results of decoding the specified sequence of bytes</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Get(System.Net.IPEndPoint,System.String)">
            <summary>
            Gets the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="mibstring">The mibstring.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
        </member>
        <member name="M:Unosquare.Swan.Networking.SnmpClient.Get(System.String,System.Net.IPEndPoint,System.String,System.String)">
            <summary>
            Gets the specified request.
            </summary>
            <param name="request">The request.</param>
            <param name="host">The host.</param>
            <param name="community">The community.</param>
            <param name="mibstring">The mibstring.</param>
            <returns>A byte array containing the results of encoding the specified set of characters</returns>
        </member>
    </members>
</doc>
