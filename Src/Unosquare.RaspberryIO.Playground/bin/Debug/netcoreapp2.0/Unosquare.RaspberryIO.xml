<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Unosquare.RaspberryIO</name>
    </assembly>
    <members>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraColor">
            <summary>
            A simple RGB color class to represent colors in RGB and YUV colorspaces.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Camera.CameraColor"/> class.
            </summary>
            <param name="r">The red.</param>
            <param name="g">The green.</param>
            <param name="b">The blue.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraColor.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Camera.CameraColor"/> class.
            </summary>
            <param name="r">The red.</param>
            <param name="g">The green.</param>
            <param name="b">The blue.</param>
            <param name="name">The well-known color name.</param>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.Name">
            <summary>
            Gets the well-known color name.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.R">
            <summary>
            Gets the red byte.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.G">
            <summary>
            Gets the green byte.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.B">
            <summary>
            Gets the blue byte.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.RGB">
            <summary>
            Gets the RGB byte array (3 bytes).
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.YUV">
            <summary>
            Gets the YUV byte array (3 bytes).
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraColor.ToHex(System.Byte[])">
            <summary>
            Returns a hexadecimal representation of the data byte array
            </summary>
            <param name="data">The data.</param>
            <returns>A string</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraColor.ToRgbHex(System.Boolean)">
            <summary>
            Returns a hexadecimal representation of the RGB byte array.
            Preceded by 0x and all in lowercase
            </summary>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <returns>A string</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraColor.ToYuvHex(System.Boolean)">
            <summary>
            Returns a hexadecimal representation of the YUV byte array.
            Preceded by 0x and all in lowercase
            </summary>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <returns>A string</returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.White">
            <summary>
            Gets the predefined white color.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.Red">
            <summary>
            Gets the predefined red color.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.Green">
            <summary>
            Gets the predefined green color.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.Blue">
            <summary>
            Gets the predefined blue color.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraColor.Black">
            <summary>
            Gets the predefined black color.
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraController">
            <summary>
            The Raspberry Pi's camera controller wrapping raspistill and raspivid programs.
            This class is a singleton
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraController.IsBusy">
            <summary>
            Gets a value indicating whether the camera module is busy.
            </summary>
            <value>
              <c>true</c> if this instance is busy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.CaptureImageAsync(Unosquare.RaspberryIO.Camera.CameraStillSettings,System.Threading.CancellationToken)">
            <summary>
            Captures an image asynchronously.
            </summary>
            <param name="settings">The settings.</param>
            <param name="ct">The ct.</param>
            <returns>The image bytes</returns>
            <exception cref="T:System.InvalidOperationException">Cannot use camera module because it is currently busy.</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.CaptureImage(Unosquare.RaspberryIO.Camera.CameraStillSettings)">
            <summary>
            Captures an image.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The image bytes</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.CaptureImageJpegAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Captures a JPEG encoded image asynchronously at 90% quality.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="ct">The ct.</param>
            <returns>The image bytes</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.CaptureImageJpeg(System.Int32,System.Int32)">
            <summary>
            Captures a JPEG encoded image at 90% quality.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>The image bytes</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.OpenVideoStream(System.Action{System.Byte[]},System.Action)">
            <summary>
            Opens the video stream with a timeout of 0 (running indefinitely) at 1080p resolution, variable bitrate and 25 FPS.
            No preview is shown
            </summary>
            <param name="onDataCallback">The on data callback.</param>
            <param name="onExitCallback">The on exit callback.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.OpenVideoStream(Unosquare.RaspberryIO.Camera.CameraVideoSettings,System.Action{System.Byte[]},System.Action)">
            <summary>
            Opens the video stream with the supplied settings. Capture Timeout Milliseconds has to be 0 or greater
            </summary>
            <param name="settings">The settings.</param>
            <param name="onDataCallback">The on data callback.</param>
            <param name="onExitCallback">The on exit callback.</param>
            <exception cref="T:System.InvalidOperationException">Cannot use camera module because it is currently busy.</exception>
            <exception cref="T:System.ArgumentException">CaptureTimeoutMilliseconds</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraController.CloseVideoStream">
            <summary>
            Closes the video stream of a video stream is open.
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraRect">
            <summary>
            Defines the Raspberry Pi camera's sensor ROI (Region of Interest)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraRect.Default">
            <summary>
            The default ROI which is the entire area.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraRect.X">
            <summary>
            Gets or sets the x in relative coordinates. (0.0 to 1.0)
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraRect.Y">
            <summary>
            Gets or sets the y location in relative coordinates.  (0.0 to 1.0)
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraRect.W">
            <summary>
            Gets or sets the width in relative coordinates.  (0.0 to 1.0)
            </summary>
            <value>
            The w.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraRect.H">
            <summary>
            Gets or sets the height in relative coordinates.  (0.0 to 1.0)
            </summary>
            <value>
            The h.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraRect.Clamp">
            <summary>
            Clamps the members of this ROI to their minimum and maximum values
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraRect.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equal to the default (The entire area).
            </summary>
            <value>
            <c>true</c> if this instance is default; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraRect.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraSettingsBase">
            <summary>
            A base class to implement raspistill and raspivid wrappers
            Full documentation available at
            https://www.raspberrypi.org/documentation/raspbian/applications/camera.md
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraSettingsBase.Ci">
            <summary>
            The Invariant Culture shorthand
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureTimeoutMilliseconds">
            <summary>
            Gets or sets the timeout milliseconds.
            Default value is 5000
            Recommended value is at least 300 in order to let the light collectors open
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureDisplayPreview">
            <summary>
            Gets or sets a value indicating whether or not to show a preview window on the screen
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureDisplayPreviewInFullScreen">
            <summary>
            Gets or sets a value indicating whether a preview window is shown in full screen  mode if enabled
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureVideoStabilizationEnabled">
            <summary>
            Gets or sets a value indicating whether video stabilization should be enabled.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureDisplayPreviewOpacity">
            <summary>
            Gets or sets the display preview opacity only if the display preview property is enabled.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureSensorRoi">
            <summary>
            Gets or sets the capture sensor region of interest in relative coordinates.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureShutterSpeedMicroseconds">
            <summary>
            Gets or sets the capture shutter speed in microseconds.
            Default -1, Range 0 to 6000000 (equivalent to 6 seconds)
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureExposure">
            <summary>
            Gets or sets the exposure mode.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureExposureCompensation">
            <summary>
            Gets or sets the picture EV compensation. Default is 0, Range is -10 to 10
            Camera exposure compensation is commonly stated in terms of EV units; 
            1 EV is equal to one exposure step (or stop), corresponding to a doubling of exposure. 
            Exposure can be adjusted by changing either the lens f-number or the exposure time; 
            which one is changed usually depends on the camera's exposure mode.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureMeteringMode">
            <summary>
            Gets or sets the capture metering mode.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureWhiteBalanceControl">
            <summary>
            Gets or sets the automatic white balance mode. By default it is set to Auto
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureWhiteBalanceGainBlue">
            <summary>
            Gets or sets the capture white balance gain on the blue channel. Example: 1.25
            Only takes effect if White balance control is set to off.
            Default is 0
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureWhiteBalanceGainRed">
            <summary>
            Gets or sets the capture white balance gain on the red channel. Example: 1.75
            Only takes effect if White balance control is set to off.
            Default is 0
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureDynamicRangeCompensation">
            <summary>
            Gets or sets the dynamic range compensation.
            DRC changes the images by increasing the range of dark areas, and decreasing the brighter areas. This can improve the image in low light areas.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureWidth">
            <summary>
            Gets or sets the width of the picture to take.
            Less than or equal to 0 in either width or height means maximum resolution available.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CaptureHeight">
            <summary>
            Gets or sets the height of the picture to take.
            Less than or equal to 0 in either width or height means maximum resolution available.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageSharpness">
            <summary>
            Gets or sets the picture sharpness. Default is 0, Range form -100 to 100
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageContrast">
            <summary>
            Gets or sets the picture contrast. Default is 0, Range form -100 to 100
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageBrightness">
            <summary>
            Gets or sets the picture brightness. Default is 50, Range form 0 to 100
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageSaturation">
            <summary>
            Gets or sets the picture saturation. Default is 0, Range form -100 to 100
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageISO">
            <summary>
            Gets or sets the picture ISO. Default is -1 Range is 100 to 800
            The higher the value, the more light the sensor absorbs
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageEffect">
            <summary>
            Gets or sets the image capture effect to be applied.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageColorEffectU">
            <summary>
            Gets or sets the color effect U coordinates. 
            Default is -1, Range is 0 to 255
            128:128 should be effectively a monochrome image.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageColorEffectV">
            <summary>
            Gets or sets the color effect V coordinates. 
            Default is -1, Range is 0 to 255
            128:128 should be effectively a monochrome image.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageRotation">
            <summary>
            Gets or sets the image rotation. Default is no rotation
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageFlipHorizontally">
            <summary>
            Gets or sets a value indicating whether the image should be flipped horizontally.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageFlipVertically">
            <summary>
            Gets or sets a value indicating whether the image should be flipped vertically.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageAnnotations">
            <summary>
            Gets or sets the image annotations using a bitmask (or flags) notation.
            Apply a bitwise OR to the enumeration to include multiple annotations
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageAnnotationsText">
            <summary>
            Gets or sets the image annotations text.
            Text may include date/time placeholders by using the '%' character, as used by strftime.
            Example: ABC %Y-%m-%d %X will output ABC 2015-10-28 20:09:33
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageAnnotationFontSize">
            <summary>
            Gets or sets the font size of the text annotations
            Default is -1, range is 6 to 160
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageAnnotationFontColor">
            <summary>
            Gets or sets the color of the text annotations.
            </summary>
            <value>
            The color of the image annotation font.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.ImageAnnotationBackground">
            <summary>
            Gets or sets the background color for text annotations.
            </summary>
            <value>
            The image annotation background.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CommandName">
            <summary>
            Gets the command file executable.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraSettingsBase.CreateProcessArguments">
            <summary>
            Creates the process arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraStillSettings">
            <summary>
            Defines a wrapper for the raspistill program and its settings (command-line arguments)
            </summary>
            <seealso cref="T:Unosquare.RaspberryIO.Camera.CameraSettingsBase" />
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CommandName">
            <summary>
            Gets the command file executable.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CaptureDisplayPreviewAtResolution">
            <summary>
            Gets or sets a value indicating whether the preview window (if enabled) uses native capture resolution
            This may slow down preview FPS
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CaptureEncoding">
            <summary>
            Gets or sets the encoding format the hardware will use for the output.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CaptureJpegQuality">
            <summary>
            Gets or sets the quality for JPEG only encoding mode.
            Value ranges from 0 to 100
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CaptureJpegIncludeRawBayerMetadata">
            <summary>
            Gets or sets a value indicating whether the JPEG encoder should add raw bayer metadata.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.CaptureJpegExtendedInfo">
            <summary>
            JPEG EXIF data
            Keys and values must be already properly escaped. Otherwise the command will fail.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.HorizontalFlip">
            <summary>
            Gets or sets a value indicating whether [horizontal flip].
            </summary>
            <value>
              <c>true</c> if [horizontal flip]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraStillSettings.VerticalFlip">
            <summary>
            Gets or sets a value indicating whether [vertical flip].
            </summary>
            <value>
              <c>true</c> if [vertical flip]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraStillSettings.CreateProcessArguments">
            <summary>
            Creates the process arguments.
            </summary>
            <returns>The process command line string</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraVideoSettings">
            <summary>
            Represents the raspivid camera settings for video capture functionality
            </summary>
            <seealso cref="T:Unosquare.RaspberryIO.Camera.CameraSettingsBase" />
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CommandName">
            <summary>
            Gets the command file executable.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureBitrate">
            <summary>
            Use bits per second, so 10Mbits/s would be -b 10000000. For H264, 1080p30 a high quality bitrate would be 15Mbits/s or more. 
            Maximum bitrate is 25Mbits/s (-b 25000000), but much over 17Mbits/s won't show noticeable improvement at 1080p30.
            Default -1
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureFramerate">
            <summary>
            Gets or sets the framerate.
            Default 25, range 2 to 30
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureKeyframeRate">
            <summary>
            Sets the intra refresh period (GoP) rate for the recorded video. H264 video uses a complete frame (I-frame) every intra 
            refresh period, from which subsequent frames are based. This option specifies the number of frames between each I-frame. 
            Larger numbers here will reduce the size of the resulting video, and smaller numbers make the stream less error-prone.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureQuantisation">
            <summary>
            Sets the initial quantisation parameter for the stream. Varies from approximately 10 to 40, and will greatly affect 
            the quality of the recording. Higher values reduce quality and decrease file size. Combine this setting with a 
            bitrate of 0 to set a completely variable bitrate.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureProfile">
            <summary>
            Gets or sets the profile.
            Sets the H264 profile to be used for the encoding.
            Default is Main mode
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureInterleaveHeaders">
            <summary>
            Forces the stream to include PPS and SPS headers on every I-frame. Needed for certain streaming cases 
            e.g. Apple HLS. These headers are small, so don't greatly increase the file size.
            </summary>
            <value>
              <c>true</c> if [interleave headers]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CaptureDisplayPreviewEncoded">
            <summary>
            Switch on an option to display the preview after compression. This will show any compression artefacts in the preview window. In normal operation, 
            the preview will show the camera output prior to being compressed. This option is not guaranteed to work in future releases.
            </summary>
            <value>
            <c>true</c> if [capture display preview encoded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Camera.CameraVideoSettings.CreateProcessArguments">
            <summary>
            Creates the process arguments.
            </summary>
            <returns>A string representing the arguments</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat">
            <summary>
            Defines the available encoding formats for the Raspberry Pi camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.Jpg">
            <summary>
            The JPG
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.Bmp">
            <summary>
            The BMP
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.Gif">
            <summary>
            The GIF
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEncodingFormat.Png">
            <summary>
            The PNG
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraExposureMode">
            <summary>
            Defines the different exposure modes for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Auto">
            <summary>
            The automatic
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Night">
            <summary>
            The night
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.NightPreview">
            <summary>
            The night preview
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Backlight">
            <summary>
            The backlight
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Spotlight">
            <summary>
            The spotlight
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Sports">
            <summary>
            The sports
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Snow">
            <summary>
            The snow
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Beach">
            <summary>
            The beach
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.VeryLong">
            <summary>
            The very long
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.FixedFps">
            <summary>
            The fixed FPS
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.AntiShake">
            <summary>
            The anti shake
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraExposureMode.Fireworks">
            <summary>
            The fireworks
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode">
            <summary>
            Defines the different AWB (Auto White Balance) modes for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Off">
            <summary>
            No white balance
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Auto">
            <summary>
            The automatic
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Sun">
            <summary>
            The sun
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Cloud">
            <summary>
            The cloud
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Shade">
            <summary>
            The shade
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Tungsten">
            <summary>
            The tungsten
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Fluorescent">
            <summary>
            The fluorescent
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Incandescent">
            <summary>
            The incandescent
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Flash">
            <summary>
            The flash
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraWhiteBalanceMode.Horizon">
            <summary>
            The horizon
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraImageEffect">
            <summary>
            Defines the available image effects for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.None">
            <summary>
            No effect
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Negative">
            <summary>
            The negative
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Solarise">
            <summary>
            The solarise
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Whiteboard">
            <summary>
            The whiteboard
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Blackboard">
            <summary>
            The blackboard
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Sketch">
            <summary>
            The sketch
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Denoise">
            <summary>
            The denoise
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Emboss">
            <summary>
            The emboss
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.OilPaint">
            <summary>
            The oil paint
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Hatch">
            <summary>
            The hatch
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.GPen">
            <summary>
            Graphite Pen
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Pastel">
            <summary>
            The pastel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.WaterColour">
            <summary>
            The water colour
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Film">
            <summary>
            The film
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Blur">
            <summary>
            The blur
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Saturation">
            <summary>
            The saturation
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.SolourSwap">
            <summary>
            The solour swap
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.WashedOut">
            <summary>
            The washed out
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.ColourPoint">
            <summary>
            The colour point
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.ColourBalance">
            <summary>
            The colour balance
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageEffect.Cartoon">
            <summary>
            The cartoon
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraMeteringMode">
            <summary>
            Defines the different metering modes for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraMeteringMode.Average">
            <summary>
            The average
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraMeteringMode.Spot">
            <summary>
            The spot
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraMeteringMode.Backlit">
            <summary>
            The backlit
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraMeteringMode.Matrix">
            <summary>
            The matrix
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraImageRotation">
            <summary>
            Defines the different image rotation modes for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageRotation.None">
            <summary>
            No rerotation
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageRotation.Degrees90">
            <summary>
            90 Degrees
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageRotation.Degrees180">
            <summary>
            180 Degrees
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraImageRotation.Degrees270">
            <summary>
            270 degrees
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation">
            <summary>
            Defines the different DRC (Dynamic Range Compensation)  modes for the Raspberry Pi's camera module
            Helpful for low light photos
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.Off">
            <summary>
            The off setting
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.Low">
            <summary>
            The low
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.Medium">
            <summary>
            The medium
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraDynamicRangeCompensation.High">
            <summary>
            The high
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraAnnotation">
            <summary>
            Defines the bit-wise mask flags for the available annotation elements for the Raspberry Pi's camera module
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.Time">
            <summary>
            The time
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.Date">
            <summary>
            The date
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.ShutterSettings">
            <summary>
            The shutter settings
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.CafSettings">
            <summary>
            The caf settings
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.GainSettings">
            <summary>
            The gain settings
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.LensSettings">
            <summary>
            The lens settings
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.MotionSettings">
            <summary>
            The motion settings
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.FrameNumber">
            <summary>
            The frame number
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraAnnotation.SolidBackground">
            <summary>
            The solid background
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Camera.CameraH264Profile">
            <summary>
            Defines the different H.264 encoding profiles to be used when capturing video.
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraH264Profile.Baseline">
            <summary>
            BP:  Primarily for lower-cost applications with limited computing resources, 
            this profile is used widely in videoconferencing and mobile applications.
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraH264Profile.Main">
            <summary>
            MP: Originally intended as the mainstream consumer profile for broadcast 
            and storage applications, the importance of this profile faded when the High profile was developed for those applications.
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Camera.CameraH264Profile.High">
            <summary>
            HiP: The primary profile for broadcast and disc storage applications, particularly 
            for high-definition television applications (this is the profile adopted into HD DVD and Blu-ray Disc, for example).
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Computer.DsiDisplay">
            <summary>
            The Official Raspberry Pi 7-inch touch display from the foundation
            Some docs available here:
            http://forums.pimoroni.com/t/official-7-raspberry-pi-touch-screen-faq/959
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.DsiDisplay.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Computer.DsiDisplay"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.DsiDisplay.IsPresent">
            <summary>
            Gets a value indicating whether the Pi Foundation Display files are present.
            </summary>
            <value>
            <c>true</c> if this instance is present; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.DsiDisplay.Brightness">
            <summary>
            Gets or sets the brightness of the DSI display via filesystem.
            </summary>
            <value>
            The brightness.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.DsiDisplay.IsBacklightOn">
            <summary>
            Gets or sets a value indicating whether the backlight of the DSI display on.
            This operation is performed via the file system
            </summary>
            <value>
            <c>true</c> if this instance is backlight on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Unosquare.RaspberryIO.Computer.NetworkSettings">
            <summary>
            Represents the network information
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.NetworkSettings.HostName">
            <summary>
            Gets the local machine Host Name.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.NetworkSettings.RetrieveWirelessNetworks(System.String)">
            <summary>
            Retrieves the wireless networks.
            </summary>
            <param name="adapter">The adapter.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.NetworkSettings.RetrieveWirelessNetworks(System.String[])">
            <summary>
            Retrieves the wireless networks.
            </summary>
            <param name="adapters">The adapters.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.NetworkSettings.SetupWirelessNetwork(System.String,System.String,System.String)">
            <summary>
            Setups the wireless network.
            </summary>
            <param name="adapterName">Name of the adapter.</param>
            <param name="networkSsid">The network ssid.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.NetworkSettings.RetrieveAdapters">
            <summary>
            Retrieves the network adapters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.NetworkSettings.GetWirelessNetworkName">
            <summary>
            Retrieves current wireless connected network
            </summary>
            <returns></returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Computer.OsInfo">
            <summary>
            Represents the OS Information
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.SysName">
            <summary>
            System name
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.NodeName">
            <summary>
            Node name
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.Release">
            <summary>
            Release level
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.Version">
            <summary>
            Version level
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.Machine">
            <summary>
            Hardware level
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.OsInfo.DomainName">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.OsInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Computer.PiVersion">
            <summary>
            Defines the board revision codes of the different versions of the Raspberry Pi
            http://www.raspberrypi-spy.co.uk/2012/09/checking-your-raspberry-pi-board-version/
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Unknown">
            <summary>
            The unknown version
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev1">
            <summary>
            The model b rev1
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev1ECN0001">
            <summary>
            The model b rev1 ec N0001
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x04">
            <summary>
            The model b rev2x04
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x05">
            <summary>
            The model b rev2x05
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x06">
            <summary>
            The model b rev2x06
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelAx07">
            <summary>
            The model ax07
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelAx08">
            <summary>
            The model ax08
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelAx09">
            <summary>
            The model ax09
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x0d">
            <summary>
            The model b rev2x0d
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x0e">
            <summary>
            The model b rev2x0e
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBRev2x0f">
            <summary>
            The model b rev2x0f
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBPlus0x10">
            <summary>
            The model b plus0x10
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelBPlus0x13">
            <summary>
            The model b plus0x13
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ComputeModule0x11">
            <summary>
            The compute module0x11
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ComputeModule0x14">
            <summary>
            The compute module0x14
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelAPlus0x12">
            <summary>
            The model a plus0x12
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.ModelAPlus0x15">
            <summary>
            The model a plus0x15
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Pi2ModelB1v1Sony">
            <summary>
            The pi2 model B1V1 sony
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Pi2ModelB1v1Embest">
            <summary>
            The pi2 model B1V1 embest
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Pi2ModelB1v2">
            <summary>
            The pi2 model B1V2
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.PiZero1v2">
            <summary>
            The pi zero1v2
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.PiZero1v3">
            <summary>
            The pi zero1v3
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Pi3ModelBSony">
            <summary>
            The pi3 model b sony
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Computer.PiVersion.Pi3ModelBEmbest">
            <summary>
            The pi3 model b embest
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Computer.SystemInfo">
            <summary>
            http://raspberry-pi-guide.readthedocs.io/en/latest/system.html
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.SystemInfo.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Computer.SystemInfo"/> class from being created.
            </summary>
            <exception cref="T:System.NotSupportedException">Could not initialize the GPIO controller</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.WiringPiVersion">
            <summary>
            Gets the wiring pi library version.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.OperatingSystem">
            <summary>
            Gets the OS information.
            </summary>
            <value>
            The os information.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.RaspberryPiVersion">
            <summary>
            Gets the Raspberry Pi version.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.WiringPiBoardRevision">
            <summary>
            Gets the Wiring Pi board revision (1 or 2).
            </summary>
            <value>
            The wiring pi board revision.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.ProcessorCount">
            <summary>
            Gets the number of processor cores.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.InstalledRam">
            <summary>
            Gets the installed ram in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.IsLittleEndian">
            <summary>
            Gets a value indicating whether this CPU is little endian.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.ModelName">
            <summary>
            Gets the CPU model name.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Features">
            <summary>
            Gets a list of supported CPU features.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.CpuImplementer">
            <summary>
            Gets the CPU implementer hex code.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.CpuArchitecture">
            <summary>
            Gets the CPU architecture code.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.CpuVariant">
            <summary>
            Gets the CPU variant code.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.CpuPart">
            <summary>
            Gets the CPU part code.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.CpuRevision">
            <summary>
            Gets the CPU revision code.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Hardware">
            <summary>
            Gets the hardware model number.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Revision">
            <summary>
            Gets the hardware revision number.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Serial">
            <summary>
            Gets the serial number.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Uptime">
            <summary>
            Gets the uptime (at seconds).
            </summary>
            <value>
            The uptime.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.UptimeTimeSpan">
            <summary>
            Gets the uptime in TimeSpan.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.Processor">
            <summary>
            Placeholder for processor index
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.SystemInfo.Reboot">
            <summary>
            Reboots this computer.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Computer.SystemInfo.IsRunningAsRoot">
            <summary>
            Gets a value indicating whether this program is running as Root
            </summary>
            <value>
            <c>true</c> if this instance is running as root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Computer.SystemInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioPinDriveMode">
            <summary>
            Defines the different drive modes of a GPIO pin
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.Input">
            <summary>
            Input drive mode (perform reads)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.Output">
            <summary>
            Output drive mode (perform writes)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.PwmOutput">
            <summary>
            PWM output mode (only certain pins support this -- 2 of them at the moment)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinDriveMode.GpioClock">
            <summary>
            GPIO Clock output mode (only a pin supports this at this time)
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode">
            <summary>
            The GPIO pin resistor mode. This is used on input pins so that their
            lines are not floating
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode.Off">
            <summary>
            Pull resistor not active. Line floating
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode.PullDown">
            <summary>
            Pull resistor sets a default value of 0 on no-connects
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinResistorPullMode.PullUp">
            <summary>
            Pull resistor sets a default value of 1 on no-connects
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.PwmMode">
            <summary>
            The PWM mode.
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PwmMode.MarkSign">
            <summary>
            PWM pulses are sent using mark-sign patterns (old school)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PwmMode.Balanced">
            <summary>
            PWM pulses are sent as a balanced signal (default, newer mode)
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.EdgeDetection">
            <summary>
            Defines the different edge detection modes  for pin interrupts
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.EdgeDetection.ExternalSetup">
            <summary>
            Assumes edge detection was already setup externally
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.EdgeDetection.FallingEdge">
            <summary>
            Falling Edge
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.EdgeDetection.RisingEdge">
            <summary>
            Rising edge
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.EdgeDetection.RisingAndFallingEdges">
            <summary>
            Both, rising and falling edges
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioPinValue">
            <summary>
            Defines the GPIO Pin values 0 for low, 1 for High
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinValue.High">
            <summary>
            Digital high
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioPinValue.Low">
            <summary>
            Digital low
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioHeader">
            <summary>
            Defines the Header connectors available
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioHeader.None">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioHeader.P1">
            <summary>
            The P1 connector (main connector)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.GpioHeader.P5">
            <summary>
            The P5 connector (auxiliary, not commenly used)
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.WiringPiPin">
            <summary>
            Defines all the available Wiring Pi Pin Numbers
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Unknown">
            <summary>
            The unknown
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin00">
            <summary>
            The pin00
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin01">
            <summary>
            The pin01
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin02">
            <summary>
            The pin02
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin03">
            <summary>
            The pin03
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin04">
            <summary>
            The pin04
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin05">
            <summary>
            The pin05
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin06">
            <summary>
            The pin06
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin07">
            <summary>
            The pin07
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin08">
            <summary>
            The pin08
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin09">
            <summary>
            The pin09
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin10">
            <summary>
            The pin10
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin11">
            <summary>
            The pin11
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin12">
            <summary>
            The pin12
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin13">
            <summary>
            The pin13
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin14">
            <summary>
            The pin14
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin15">
            <summary>
            The pin15
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin16">
            <summary>
            The pin16
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin17">
            <summary>
            The pin17
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin18">
            <summary>
            The pin18
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin19">
            <summary>
            The pin19
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin20">
            <summary>
            The pin20
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin21">
            <summary>
            The pin21
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin22">
            <summary>
            The pin22
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin23">
            <summary>
            The pin23
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin24">
            <summary>
            The pin24
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin25">
            <summary>
            The pin25
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin26">
            <summary>
            The pin26
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin27">
            <summary>
            The pin27
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin28">
            <summary>
            The pin28
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin29">
            <summary>
            The pin29
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin30">
            <summary>
            The pin30
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.WiringPiPin.Pin31">
            <summary>
            The pin31
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.PinCapability">
            <summary>
            Defines the different pin capabilities
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.GP">
            <summary>
            General Purpose capability: Digitala nd Analog Read/Write
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.GPCLK">
            <summary>
            General Purpose Clock (not PWM)
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.I2CSDA">
            <summary>
            i2c data channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.I2CSCL">
            <summary>
            i2c clock channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.SPIMOSI">
            <summary>
            SPI Master Out, Slave In channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.SPIMISO">
            <summary>
            SPI Master In, Slave Out channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.SPICLK">
            <summary>
            SPI Clock channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.SPICS">
            <summary>
            SPI Chip Select Channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.UARTRTS">
            <summary>
            UART Request to Send Channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.UARTTXD">
            <summary>
            UART Transmit Channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.UARTRXD">
            <summary>
            UART Receive Channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.PinCapability.PWM">
            <summary>
            Hardware Pule Width Modulation
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.SpiChannelNumber">
            <summary>
            Defines the SPI channel numbers
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.SpiChannelNumber.Channel0">
            <summary>
            The channel 0
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.SpiChannelNumber.Channel1">
            <summary>
            The channel 1
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.ControllerMode">
            <summary>
            Defines GPIO controller initialization modes
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioController">
            <summary>
            Represents a singleton of the Raspberry Pi GPIO controller 
            as an IReadOnlyCollection of GpioPins
            Low level operations are accomplished by using the Wiring Pi library.
            Use the Instance property to access the singleton's instance
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.GpioController" /> class from being created.
            It in turn initializes the controller and registers the pin -- in that order.
            </summary>
            <exception cref="T:System.Exception">Unable to initialize the GPIO controller.</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.IsInitialized">
            <summary>
            Determines if the underlying GPIO controller has been initialized properly.
            </summary>
            <value>
            <c>true</c> if the controller is properly initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Mode">
            <summary>
            Gets or sets the initialization mode.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.RegisterPin(Unosquare.RaspberryIO.Gpio.GpioPin)">
            <summary>
            Short-hand method of registering pins
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.Initialize(Unosquare.RaspberryIO.Gpio.ControllerMode)">
            <summary>
            Initializes the controller given the initialization mode and pin numbering scheme
            </summary>
            <param name="mode">The mode.</param>
            <returns></returns>
            <exception cref="T:System.PlatformNotSupportedException">
            </exception>
            <exception cref="T:System.InvalidOperationException">Initialize</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pins">
            <summary>
            Gets a red-only collection of all registered pins.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Item(Unosquare.RaspberryIO.Gpio.WiringPiPin)">
            <summary>
            Gets the <see cref="T:Unosquare.RaspberryIO.Gpio.GpioPin"/> with the specified pin number.
            </summary>
            <value>
            The <see cref="T:Unosquare.RaspberryIO.Gpio.GpioPin"/>.
            </value>
            <param name="pinNumber">The pin number.</param>
            <returns></returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Unosquare.RaspberryIO.Gpio.GpioPin"/> with the specified pin number.
            </summary>
            <value>
            The <see cref="T:Unosquare.RaspberryIO.Gpio.GpioPin"/>.
            </value>
            <param name="pinNumber">The pin number.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin00">
            <summary>
            Provides direct access to the Pin 00.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin01">
            <summary>
            Provides direct access to the Pin 01.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin02">
            <summary>
            Provides direct access to the Pin 02.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin03">
            <summary>
            Provides direct access to the Pin 03.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin04">
            <summary>
            Provides direct access to the Pin 04.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin05">
            <summary>
            Provides direct access to the Pin 05.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin06">
            <summary>
            Provides direct access to the Pin 06.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin07">
            <summary>
            Provides direct access to the Pin 07.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin08">
            <summary>
            Provides direct access to the Pin 08.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin09">
            <summary>
            Provides direct access to the Pin 09.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin10">
            <summary>
            Provides direct access to the Pin 10.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin11">
            <summary>
            Provides direct access to the Pin 11.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin12">
            <summary>
            Provides direct access to the Pin 12.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin13">
            <summary>
            Provides direct access to the Pin 13.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin14">
            <summary>
            Provides direct access to the Pin 14.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin15">
            <summary>
            Provides direct access to the Pin 15.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin16">
            <summary>
            Provides direct access to the Pin 16.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin17">
            <summary>
            Provides direct access to the Pin 17.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin18">
            <summary>
            Provides direct access to the Pin 18.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin19">
            <summary>
            Provides direct access to the Pin 19.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin20">
            <summary>
            Provides direct access to the Pin 20.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin21">
            <summary>
            Provides direct access to the Pin 21.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin22">
            <summary>
            Provides direct access to the Pin 22.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin23">
            <summary>
            Provides direct access to the Pin 23.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin24">
            <summary>
            Provides direct access to the Pin 24.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin25">
            <summary>
            Provides direct access to the Pin 25.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin26">
            <summary>
            Provides direct access to the Pin 26.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin27">
            <summary>
            Provides direct access to the Pin 27.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin28">
            <summary>
            Provides direct access to the Pin 28.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin29">
            <summary>
            Provides direct access to the Pin 29.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin30">
            <summary>
            Provides direct access to the Pin 30.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Pin31">
            <summary>
            Provides direct access to the Pin 31.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.SetPadDrive(System.Int32,System.Int32)">
            <summary>
            This sets the “strength” of the pad drivers for a particular group of pins. 
            There are 3 groups of pins and the drive strength is from 0 to 7. 
            Do not use this unless you know what you are doing.
            </summary>
            <param name="group">The group.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.SetPadDriveAsync(System.Int32,System.Int32)">
            <summary>
            This sets the “strength” of the pad drivers for a particular group of pins.
            There are 3 groups of pins and the drive strength is from 0 to 7.
            Do not use this unless you know what you are doing.
            </summary>
            <param name="group">The group.</param>
            <param name="value">The value.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.WriteByte(System.Byte)">
            <summary>
            This writes the 8-bit byte supplied to the first 8 GPIO pins. 
            It’s the fastest way to set all 8 bits at once to a particular value, 
            although it still takes two write operations to the Pi’s GPIO hardware.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">PinMode</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.WriteByteAsync(System.Byte)">
            <summary>
            This writes the 8-bit byte supplied to the first 8 GPIO pins.
            It’s the fastest way to set all 8 bits at once to a particular value,
            although it still takes two write operations to the Pi’s GPIO hardware.
            </summary>
            <param name="value">The value.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.ReadByte">
            <summary>
            This reads the 8-bit byte supplied to the first 8 GPIO pins. 
            It’s the fastest way to get all 8 bits at once to a particular value.
            Please note this function is undocumented and unsopported
            </summary>
            <returns>A byte from the GPIO</returns>
            <exception cref="T:System.InvalidOperationException">PinMode</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.ReadByteAsync">
            <summary>
            This reads the 8-bit byte supplied to the first 8 GPIO pins. 
            It’s the fastest way to get all 8 bits at once to a particular value.
            Please note this function is undocumented and unsopported
            </summary>
            <returns>A byte from the GPIO</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioController.Count">
            <summary>
            Gets the number of registered pins in the controller.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.WiringPiToBcmPinNumber(System.Int32)">
            <summary>
            Converts the Wirings Pi pin number to the BCM pin number.
            </summary>
            <param name="wiringPiPinNumber">The wiring pi pin number.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioController.HaderToBcmPinNumber(System.Int32)">
            <summary>
            Converts the Physical (Header) pin number to BCM pin number.
            </summary>
            <param name="headerPinNumber">The header pin number.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.GpioPin">
            <summary>
            Represents a GPIO Pin, its location and its capabilities.
            Full pin reference available here:
            http://pinout.xyz/pinout/pin31_gpio6 and  http://wiringpi.com/pins/
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.#ctor(Unosquare.RaspberryIO.Gpio.WiringPiPin,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.GpioPin"/> class.
            </summary>
            <param name="wiringPiPinNumber">The wiring pi pin number.</param>
            <param name="headerPinNumber">The header pin number.</param>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PinNumber">
            <summary>
            Gets or sets the Wiring Pi pin number as an integer.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.WiringPiPinNumber">
            <summary>
            Gets the WiringPi Pin number
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.BcmPinNumber">
            <summary>
            Gets the BCM chip (hardware) pin number.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.HeaderPinNumber">
            <summary>
            Gets or the physical header (physical board) pin number.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.Header">
            <summary>
            Gets the pin's header (physical board) location.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.Name">
            <summary>
            Gets the friendly name of the pin.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.Capabilities">
            <summary>
            Gets the hardware mode capabilities of this pin.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PinMode">
            <summary>
            Gets or sets the pin operating mode.
            </summary>
            <value>
            The pin mode.
            </value>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.Write(Unosquare.RaspberryIO.Gpio.GpioPinValue)">
            <summary>
            Writes the specified pin value.
            This method performs a digital write
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.WriteAsync(Unosquare.RaspberryIO.Gpio.GpioPinValue)">
            <summary>
            Writes the value asynchronously.
            </summary>
            <param name="value">The value.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.Write(System.Boolean)">
            <summary>
            Writes the specified bit value.
            This method performs a digital write
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.WriteAsync(System.Boolean)">
            <summary>
            Writes the specified bit value.
            This method performs a digital write
            </summary>
            <param name="value">The value.</param>
            <returns>
            The awaitable task
            </returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.Write(System.Int32)">
            <summary>
            Writes the specified value. 0 for low, any other value for high
            This method performs a digital write
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.WriteAsync(System.Int32)">
            <summary>
            Writes the specified value. 0 for low, any other value for high
            This method performs a digital write
            </summary>
            <param name="value">The value.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.WriteLevel(System.Int32)">
            <summary>
            Writes the specified value as an analog level.
            You will need to register additional analog modules to enable this function for devices such as the Gertboard.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.WriteLevelAsync(System.Int32)">
            <summary>
            Writes the specified value as an analog level.
            You will need to register additional analog modules to enable this function for devices such as the Gertboard.
            </summary>
            <param name="value">The value.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.InputPullMode">
            <summary>
            This sets or gets the pull-up or pull-down resistor mode on the pin, which should be set as an input. 
            Unlike the Arduino, the BCM2835 has both pull-up an down internal resistors. 
            The parameter pud should be; PUD_OFF, (no pull up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) 
            The internal pull up/down resistors have a value of approximately 50KΩ on the Raspberry Pi.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.Read">
            <summary>
            Reads the digital value on the pin as a boolean value.
            </summary>
            <returns>The state of the pin</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.ReadAsync">
            <summary>
            Reads the digital value on the pin as a boolean value.
            </summary>
            <returns>The state of the pin</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.ReadValue">
            <summary>
            Reads the digital value on the pin as a High or Low value.
            </summary>
            <returns>The state of the pin</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.ReadValueAsync">
            <summary>
            Reads the digital value on the pin as a High or Low value.
            </summary>
            <returns>The state of the pin</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.ReadLevel">
            <summary>
            Reads the analog value on the pin.
            This returns the value read on the supplied analog input pin. You will need to register 
            additional analog modules to enable this function for devices such as the Gertboard, 
            quick2Wire analog board, etc.
            </summary>
            <returns>The analog level</returns>
            <exception cref="T:System.InvalidOperationException">When the pin mode is not configured as an input.</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.ReadLevelAsync">
            <summary>
            Reads the analog value on the pin.
            This returns the value read on the supplied analog input pin. You will need to register 
            additional analog modules to enable this function for devices such as the Gertboard, 
            quick2Wire analog board, etc.
            </summary>
            <returns>The analog level</returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PwmRegister">
            <summary>
            Gets or sets the PWM register. Values should be between 0 and 1024
            </summary>
            <value>
            The PWM register.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PwmMode">
            <summary>
            The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, 
            however the default mode in the Pi is “balanced”.
            </summary>
            <value>
            The PWM mode.
            </value>
            <exception cref="T:System.InvalidOperationException">When pin mode is not set a Pwn output</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PwmRange">
            <summary>
            This sets the range register in the PWM generator. The default is 1024.
            </summary>
            <value>
            The PWM range.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.PwmClockDivisor">
            <summary>
            Gets or sets the PWM clock divisor.
            </summary>
            <value>
            The PWM clock divisor.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.IsInSoftPwmMode">
            <summary>
            Gets a value indicating whether this pin is in software based PWM mode.
            </summary>
            <value>
            <c>true</c> if this instance is in soft PWM mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.StartSoftPwm(System.Int32,System.Int32)">
            <summary>
            Starts the software based PWM on this pin.
            </summary>
            <param name="value">The value.</param>
            <param name="range">The range.</param>
            <exception cref="T:System.NotSupportedException">When the pin does not suppoert PWM</exception>
            <exception cref="T:System.InvalidOperationException">StartSoftPwm
            or</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.SoftPwmValue">
            <summary>
            Gets or sets the software PWM value on the pin.
            </summary>
            <value>
            The soft PWM value.
            </value>
            <exception cref="T:System.InvalidOperationException">StartSoftPwm</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.SoftPwmRange">
            <summary>
            Gets the software PWM range used upon starting the PWM.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.IsInSoftToneMode">
            <summary>
            Gets a value indicating whether this instance is in software based tone generator mode.
            </summary>
            <value>
            <c>true</c> if this instance is in soft tone mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.SoftToneFrequency">
            <summary>
            Gets or sets the soft tone frequency. 0 to 5000 Hz is typical
            </summary>
            <value>
            The soft tone frequency.
            </value>
            <exception cref="T:System.InvalidOperationException">When soft tones cannot be initialized on the pin</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.InterruptCallback">
            <summary>
            Gets the interrupt callback. Returns null if no interrupt
            has been registered.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.GpioPin.InterruptEdgeDetection">
            <summary>
            Gets the interrupt edge detection mode.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.GpioPin.RegisterInterruptCallback(Unosquare.RaspberryIO.Gpio.EdgeDetection,Unosquare.RaspberryIO.Native.InterrputServiceRoutineCallback)">
            <summary>
            Registers the interrupt callback on the pin. Pin mode has to be set to Input.
            
            </summary>
            <param name="edgeDetection">The edge detection.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:System.ArgumentException">callback</exception>
            <exception cref="T:System.InvalidOperationException">
            An interrupt callback was already registered.
            or
            RegisterInterruptCallback
            </exception>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.I2CBus">
            <summary>
            A simple wrapper for the I2c bus on the Raspberry Pi
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CBus.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.I2CBus"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.I2CBus.Devices">
            <summary>
            Gets the registered devices as a read only collection.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CBus.GetDeviceById(System.Int32)">
            <summary>
            Gets the device by identifier.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <returns>The device reference</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CBus.AddDevice(System.Int32)">
            <summary>
            Adds a device to the bus by its Id. If the device is already registered it simply returns the existing device.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <returns>The device reference</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When the device file descriptor is not found</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CBus.SetupFileDescriptor(System.Int32)">
            <summary>
            This initializes the I2C system with your given device identifier. 
            The ID is the I2C number of the device and you can use the i2cdetect program to find this out. 
            wiringPiI2CSetup() will work out which revision Raspberry Pi you have and open the appropriate device in /dev.
            The return value is the standard Linux filehandle, or -1 if any error – in which case, you can consult errno as usual.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <returns>The Linux file handle</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.I2CDevice">
            <summary>
            Represents a device on the I2C Bus
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.I2CDevice"/> class.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="fileDescriptor">The file descriptor.</param>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.I2CDevice.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
            <value>
            The device identifier.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.I2CDevice.FileDescriptor">
            <summary>
            Gets the standard POSIX file descriptor.
            </summary>
            <value>
            The file descriptor.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.Read">
            <summary>
            Reads a byte from the specified file descriptor
            </summary>
            <returns>The byte from device</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.ReadAsync">
            <summary>
            Reads a byte from the specified file descriptor
            </summary>
            <returns>The byte from device</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.Read(System.Int32)">
            <summary>
            Reads a buffer of the specified length, one byte at a time
            </summary>
            <param name="length">The length.</param>
            <returns>The byte array from device</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.ReadAsync(System.Int32)">
            <summary>
            Reads a buffer of the specified length, one byte at a time
            </summary>
            <param name="length">The length.</param>
            <returns>The byte array from device</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.Write(System.Byte)">
            <summary>
            Writes a byte of data the specified file descriptor.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.WriteAsync(System.Byte)">
            <summary>
            Writes a byte of data the specified file descriptor.
            </summary>
            <param name="data">The data.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.Write(System.Byte[])">
            <summary>
            Writes a set of bytes to the specified file descriptor.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.WriteAsync(System.Byte[])">
            <summary>
            Writes a set of bytes to the specified file descriptor.
            </summary>
            <param name="data">The data.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.WriteAddressByte(System.Int32,System.Byte)">
            <summary>
            These write an 8 or 16-bit data value into the device register indicated.
            </summary>
            <param name="address">The register.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.WriteAddressWord(System.Int32,System.UInt16)">
            <summary>
            These write an 8 or 16-bit data value into the device register indicated.
            </summary>
            <param name="address">The register.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.ReadAddressByte(System.Int32)">
            <summary>
            These read an 8 or 16-bit value from the device register indicated.
            </summary>
            <param name="address">The register.</param>
            <returns>The address byte from device</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.I2CDevice.ReadAddressWord(System.Int32)">
            <summary>
            These read an 8 or 16-bit value from the device register indicated.
            </summary>
            <param name="address">The register.</param>
            <returns>The address word from device</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.SpiBus">
            <summary>
            The SPI Bus containing the 2 SPI channels
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiBus.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.SpiBus"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiBus.Channel0Frequency">
            <summary>
            Gets or sets the channel 0 frequency in Hz.
            </summary>
            <value>
            The channel0 frequency.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiBus.Channel0">
            <summary>
            Gets the SPI bus on channel 1.
            </summary>
            <value>
            The channel0.
            </value>
            <exception cref="T:System.InvalidOperationException">Channel0Frequency</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiBus.Channel1Frequency">
            <summary>
            Gets or sets the channel 1 frequency in Hz
            </summary>
            <value>
            The channel1 frequency.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiBus.Channel1">
            <summary>
            Gets the SPI bus on channel 1.
            </summary>
            <value>
            The channel1.
            </value>
            <exception cref="T:System.InvalidOperationException">Channel1Frequency</exception>
        </member>
        <member name="T:Unosquare.RaspberryIO.Gpio.SpiChannel">
            <summary>
            Provides access to using the SPI buses on the GPIO.
            SPI is a bus that works like a ring shift register 
            The number of bytes pushed is equal to the number of bytes received.
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.SpiChannel.MinFrequency">
            <summary>
            The minimum frequency of an SPI Channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.SpiChannel.MaxFrequency">
            <summary>
            The maximum frequency of an SPI channel
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Gpio.SpiChannel.DefaultFrequency">
            <summary>
            The default frequency of SPI channels
            This is set to 8 Mhz wich is typical in modern hardware.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.#ctor(Unosquare.RaspberryIO.Gpio.SpiChannelNumber,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Gpio.SpiChannel"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiChannel.FileDescriptor">
            <summary>
            Gets the standard initialization file descriptor.
            anything negative means error.
            </summary>
            <value>
            The file descriptor.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiChannel.Channel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Gpio.SpiChannel.Frequency">
            <summary>
            Gets the frequency.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.SendReceive(System.Byte[])">
            <summary>
            Sends data and simultaneously receives the data in the return buffer
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The read bytes from the ring-style bus</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.SendReceiveAsync(System.Byte[])">
            <summary>
            Sends data and simultaneously receives the data in the return buffer
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The read bytes from the ring-style bus
            </returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.Write(System.Byte[])">
            <summary>
            Writes the specified buffer the the underlying FileDescriptor.
            Do not use this method if you expect data back. 
            This method is efficient if used in a fire-and-forget scenario
            like sending data over to those long RGB LED strips
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.WriteAsync(System.Byte[])">
            <summary>
            Writes the specified buffer the the underlying FileDescriptor.
            Do not use this method if you expect data back.
            This method is efficient if used in a fire-and-forget scenario
            like sending data over to those long RGB LED strips
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Gpio.SpiChannel.Retrieve(Unosquare.RaspberryIO.Gpio.SpiChannelNumber,System.Int32)">
            <summary>
            Retrieves the spi bus. If the bus channel is not registered it sets it up automatically.
            If it had been previously registered, then the bus is simply returned.
            </summary>
            <param name="channel">The channel.</param>
            <param name="frequency">The frequency.</param>
            <returns>The usable SPI channel</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Models.NetworkAdapter">
            <summary>
            Represents a Network Adapter
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.IPv4">
            <summary>
            Gets or sets the i PV4.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.IPv6">
            <summary>
            Gets or sets the i PV6.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.AccessPointName">
            <summary>
            Gets or sets the name of the access point.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.MacAddress">
            <summary>
            Gets or sets the mac address.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.NetworkAdapter.IsWireless">
            <summary>
            Gets a value indicating whether this instance is wireless.
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Models.WirelessNetworkInfo">
            <summary>
            Represents a wireless network information
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.WirelessNetworkInfo.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.WirelessNetworkInfo.Quality">
            <summary>
            Gets the network quality.
            </summary> 
        </member>
        <member name="P:Unosquare.RaspberryIO.Models.WirelessNetworkInfo.IsEncrypted">
            <summary>
            Gets a value indicating whether this instance is encrypted.
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.InterrputServiceRoutineCallback">
            <summary>
            A delegate defining a callback for an Interrupt Service Routine
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.ThreadWorker">
            <summary>
            Defines the body of a thread worker
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.HardwareException">
            <summary>
            Represents a low-level exception, typically thrown when return codes from a
            low-level operation is non-zero or in some cases when it is less than zero.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.HardwareException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.RaspberryIO.Native.HardwareException" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="component">The component.</param>
        </member>
        <member name="P:Unosquare.RaspberryIO.Native.HardwareException.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Native.HardwareException.Component">
            <summary>
            Gets the component.
            </summary>
            <value>
            The component.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Native.HardwareException.ExtendedMessage">
            <summary>
            Gets the extended message (could be null).
            </summary>
            <value>
            The extended message.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.HardwareException.Throw(System.String,System.String)">
            <summary>
            Throws a new instance of a hardware error by retrieving the last error number (errno).
            </summary>
            <param name="className">Name of the class.</param>
            <param name="methodName">Name of the method.</param>
            <exception cref="T:Unosquare.RaspberryIO.Native.HardwareException"></exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.HardwareException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
            </PermissionSet>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.getuid">
            <summary>
            Gets the User ID - a user ID of 0 represents the root user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.strerror(System.Int32)">
            <summary>
            Gets a string describing the error number.
            </summary>
            <param name="errnum">The errnum.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.chmod(System.String,System.UInt32)">
            <summary>
            Changes file permissions on a Unix file system
            </summary>
            <param name="filename">The filename.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.strtol(System.String,System.IntPtr,System.Int32)">
            <summary>
            Converts a string to a 32 bit integer. Use endpointer as IntPtr.Zero
            </summary>
            <param name="numberString">The number string.</param>
            <param name="endPointer">The end pointer.</param>
            <param name="numberBase">The number base.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.write(System.Int32,System.Byte[],System.Int32)">
            <summary>
            The write() function attempts to write nbytes from buffer to the file associated with handle. On text files, it expands each LF to a CR/LF.
            The function returns the number of bytes written to the file. A return value of -1 indicates an error, with errno set appropriately.
            </summary>
            <param name="fd">The fd.</param>
            <param name="buffer">The buffer.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.uname(Unosquare.RaspberryIO.Native.utsname@)">
            <summary>
            Fills in the structure with information about the system.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Standard.sysinfo(Unosquare.RaspberryIO.Native.utssysinfo@)">
            <summary>
            Returns information on overall system statistics
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.ThreadLockKey">
            <summary>
            Defines the different threading locking keys
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.ThreadLockKey.Lock0">
            <summary>
            The lock 0
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.ThreadLockKey.Lock1">
            <summary>
            The lock 1
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.ThreadLockKey.Lock2">
            <summary>
            The lock 2
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.ThreadLockKey.Lock3">
            <summary>
            The lock 3
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.Timing">
            <summary>
            Provides access to timing and threading properties and methods
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.RaspberryIO.Native.Timing"/> class from being created.
            </summary>
            <exception cref="T:System.NotSupportedException">Could not initialize the GPIO controller</exception>
        </member>
        <member name="P:Unosquare.RaspberryIO.Native.Timing.MillisecondsSinceSetup">
            <summary>
            This returns a number representing the number of milliseconds since your program 
            initialized the GPIO controller. 
            It returns an unsigned 32-bit number which wraps after 49 days.
            </summary>
            <value>
            The milliseconds since setup.
            </value>
        </member>
        <member name="P:Unosquare.RaspberryIO.Native.Timing.MicrosecondsSinceSetup">
            <summary>
            This returns a number representing the number of microseconds since your 
            program initialized the GPIO controller
            It returns an unsigned 32-bit number which wraps after approximately 71 minutes.
            </summary>
            <value>
            The microseconds since setup.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.SleepMilliseconds(System.UInt32)">
            <summary>
            This causes program execution to pause for at least howLong milliseconds. 
            Due to the multi-tasking nature of Linux it could be longer. 
            Note that the maximum delay is an unsigned 32-bit integer or approximately 49 days.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.SleepMicroseconds(System.UInt32)">
            <summary>
            This causes program execution to pause for at least howLong microseconds. 
            Due to the multi-tasking nature of Linux it could be longer. 
            Note that the maximum delay is an unsigned 32-bit integer microseconds or approximately 71 minutes.
            Delays under 100 microseconds are timed using a hard-coded loop continually polling the system time, 
            Delays over 100 microseconds are done using the system nanosleep() function – 
            You may need to consider the implications of very short delays on the overall performance of the system, 
            especially if using threads.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.SetThreadPriority(System.Int32)">
            <summary>
            This attempts to shift your program (or thread in a multi-threaded program) to a higher priority and 
            enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). 
            This won’t make your program go any faster, but it will give it a bigger slice of time when other programs 
            are running. The priority parameter works relative to others – so you can make one program priority 1 and 
            another priority 2 and it will have the same effect as setting one to 10 and the other to 90 
            (as long as no other programs are running with elevated priorities)
            </summary>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.CreateThread(Unosquare.RaspberryIO.Native.ThreadWorker)">
            <summary>
            This is really nothing more than a simplified interface to the Posix threads mechanism that Linux supports.
            See the manual pages on Posix threads (man pthread) if you need more control over them.
            </summary>
            <param name="worker">The worker.</param>
            <exception cref="T:System.ArgumentNullException">worker</exception>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.Lock(Unosquare.RaspberryIO.Native.ThreadLockKey)">
            <summary>
            These allow you to synchronize variable updates from your main program to any threads running in your program. 
            keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, 
            it will be stalled until the first process has unlocked the same key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.Timing.Unlock(Unosquare.RaspberryIO.Native.ThreadLockKey)">
            <summary>
            These allow you to synchronize variable updates from your main program to any threads running in your program. 
            keyNum is a number from 0 to 3 and represents a “key”. When another process tries to lock the same key, 
            it will be stalled until the first process has unlocked the same key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.utsname">
            <summary>
            OS uname structure
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.sysname">
            <summary>
            System name
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.nodename">
            <summary>
            Node name
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.release">
            <summary>
            Release level
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.version">
            <summary>
            Version level
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.machine">
            <summary>
            Hardware level
            </summary>
        </member>
        <member name="F:Unosquare.RaspberryIO.Native.utsname.domainname">
            <summary>
            Domain name
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.utssysinfo">
            <summary>
            Sysinfo POSIX struct
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Native.WiringPi">
            <summary>
            Provides native C WiringPi Library function call wrappers
            All credit for the native library goes to the author of http://wiringpi.com/
            The wrappers were written based on https://github.com/WiringPi/WiringPi/blob/master/wiringPi/wiringPi.h
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSetup">
            <summary>
            This initialises wiringPi and assumes that the calling program is going to be using the wiringPi pin numbering scheme. 
            This is a simplified numbering scheme which provides a mapping from virtual pin numbers 0 through 16 to the real underlying Broadcom GPIO pin numbers. 
            See the pins page for a table which maps the wiringPi pin number to the Broadcom GPIO pin number to the physical location on the edge connector.
            This function needs to be called with root privileges.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSetupSys">
            <summary>
            This initialises wiringPi but uses the /sys/class/gpio interface rather than accessing the hardware directly. 
            This can be called as a non-root user provided the GPIO pins have been exported before-hand using the gpio program. 
            Pin numbering in this mode is the native Broadcom GPIO numbers – the same as wiringPiSetupGpio() above, 
            so be aware of the differences between Rev 1 and Rev 2 boards.
            
            Note: In this mode you can only use the pins which have been exported via the /sys/class/gpio interface before you run your program. 
            You can do this in a separate shell-script, or by using the system() function from inside your program to call the gpio program.
            Also note that some functions have no effect when using this mode as they’re not currently possible to action unless called with root privileges. 
            (although you can use system() to call gpio to set/change modes if needed)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSetupGpio">
            <summary>
            This is identical to wiringPiSetup, however it allows the calling programs to use the Broadcom GPIO 
            pin numbers directly with no re-mapping.
            As above, this function needs to be called with root privileges, and note that some pins are different 
            from revision 1 to revision 2 boards.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSetupPhys">
            <summary>
            Identical to wiringPiSetup, however it allows the calling programs to use the physical pin numbers on the P1 connector only.
            This function needs to be called with root privileges.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pinModeAlt(System.Int32,System.Int32)">
            <summary>
            This function is undocumented
            </summary>
            <param name="pin">The pin.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pinMode(System.Int32,System.Int32)">
            <summary>
            This sets the mode of a pin to either INPUT, OUTPUT, PWM_OUTPUT or GPIO_CLOCK. 
            Note that only wiringPi pin 1 (BCM_GPIO 18) supports PWM output and only wiringPi pin 7 (BCM_GPIO 4) 
            supports CLOCK output modes.
            
            This function has no effect when in Sys mode. If you need to change the pin mode, then you can 
            do it with the gpio program in a script before you start your program.
            </summary>
            <param name="pin">The pin.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pullUpDnControl(System.Int32,System.Int32)">
            <summary>
            This sets the pull-up or pull-down resistor mode on the given pin, which should be set as an input. 
            Unlike the Arduino, the BCM2835 has both pull-up an down internal resistors. The parameter pud should be; PUD_OFF, 
            (no pull up/down), PUD_DOWN (pull to ground) or PUD_UP (pull to 3.3v) The internal pull up/down resistors 
            have a value of approximately 50KΩ on the Raspberry Pi.
            
            This function has no effect on the Raspberry Pi’s GPIO pins when in Sys mode. 
            If you need to activate a pull-up/pull-down, then you can do it with the gpio program in a script before you start your program.
            </summary>
            <param name="pin">The pin.</param>
            <param name="pud">The pud.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.digitalRead(System.Int32)">
            <summary>
            This function returns the value read at the given pin. It will be HIGH or LOW (1 or 0) depending on the logic level at the pin.
            </summary>
            <param name="pin">The pin.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.digitalWrite(System.Int32,System.Int32)">
            <summary>
            Writes the value HIGH or LOW (1 or 0) to the given pin which must have been previously set as an output.
            WiringPi treats any non-zero number as HIGH, however 0 is the only representation of LOW.
            </summary>
            <param name="pin">The pin.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pwmWrite(System.Int32,System.Int32)">
            <summary>
            Writes the value to the PWM register for the given pin. The Raspberry Pi has one 
            on-board PWM pin, pin 1 (BMC_GPIO 18, Phys 12) and the range is 0-1024. 
            Other PWM devices may have other PWM ranges.
            This function is not able to control the Pi’s on-board PWM when in Sys mode.
            </summary>
            <param name="pin">The pin.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.analogRead(System.Int32)">
            <summary>
            This returns the value read on the supplied analog input pin. You will need to 
            register additional analog modules to enable this function for devices such as the Gertboard, quick2Wire analog board, etc.
            </summary>
            <param name="pin">The pin.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.analogWrite(System.Int32,System.Int32)">
            <summary>
            This writes the given value to the supplied analog pin. You will need to register additional 
            analog modules to enable this function for devices such as the Gertboard.
            </summary>
            <param name="pin">The pin.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piBoardRev">
            <summary>
            This returns the board revision of the Raspberry Pi. It will be either 1 or 2. Some of the BCM_GPIO pins changed number and 
            function when moving from board revision 1 to 2, so if you are using BCM_GPIO pin numbers, then you need to be aware of the differences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piBoardId(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            This function is undocumented
            </summary>
            <param name="model">The model.</param>
            <param name="mem">The memory.</param>
            <param name="maker">The maker.</param>
            <param name="overVolted">The over volted.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wpiPinToGpio(System.Int32)">
            <summary>
            This returns the BCM_GPIO pin number of the supplied wiringPi pin. It takes the board revision into account.
            </summary>
            <param name="wPiPin">The w pi pin.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.physPinToGpio(System.Int32)">
            <summary>
            This returns the BCM_GPIO pin number of the supplied physical pin on the P1 connector.
            </summary>
            <param name="physPin">The physical pin.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.setPadDrive(System.Int32,System.Int32)">
            <summary>
            This sets the “strength” of the pad drivers for a particular group of pins. 
            There are 3 groups of pins and the drive strength is from 0 to 7. Do not use this unless you know what you are doing.
            </summary>
            <param name="group">The group.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.getAlt(System.Int32)">
            <summary>
            Undocumented function
            </summary>
            <param name="pin">The pin.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pwmToneWrite(System.Int32,System.Int32)">
            <summary>
            Undocumented function
            </summary>
            <param name="pin">The pin.</param>
            <param name="freq">The freq.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.digitalWriteByte(System.Int32)">
            <summary>
            This writes the 8-bit byte supplied to the first 8 GPIO pins. 
            It’s the fastest way to set all 8 bits at once to a particular value, although it still takes two write operations to the Pi’s GPIO hardware.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.digitalReadByte">
            <summary>
            Undocumented function
            This reads the 8-bit byte supplied to the first 8 GPIO pins. 
            It’s the fastest way to get all 8 bits at once to a particular value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pwmSetMode(System.Int32)">
            <summary>
            The PWM generator can run in 2 modes – “balanced” and “mark:space”. The mark:space mode is traditional, 
            however the default mode in the Pi is “balanced”. You can switch modes by supplying the parameter: PWM_MODE_BAL or PWM_MODE_MS.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pwmSetRange(System.UInt32)">
            <summary>
            This sets the range register in the PWM generator. The default is 1024.
            </summary>
            <param name="range">The range.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.pwmSetClock(System.Int32)">
            <summary>
            This sets the divisor for the PWM clock.
            Note: The PWM control functions can not be used when in Sys mode. 
            To understand more about the PWM system, you’ll need to read the Broadcom ARM peripherals manual.
            </summary>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.gpioClockSet(System.Int32,System.Int32)">
            <summary>
            Undocumented function
            </summary>
            <param name="pin">The pin.</param>
            <param name="freq">The freq.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.waitForInterrupt(System.Int32,System.Int32)">
            <summary>
            Note: Jan 2013: The waitForInterrupt() function is deprecated – you should use the newer and easier to use wiringPiISR() function below.
            When called, it will wait for an interrupt event to happen on that pin and your program will be stalled. The timeOut parameter is given in milliseconds, 
            or can be -1 which means to wait forever.
            The return value is -1 if an error occurred (and errno will be set appropriately), 0 if it timed out, or 1 on a successful interrupt event.
            Before you call waitForInterrupt, you must first initialise the GPIO pin and at present the only way to do this is to use the gpio program, either 
            in a script, or using the system() call from inside your program.
            e.g. We want to wait for a falling-edge interrupt on GPIO pin 0, so to setup the hardware, we need to run: gpio edge 0 falling
            before running the program.
            </summary>
            <param name="pin">The pin.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiISR(System.Int32,System.Int32,Unosquare.RaspberryIO.Native.InterrputServiceRoutineCallback)">
            <summary>
            This function registers a function to received interrupts on the specified pin. 
            The edgeType parameter is either INT_EDGE_FALLING, INT_EDGE_RISING, INT_EDGE_BOTH or INT_EDGE_SETUP. 
            If it is INT_EDGE_SETUP then no initialisation of the pin will happen – it’s assumed that you have already setup the pin elsewhere 
            (e.g. with the gpio program), but if you specify one of the other types, then the pin will be exported and initialised as specified. 
            This is accomplished via a suitable call to the gpio utility program, so it need to be available.
            The pin number is supplied in the current mode – native wiringPi, BCM_GPIO, physical or Sys modes.
            This function will work in any mode, and does not need root privileges to work.
            The function will be called when the interrupt triggers. When it is triggered, it’s cleared in the dispatcher before calling your function, 
            so if a subsequent interrupt fires before you finish your handler, then it won’t be missed. (However it can only track one more interrupt, 
            if more than one interrupt fires while one is being handled then they will be ignored)
            This function is run at a high priority (if the program is run using sudo, or as root) and executes concurrently with the main program. 
            It has full access to all the global variables, open file handles and so on.
            </summary>
            <param name="pin">The pin.</param>
            <param name="mode">The mode.</param>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piThreadCreate(Unosquare.RaspberryIO.Native.ThreadWorker)">
            <summary>
            This function creates a thread which is another function in your program previously declared using the PI_THREAD declaration. 
            This function is then run concurrently with your main program. An example may be to have this function wait for an interrupt while 
            your program carries on doing other tasks. The thread can indicate an event, or action by using global variables to 
            communicate back to the main program, or other threads.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piLock(System.Int32)">
            <summary>
            These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. 
            When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key.
            You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread 
            – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – 
            so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piUnlock(System.Int32)">
            <summary>
            These allow you to synchronise variable updates from your main program to any threads running in your program. keyNum is a number from 0 to 3 and represents a “key”. 
            When another process tries to lock the same key, it will be stalled until the first process has unlocked the same key.
            You may need to use these functions to ensure that you get valid data when exchanging data between your main program and a thread 
            – otherwise it’s possible that the thread could wake-up halfway during your data copy and change the data – 
            so the data you end up copying is incomplete, or invalid. See the wfi.c program in the examples directory for an example.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.piHiPri(System.Int32)">
            <summary>
            This attempts to shift your program (or thread in a multi-threaded program) to a higher priority 
            and enables a real-time scheduling. The priority parameter should be from 0 (the default) to 99 (the maximum). 
            This won’t make your program go any faster, but it will give it a bigger slice of time when other programs are running. 
            The priority parameter works relative to others – so you can make one program priority 1 and another priority 2 
            and it will have the same effect as setting one to 10 and the other to 90 (as long as no other 
            programs are running with elevated priorities)
            The return value is 0 for success and -1 for error. If an error is returned, the program should then consult the errno global variable, as per the usual conventions.
            Note: Only programs running as root can change their priority. If called from a non-root program then nothing happens.
            </summary>
            <param name="priority">The priority.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.delay(System.UInt32)">
            <summary>
            This causes program execution to pause for at least howLong milliseconds. 
            Due to the multi-tasking nature of Linux it could be longer. 
            Note that the maximum delay is an unsigned 32-bit integer or approximately 49 days.
            </summary>
            <param name="howLong">The how long.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.delayMicroseconds(System.UInt32)">
            <summary>
            This causes program execution to pause for at least howLong microseconds. 
            Due to the multi-tasking nature of Linux it could be longer. 
            Note that the maximum delay is an unsigned 32-bit integer microseconds or approximately 71 minutes.
            Delays under 100 microseconds are timed using a hard-coded loop continually polling the system time, 
            Delays over 100 microseconds are done using the system nanosleep() function – You may need to consider the implications 
            of very short delays on the overall performance of the system, especially if using threads.
            </summary>
            <param name="howLong">The how long.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.millis">
            <summary>
            This returns a number representing the number of milliseconds since your program called one of the wiringPiSetup functions. 
            It returns an unsigned 32-bit number which wraps after 49 days.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.micros">
            <summary>
            This returns a number representing the number of microseconds since your program called one of 
            the wiringPiSetup functions. It returns an unsigned 32-bit number which wraps after approximately 71 minutes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CRead(System.Int32)">
            <summary>
            Simple device read. Some devices present data when you read them without having to do any register transactions.
            </summary>
            <param name="fd">The fd.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CReadReg8(System.Int32,System.Int32)">
            <summary>
            These read an 8-bit value from the device register indicated.
            </summary>
            <param name="fd">The fd.</param>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CReadReg16(System.Int32,System.Int32)">
            <summary>
            These read a 16-bit value from the device register indicated.
            </summary>
            <param name="fd">The fd.</param>
            <param name="reg">The reg.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CWrite(System.Int32,System.Int32)">
            <summary>
            Simple device write. Some devices accept data this way without needing to access any internal registers.
            </summary>
            <param name="fd">The fd.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CWriteReg8(System.Int32,System.Int32,System.Int32)">
            <summary>
            These write an 8-bit data value into the device register indicated.
            </summary>
            <param name="fd">The fd.</param>
            <param name="reg">The reg.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CWriteReg16(System.Int32,System.Int32,System.Int32)">
            <summary>
            These write a 16-bit data value into the device register indicated.
            </summary>
            <param name="fd">The fd.</param>
            <param name="reg">The reg.</param>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiI2CSetup(System.Int32)">
            <summary>
            This initialises the I2C system with your given device identifier. 
            The ID is the I2C number of the device and you can use the i2cdetect program to find this out. wiringPiI2CSetup() 
            will work out which revision Raspberry Pi you have and open the appropriate device in /dev.
            The return value is the standard Linux filehandle, or -1 if any error – in which case, you can consult errno as usual.
            E.g. the popular MCP23017 GPIO expander is usually device Id 0x20, so this is the number you would pass into wiringPiI2CSetup().
            </summary>
            <param name="devId">The dev identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialOpen(System.String,System.Int32)">
            <summary>
            This opens and initialises the serial device and sets the baud rate. It sets the port into “raw” mode (character at a time and no translations), 
            and sets the read timeout to 10 seconds. The return value is the file descriptor or -1 for any error, in which case errno will be set as appropriate.
            The wiringSerial library is intended to provide simplified control – suitable for most applications, however if you need advanced control 
            – e.g. parity control, modem control lines (via a USB adapter, there are none on the Pi’s on-board UART!) and so on, 
            then you need to do some of this the old fashioned way.
            </summary>
            <param name="device">The device.</param>
            <param name="baud">The baud.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialClose(System.Int32)">
            <summary>
            Closes the device identified by the file descriptor given.
            </summary>
            <param name="fd">The fd.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialPutchar(System.Int32,System.Byte)">
            <summary>
            Sends the single byte to the serial device identified by the given file descriptor.
            </summary>
            <param name="fd">The fd.</param>
            <param name="c">The c.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialPuts(System.Int32,System.String)">
            <summary>
            Sends the nul-terminated string to the serial device identified by the given file descriptor.
            </summary>
            <param name="fd">The fd.</param>
            <param name="s">The s.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialDataAvail(System.Int32)">
            <summary>
            Returns the number of characters available for reading, or -1 for any error condition, 
            in which case errno will be set appropriately.
            </summary>
            <param name="fd">The fd.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialGetchar(System.Int32)">
            <summary>
            Returns the next character available on the serial device. 
            This call will block for up to 10 seconds if no data is available (when it will return -1)
            </summary>
            <param name="fd">The fd.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.serialFlush(System.Int32)">
            <summary>
            This discards all data received, or waiting to be send down the given device.
            </summary>
            <param name="fd">The fd.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.shiftIn(System.Byte,System.Byte,System.Byte)">
            <summary>
            This shifts an 8-bit data value in with the data appearing on the dPin and the clock being sent out on the cPin. 
            Order is either LSBFIRST or MSBFIRST. The data is sampled after the cPin goes high. 
            (So cPin high, sample data, cPin low, repeat for 8 bits) The 8-bit value is returned by the function.
            </summary>
            <param name="dPin">The d pin.</param>
            <param name="cPin">The c pin.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.shiftOut(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            The shifts an 8-bit data value val out with the data being sent out on dPin and the clock being sent out on the cPin. 
            order is as above. Data is clocked out on the rising or falling edge – ie. dPin is set, then cPin is taken high then low 
            – repeated for the 8 bits.
            </summary>
            <param name="dPin">The d pin.</param>
            <param name="cPin">The c pin.</param>
            <param name="order">The order.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softPwmCreate(System.Int32,System.Int32,System.Int32)">
            <summary>
            This creates a software controlled PWM pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() 
            function you used. Use 100 for the pwmRange, then the value can be anything from 0 (off) to 100 (fully on) for the given pin.
            The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong.
            </summary>
            <param name="pin">The pin.</param>
            <param name="initialValue">The initial value.</param>
            <param name="pwmRange">The PWM range.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softPwmWrite(System.Int32,System.Int32)">
            <summary>
            This updates the PWM value on the given pin. The value is checked to be in-range and pins that haven’t previously 
            been initialized via softPwmCreate will be silently ignored.
            </summary>
            <param name="pin">The pin.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softPwmStop(System.Int32)">
            <summary>
            This function is undocumented
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softToneCreate(System.Int32)">
            <summary>
            This creates a software controlled tone pin. You can use any GPIO pin and the pin numbering will be that of the wiringPiSetup() function you used.
            The return value is 0 for success. Anything else and you should check the global errno variable to see what went wrong.
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softToneStop(System.Int32)">
            <summary>
            This function is undocumented
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.softToneWrite(System.Int32,System.Int32)">
            <summary>
            This updates the tone frequency value on the given pin. The tone will be played until you set the frequency to 0.
            </summary>
            <param name="pin">The pin.</param>
            <param name="freq">The freq.</param>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSPIGetFd(System.Int32)">
            <summary>
            This function is undocumented
            </summary>
            <param name="channel">The channel.</param>
            <returns>Unknown</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSPIDataRW(System.Int32,System.Byte[],System.Int32)">
            <summary>
            This performs a simultaneous write/read transaction over the selected SPI bus. Data that was in your buffer is overwritten by data returned from the SPI bus.
            That’s all there is in the helper library. It is possible to do simple read and writes over the SPI bus using the standard read() and write() system calls though – 
            write() may be better to use for sending data to chains of shift registers, or those LED strings where you send RGB triplets of data. 
            Devices such as A/D and D/A converters usually need to perform a concurrent write/read transaction to work.
            </summary>
            <param name="channel">The channel.</param>
            <param name="data">The data.</param>
            <param name="len">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSPISetupMode(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is undocumented
            </summary>
            <param name="channel">The channel.</param>
            <param name="speed">The speed.</param>
            <param name="mode">The mode.</param>
            <returns>Unkown</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Native.WiringPi.wiringPiSPISetup(System.Int32,System.Int32)">
            <summary>
            This is the way to initialize a channel (The Pi has 2 channels; 0 and 1). The speed parameter is an integer 
            in the range 500,000 through 32,000,000 and represents the SPI clock speed in Hz.
            The returned value is the Linux file-descriptor for the device, or -1 on error. If an error has happened, you may use the standard errno global variable to see why.
            </summary>
            <param name="channel">The channel.</param>
            <param name="speed">The speed.</param>
            <returns>The Linux file descriptor for the device or -1 for error</returns>
        </member>
        <member name="T:Unosquare.RaspberryIO.Pi">
            <summary>
            Our main character. Provides access to the Raspberry Pi's GPIO, system and board information and Camera
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Pi.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.RaspberryIO.Pi" /> class.
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Pi.RestartAsync">
            <summary>
            Restarts the Pi. Must be running as SU
            </summary>
            <returns>The process result</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Pi.Restart">
            <summary>
            Restarts the Pi. Must be running as SU
            </summary>
            <returns>The process result</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Pi.ShutdownAsync">
            <summary>
            Halts the Pi. Must be running as SU
            </summary>
            <returns>The process result</returns>
        </member>
        <member name="M:Unosquare.RaspberryIO.Pi.Shutdown">
            <summary>
            Halts the Pi. Must be running as SU
            </summary>
            <returns>The process result</returns>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.Gpio">
            <summary>
            Provides access to the Raspberry Pi's GPIO as a collection of GPIO Pins.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.Info">
            <summary>
            Provides information on this Raspberry Pi's CPU and form factor.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.Timing">
            <summary>
            Provides access to The PI's Timing and threading API
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.Spi">
            <summary>
            Provides access to the 2-channel SPI bus
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.I2C">
            <summary>
            Provides access to the functionality of the i2c bus.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.Camera">
            <summary>
            Provides access to the official Raspberry Pi Camera
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Pi.PiDisplay">
            <summary>
            Provides access to the official Raspberry Pi 7-inch DSI Display
            </summary>
        </member>
        <member name="T:Unosquare.RaspberryIO.Resources.EmbeddedResources">
            <summary>
            Provides access to embedded assembly files
            </summary>
        </member>
        <member name="M:Unosquare.RaspberryIO.Resources.EmbeddedResources.#cctor">
            <summary>
            Initializes the <see cref="T:Unosquare.RaspberryIO.Resources.EmbeddedResources"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.RaspberryIO.Resources.EmbeddedResources.ResourceNames">
            <summary>
            Gets the resource names.
            </summary>
            <value>
            The resource names.
            </value>
        </member>
        <member name="M:Unosquare.RaspberryIO.Resources.EmbeddedResources.ExtractAll(System.String)">
            <summary>
            Extracts all the file resources to the specified base path.
            </summary>
            <param name="basePath">The base path.</param>
        </member>
    </members>
</doc>
